apiVersion: batch/v1	
kind: Job	
metadata:	
  name: {{ .Chart.Name }}-vault-acl-init
  namespace: {{ .Release.Namespace }}	
  labels:	
    app: {{ .Chart.Name }}	
    chart: {{ template "omisego-consul.chart" . }}	
    heritage: {{ .Release.Service }}	
    release: {{ .Release.Name }}	
    component: vault-acl-init	
  annotations:	
    "helm.sh/hook": post-install	
    "helm.sh/hook-weight": "2"	
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed
spec:	
  template:	
    metadata:	
      name: {{ .Chart.Name }}-vault-acl-init	
      labels:	
        app: {{ .Chart.Name }}	
        chart: {{ template "omisego-consul.chart" . }}	
        release: {{ .Release.Name }}	
        component: vault-acl-init
    spec:	
      restartPolicy: Never	
      serviceAccountName: {{ .Chart.Name }}
      containers:	
        - name: post-install-job
          image: {{ .Values.global.image }}	
          env:
            - name: CONSUL_HTTP_ADDR
              {{- if .Values.global.tlsEnabled }}
              value: "https://{{ .Chart.Name }}-server:8501"
              {{- else }}
              value: "http://{{ .Chart.Name }}-server:8500"
              {{- end }}
            {{- if .Values.global.tlsEnabled }}	
            - name: CONSUL_HTTP_SSL	
              value: "true"	
            - name: CONSUL_CACERT	
              value: /etc/tls/ca.pem
            {{- end }}	
            - name: CONSUL_HTTP_TOKEN	
              valueFrom:	
                secretKeyRef:	
                  name: {{ .Release.Name }}-bootstrap-acl-token	
                  key: token	
          command:
            - "/bin/sh"
            - "-ec"	
            - |
              consul acl policy create -name vault-service -rules @/consul/config/vault.hcl -datacenter {{ .Values.global.datacenter }}

              export VAULT_ACL_TOKEN=$(curl -X PUT $CONSUL_HTTP_ADDR/v1/acl/token \
                {{- if .Values.global.tlsEnabled }}
                --cacert $CONSUL_CACERT \
                {{- end }}
                -H "Content-Type: application/json" \
                -H "X-Consul-Token: ${CONSUL_HTTP_TOKEN}" \
                --data '{ "Description": "Token for Vault", "Policies": [{ "Name": "vault-service" }], "Local": false }] }' \
                --fail \
                | jq -r '.SecretID')

              curl -X POST https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/{{ .Release.Namespace }}/secrets \
                --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                -H "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                -H "Content-Type: application/json" \
                -H "Accept: application/json" \
                --data "{ \"apiVersion\": \"v1\", \"kind\": \"Secret\", \"metadata\": { \"name\": \"{{ .Chart.Name }}-vault-acl-token\", \"namespace\": \"{{ .Release.Namespace }}\" }, \"type\": \"Opaque\", \"data\": { \"token\": \"$(echo $VAULT_ACL_TOKEN | tr -d '\n' | base64 | tr -d '\n')\" } }" > /dev/null
          volumeMounts:	
            {{- if .Values.global.tlsEnabled }}
            - name: tls-ca-cert	
              mountPath: /etc/tls
            {{- end }}
            - name: server-config	
              mountPath: /consul/config	
      volumes:	
        {{- if .Values.global.tlsEnabled }}
        - name: tls-ca-cert
          secret:
            secretName: {{ .Values.global.certificatesSecretName }}
        {{- end }}
        - name: server-config	
          configMap:	
            name: {{ .Chart.Name }}-server-config
