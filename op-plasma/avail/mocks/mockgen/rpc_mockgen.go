// Code generated by MockGen. DO NOT EDIT.
// Source: ./avail/mocks/rpc.go
//
// Generated by this command:
//
//	mockgen -source=./avail/mocks/rpc.go -destination=./avail/mocks/mockgen/rpc_mockgen.go
//

// Package mock_mocks is a generated GoMock package.
package mock_mocks

import (
	reflect "reflect"

	author "github.com/centrifuge/go-substrate-rpc-client/v4/rpc/author"
	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	mocks "github.com/ethereum-optimism/optimism/op-plasma/avail/mocks"
	gomock "go.uber.org/mock/gomock"
)

// MockAvailChain is a mock of AvailChain interface.
type MockAvailChain struct {
	ctrl     *gomock.Controller
	recorder *MockAvailChainMockRecorder
}

// MockAvailChainMockRecorder is the mock recorder for MockAvailChain.
type MockAvailChainMockRecorder struct {
	mock *MockAvailChain
}

// NewMockAvailChain creates a new mock instance.
func NewMockAvailChain(ctrl *gomock.Controller) *MockAvailChain {
	mock := &MockAvailChain{ctrl: ctrl}
	mock.recorder = &MockAvailChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailChain) EXPECT() *MockAvailChainMockRecorder {
	return m.recorder
}

// GetBlockHash mocks base method.
func (m *MockAvailChain) GetBlockHash(arg0 uint64) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", arg0)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockAvailChainMockRecorder) GetBlockHash(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockAvailChain)(nil).GetBlockHash), arg0)
}

// MockAvailState is a mock of AvailState interface.
type MockAvailState struct {
	ctrl     *gomock.Controller
	recorder *MockAvailStateMockRecorder
}

// MockAvailStateMockRecorder is the mock recorder for MockAvailState.
type MockAvailStateMockRecorder struct {
	mock *MockAvailState
}

// NewMockAvailState creates a new mock instance.
func NewMockAvailState(ctrl *gomock.Controller) *MockAvailState {
	mock := &MockAvailState{ctrl: ctrl}
	mock.recorder = &MockAvailStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailState) EXPECT() *MockAvailStateMockRecorder {
	return m.recorder
}

// GetMetadataLatest mocks base method.
func (m *MockAvailState) GetMetadataLatest() (*types.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataLatest")
	ret0, _ := ret[0].(*types.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataLatest indicates an expected call of GetMetadataLatest.
func (mr *MockAvailStateMockRecorder) GetMetadataLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataLatest", reflect.TypeOf((*MockAvailState)(nil).GetMetadataLatest))
}

// GetRuntimeVersionLatest mocks base method.
func (m *MockAvailState) GetRuntimeVersionLatest() *types.RuntimeVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntimeVersionLatest")
	ret0, _ := ret[0].(*types.RuntimeVersion)
	return ret0
}

// GetRuntimeVersionLatest indicates an expected call of GetRuntimeVersionLatest.
func (mr *MockAvailStateMockRecorder) GetRuntimeVersionLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntimeVersionLatest", reflect.TypeOf((*MockAvailState)(nil).GetRuntimeVersionLatest))
}

// GetStorageLatest mocks base method.
func (m *MockAvailState) GetStorageLatest(key types.StorageKey, target any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageLatest", key, target)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageLatest indicates an expected call of GetStorageLatest.
func (mr *MockAvailStateMockRecorder) GetStorageLatest(key, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageLatest", reflect.TypeOf((*MockAvailState)(nil).GetStorageLatest), key, target)
}

// MockAvailAuthor is a mock of AvailAuthor interface.
type MockAvailAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAvailAuthorMockRecorder
}

// MockAvailAuthorMockRecorder is the mock recorder for MockAvailAuthor.
type MockAvailAuthorMockRecorder struct {
	mock *MockAvailAuthor
}

// NewMockAvailAuthor creates a new mock instance.
func NewMockAvailAuthor(ctrl *gomock.Controller) *MockAvailAuthor {
	mock := &MockAvailAuthor{ctrl: ctrl}
	mock.recorder = &MockAvailAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailAuthor) EXPECT() *MockAvailAuthorMockRecorder {
	return m.recorder
}

// SubmitAndWatchExtrinsic mocks base method.
func (m *MockAvailAuthor) SubmitAndWatchExtrinsic(ext types.Extrinsic) (*author.ExtrinsicStatusSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAndWatchExtrinsic", ext)
	ret0, _ := ret[0].(*author.ExtrinsicStatusSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitAndWatchExtrinsic indicates an expected call of SubmitAndWatchExtrinsic.
func (mr *MockAvailAuthorMockRecorder) SubmitAndWatchExtrinsic(ext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAndWatchExtrinsic", reflect.TypeOf((*MockAvailAuthor)(nil).SubmitAndWatchExtrinsic), ext)
}

// MockRPCInterface is a mock of RPCInterface interface.
type MockRPCInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRPCInterfaceMockRecorder
}

// MockRPCInterfaceMockRecorder is the mock recorder for MockRPCInterface.
type MockRPCInterfaceMockRecorder struct {
	mock *MockRPCInterface
}

// NewMockRPCInterface creates a new mock instance.
func NewMockRPCInterface(ctrl *gomock.Controller) *MockRPCInterface {
	mock := &MockRPCInterface{ctrl: ctrl}
	mock.recorder = &MockRPCInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCInterface) EXPECT() *MockRPCInterfaceMockRecorder {
	return m.recorder
}

// Author mocks base method.
func (m *MockRPCInterface) Author() mocks.AvailAuthor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Author")
	ret0, _ := ret[0].(mocks.AvailAuthor)
	return ret0
}

// Author indicates an expected call of Author.
func (mr *MockRPCInterfaceMockRecorder) Author() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Author", reflect.TypeOf((*MockRPCInterface)(nil).Author))
}

// Chain mocks base method.
func (m *MockRPCInterface) Chain() mocks.AvailChain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chain")
	ret0, _ := ret[0].(mocks.AvailChain)
	return ret0
}

// Chain indicates an expected call of Chain.
func (mr *MockRPCInterfaceMockRecorder) Chain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chain", reflect.TypeOf((*MockRPCInterface)(nil).Chain))
}

// State mocks base method.
func (m *MockRPCInterface) State() mocks.AvailState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(mocks.AvailState)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockRPCInterfaceMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockRPCInterface)(nil).State))
}

// MockAvailRPC is a mock of AvailRPC interface.
type MockAvailRPC struct {
	ctrl     *gomock.Controller
	recorder *MockAvailRPCMockRecorder
}

// MockAvailRPCMockRecorder is the mock recorder for MockAvailRPC.
type MockAvailRPCMockRecorder struct {
	mock *MockAvailRPC
}

// NewMockAvailRPC creates a new mock instance.
func NewMockAvailRPC(ctrl *gomock.Controller) *MockAvailRPC {
	mock := &MockAvailRPC{ctrl: ctrl}
	mock.recorder = &MockAvailRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvailRPC) EXPECT() *MockAvailRPCMockRecorder {
	return m.recorder
}

// RPC mocks base method.
func (m *MockAvailRPC) RPC() mocks.RPCInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPC")
	ret0, _ := ret[0].(mocks.RPCInterface)
	return ret0
}

// RPC indicates an expected call of RPC.
func (mr *MockAvailRPCMockRecorder) RPC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPC", reflect.TypeOf((*MockAvailRPC)(nil).RPC))
}
