package mocks

import types "github.com/centrifuge/go-substrate-rpc-client/v4/types"

var Metadata = &types.Metadata{MagicNumber: 0x6174656d, Version: 0xe, AsMetadataV4: types.MetadataV4{Modules: []types.ModuleMetadataV4(nil)}, AsMetadataV7: types.MetadataV7{Modules: []types.ModuleMetadataV7(nil)}, AsMetadataV8: types.MetadataV8{Modules: []types.ModuleMetadataV8(nil)}, AsMetadataV9: types.MetadataV9{Modules: []types.ModuleMetadataV8(nil)}, AsMetadataV10: types.MetadataV10{Modules: []types.ModuleMetadataV10(nil)}, AsMetadataV11: types.MetadataV11{MetadataV10: types.MetadataV10{Modules: []types.ModuleMetadataV10(nil)}, Extrinsic: types.ExtrinsicV11{Version: 0x0, SignedExtensions: []string(nil)}}, AsMetadataV12: types.MetadataV12{Modules: []types.ModuleMetadataV12(nil), Extrinsic: types.ExtrinsicV11{Version: 0x0, SignedExtensions: []string(nil)}}, AsMetadataV13: types.MetadataV13{Modules: []types.ModuleMetadataV13(nil), Extrinsic: types.ExtrinsicV11{Version: 0x0, SignedExtensions: []string(nil)}}, AsMetadataV14: types.MetadataV14{Lookup: types.PortableRegistryV14{Types: []types.PortableTypeV14{types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "crypto", "AccountId32"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "[u8; 32]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x20, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: true, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x3}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "AccountInfo"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Nonce", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "AccountData", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "nonce", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "Nonce", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "consumers", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RefCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "providers", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RefCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "sufficients", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RefCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "data", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5}}}, HasTypeName: true, TypeName: "AccountData", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: true, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x5}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "AccountData"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "free", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "reserved", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "frozen", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "flags", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7}}}, HasTypeName: true, TypeName: "ExtraFlags", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: true, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x7}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "ExtraFlags"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "u128", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "dispatch", "PerDispatchClass"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "normal", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "operational", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "mandatory", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_weights", "weight_v2", "Weight"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "ref_time", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proof_size", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: true, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: true, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x6}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extrinsic_len", "ExtrinsicLen"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "SID", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "STX", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "raw", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "padded", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd}}}, HasTypeName: true, TypeName: "BoundedBTreeMap<AppId, PaddedExtrinsicLen<STX>, SID>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_btree_map", "BoundedBTreeMap"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "K", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13}}}, HasTypeName: true, TypeName: "BTreeMap<K, V>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "AppId"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: true, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extrinsic_len", "PaddedExtrinsicLen"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "tx_lens", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11}}}, HasTypeName: true, TypeName: "BoundedVec<u32, S>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "num_scalars", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13}}}, Type: types.Si1Type{Path: types.Si1Path{"BTreeMap"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "K", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Type: types.Si1Type{Path: types.Si1Path{"primitive_types", "H256"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "[u8; 32]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "generic", "digest", "Digest"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "logs", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19}}}, HasTypeName: true, TypeName: "Vec<DigestItem>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "generic", "digest", "DigestItem"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "PreRuntime", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b}}}, HasTypeName: true, TypeName: "ConsensusEngineId", Docs: []types.Text(nil)}, types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Consensus", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b}}}, HasTypeName: true, TypeName: "ConsensusEngineId", Docs: []types.Text(nil)}, types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Seal", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b}}}, HasTypeName: true, TypeName: "ConsensusEngineId", Docs: []types.Text(nil)}, types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Other", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "RuntimeEnvironmentUpdated", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x4, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "EventRecord"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "E", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e}}}}, types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "phase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x76}}}, HasTypeName: true, TypeName: "Phase", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "event", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e}}}, HasTypeName: true, TypeName: "E", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "topics", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x77}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "RuntimeEvent"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "System", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f}}}, HasTypeName: true, TypeName: "frame_system::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Utility", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x29}}}, HasTypeName: true, TypeName: "pallet_utility::Event", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Indices", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2c}}}, HasTypeName: true, TypeName: "pallet_indices::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Balances", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2d}}}, HasTypeName: true, TypeName: "pallet_balances::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TransactionPayment", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2f}}}, HasTypeName: true, TypeName: "pallet_transaction_payment::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ElectionProviderMultiPhase", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x30}}}, HasTypeName: true, TypeName: "pallet_election_provider_multi_phase::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Staking", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x36}}}, HasTypeName: true, TypeName: "pallet_staking::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Session", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3c}}}, HasTypeName: true, TypeName: "pallet_session::Event", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TechnicalCommittee", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3d}}}, HasTypeName: true, TypeName: "pallet_collective::Event<Runtime, pallet_collective::Instance2>", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TechnicalMembership", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3e}}}, HasTypeName: true, TypeName: "pallet_membership::Event<Runtime, pallet_membership::Instance1>", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Grandpa", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3f}}}, HasTypeName: true, TypeName: "pallet_grandpa::Event", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Treasury", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x44}}}, HasTypeName: true, TypeName: "pallet_treasury::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Sudo", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x45}}}, HasTypeName: true, TypeName: "pallet_sudo::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ImOnline", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x46}}}, HasTypeName: true, TypeName: "pallet_im_online::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Offences", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4f}}}, HasTypeName: true, TypeName: "pallet_offences::Event", Docs: []types.Text(nil)}}, Index: 0x16, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Scheduler", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x51}}}, HasTypeName: true, TypeName: "pallet_scheduler::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x18, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Bounties", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x54}}}, HasTypeName: true, TypeName: "pallet_bounties::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x19, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Tips", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x55}}}, HasTypeName: true, TypeName: "pallet_tips::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x1a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "DataAvailability", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x56}}}, HasTypeName: true, TypeName: "da_control::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x1d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Preimage", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5a}}}, HasTypeName: true, TypeName: "pallet_preimage::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x21, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Multisig", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5b}}}, HasTypeName: true, TypeName: "pallet_multisig::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x22, Docs: []types.Text(nil)}, types.Si1Variant{Name: "VoterList", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5d}}}, HasTypeName: true, TypeName: "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>", Docs: []types.Text(nil)}}, Index: 0x23, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NominationPools", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5e}}}, HasTypeName: true, TypeName: "pallet_nomination_pools::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x24, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Identity", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x65}}}, HasTypeName: true, TypeName: "pallet_identity::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x25, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mandate", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x67}}}, HasTypeName: true, TypeName: "pallet_mandate::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x26, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Vector", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x68}}}, HasTypeName: true, TypeName: "pallet_vector::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x27, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Proxy", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x71}}}, HasTypeName: true, TypeName: "pallet_proxy::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x28, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TxPause", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x73}}}, HasTypeName: true, TypeName: "pallet_tx_pause::Event<Runtime>", Docs: []types.Text(nil)}}, Index: 0x29, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "ExtrinsicSuccess", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "dispatch_info", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20}}}, HasTypeName: true, TypeName: "DispatchInfo", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"An extrinsic completed successfully."}}, types.Si1Variant{Name: "ExtrinsicFailed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "dispatch_error", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x23}}}, HasTypeName: true, TypeName: "DispatchError", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "dispatch_info", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20}}}, HasTypeName: true, TypeName: "DispatchInfo", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"An extrinsic failed."}}, types.Si1Variant{Name: "CodeUpdated", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"`:code` was updated."}}, types.Si1Variant{Name: "NewAccount", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A new account was created."}}, types.Si1Variant{Name: "KilledAccount", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"An account was reaped."}}, types.Si1Variant{Name: "Remarked", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sender", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"On on-chain remark happened."}}, types.Si1Variant{Name: "UpgradeAuthorized", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "code_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "check_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"An upgrade was authorized."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Event for the System pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "dispatch", "DispatchInfo"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "weight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "class", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x21}}}, HasTypeName: true, TypeName: "DispatchClass", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pays_fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x22}}}, HasTypeName: true, TypeName: "Pays", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x21}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "dispatch", "DispatchClass"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Normal", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Operational", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mandatory", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x22}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "dispatch", "Pays"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Yes", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "No", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x23}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "DispatchError"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Other", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CannotLookup", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "BadOrigin", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Module", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x24}}}, HasTypeName: true, TypeName: "ModuleError", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ConsumerRemaining", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NoProviders", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TooManyConsumers", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Token", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x25}}}, HasTypeName: true, TypeName: "TokenError", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Arithmetic", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x26}}}, HasTypeName: true, TypeName: "ArithmeticError", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Transactional", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x27}}}, HasTypeName: true, TypeName: "TransactionalError", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Exhausted", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Corruption", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Unavailable", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "RootNotAllowed", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x24}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "ModuleError"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "u8", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "error", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b}}}, HasTypeName: true, TypeName: "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x25}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "TokenError"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "FundsUnavailable", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "OnlyProvider", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "BelowMinimum", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CannotCreate", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "UnknownAsset", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Frozen", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Unsupported", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CannotCreateHold", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NotExpendable", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Blocked", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x26}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_arithmetic", "ArithmeticError"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Underflow", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Overflow", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "DivisionByZero", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x27}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "TransactionalError"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "LimitReached", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NoLayer", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: true, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x29}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_utility", "pallet", "Event"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "BatchInterrupted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "error", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x23}}}, HasTypeName: true, TypeName: "DispatchError", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"Batch of dispatches did not complete fully. Index of first failing dispatch given, as", "well as the error."}}, types.Si1Variant{Name: "BatchCompleted", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Batch of dispatches completed fully with no error."}}, types.Si1Variant{Name: "BatchCompletedWithErrors", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Batch of dispatches completed but has errors."}}, types.Si1Variant{Name: "ItemCompleted", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"A single item within a Batch of dispatches has completed with no error."}}, types.Si1Variant{Name: "ItemFailed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "error", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x23}}}, HasTypeName: true, TypeName: "DispatchError", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"A single item within a Batch of dispatches has completed with error."}}, types.Si1Variant{Name: "DispatchedAs", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"A call was dispatched."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, Type: types.Si1Type{Path: types.Si1Path{"Result"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}, types.Si1TypeParameter{Name: "E", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x23}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Ok", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Err", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x23}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2c}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_indices", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "IndexAssigned", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A account index was assigned."}}, types.Si1Variant{Name: "IndexFreed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A account index has been freed up (unassigned)."}}, types.Si1Variant{Name: "IndexFrozen", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A account index has been frozen to its current account ID."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2d}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Endowed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "free_balance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"An account was created with some free balance."}}, types.Si1Variant{Name: "DustLost", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"An account was removed whose balance was non-zero but below ExistentialDeposit,", "resulting in an outright loss."}}, types.Si1Variant{Name: "Transfer", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"Transfer succeeded."}}, types.Si1Variant{Name: "BalanceSet", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "free", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A balance was set by root."}}, types.Si1Variant{Name: "Reserved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"Some balance was reserved (moved from free to reserved)."}}, types.Si1Variant{Name: "Unreserved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"Some balance was unreserved (moved from reserved to free)."}}, types.Si1Variant{Name: "ReserveRepatriated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "destination_status", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2e}}}, HasTypeName: true, TypeName: "Status", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"Some balance was moved from the reserve of the first account to the second account.", "Final argument indicates the destination balance type."}}, types.Si1Variant{Name: "Deposit", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"Some amount was deposited (e.g. for transaction fees)."}}, types.Si1Variant{Name: "Withdraw", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"Some amount was withdrawn from the account (e.g. for transaction fees)."}}, types.Si1Variant{Name: "Slashed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"Some amount was removed from the account (e.g. for misbehavior)."}}, types.Si1Variant{Name: "Minted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"Some amount was minted into an account."}}, types.Si1Variant{Name: "Burned", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"Some amount was burned from an account."}}, types.Si1Variant{Name: "Suspended", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text{"Some amount was suspended from an account (it can be restored later)."}}, types.Si1Variant{Name: "Restored", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text{"Some amount was restored into an account."}}, types.Si1Variant{Name: "Upgraded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text{"An account was upgraded."}}, types.Si1Variant{Name: "Issued", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text{"Total issuance was increased by `amount`, creating a credit to be balanced."}}, types.Si1Variant{Name: "Rescinded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text{"Total issuance was decreased by `amount`, creating a debt to be balanced."}}, types.Si1Variant{Name: "Locked", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text{"Some balance was locked."}}, types.Si1Variant{Name: "Unlocked", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text{"Some balance was unlocked."}}, types.Si1Variant{Name: "Frozen", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text{"Some balance was frozen."}}, types.Si1Variant{Name: "Thawed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text{"Some balance was thawed."}}, types.Si1Variant{Name: "TotalIssuanceForced", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "old", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x15, Docs: []types.Text{"The `TotalIssuance` was forcefully changed."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2e}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "traits", "tokens", "misc", "BalanceStatus"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Free", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Reserved", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2f}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_transaction_payment", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "TransactionFeePaid", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "actual_fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "tip", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,", "has been paid by `who`."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x30}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "SolutionStored", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "compute", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x31}}}, HasTypeName: true, TypeName: "ElectionCompute", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "origin", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "prev_ejected", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A solution was stored with the given compute.", "", "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,", "the stored solution was submited in the signed phase by a miner with the `AccountId`.", "Otherwise, the solution was stored either during the unsigned phase or by", "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make", "room for this one."}}, types.Si1Variant{Name: "ElectionFinalized", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "compute", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x31}}}, HasTypeName: true, TypeName: "ElectionCompute", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "score", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}, HasTypeName: true, TypeName: "ElectionScore", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"The election has been finalized, with the given computation and score."}}, types.Si1Variant{Name: "ElectionFailed", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"An election failed.", "", "Not much can be said about which computes failed in the process."}}, types.Si1Variant{Name: "Rewarded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "<T as frame_system::Config>::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"An account has been rewarded for their signed submission being finalized."}}, types.Si1Variant{Name: "Slashed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "<T as frame_system::Config>::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"An account has been slashed for submitting an invalid signed submission."}}, types.Si1Variant{Name: "PhaseTransitioned", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x34}}}, HasTypeName: true, TypeName: "Phase<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x34}}}, HasTypeName: true, TypeName: "Phase<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "round", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"There was a phase transition in a given round."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x31}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "ElectionCompute"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "OnChain", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Signed", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Unsigned", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Fallback", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Emergency", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_npos_elections", "ElectionScore"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "minimal_stake", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "ExtendedBalance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "sum_stake", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "ExtendedBalance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "sum_stake_squared", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "ExtendedBalance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x34}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "Phase"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Bn", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Off", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Signed", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Unsigned", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x35}}}, HasTypeName: true, TypeName: "(bool, Bn)", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Emergency", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x35}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x36}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "pallet", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "EraPaid", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "era_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "validator_payout", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "remainder", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"The era payout has been set; the first balance is the validator-payout; the second is", "the remainder from the maximum amount of reward."}}, types.Si1Variant{Name: "Rewarded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "dest", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x37}}}, HasTypeName: true, TypeName: "RewardDestination<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"The nominator has been rewarded by this amount to this destination."}}, types.Si1Variant{Name: "Slashed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "staker", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A staker (validator or nominator) has been slashed by the given amount."}}, types.Si1Variant{Name: "SlashReported", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "validator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "fraction", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: true, TypeName: "Perbill", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slash_era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A slash for the given validator, for the given percentage of their stake, at the given", "era as been reported."}}, types.Si1Variant{Name: "OldSlashingReportDiscarded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "session_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SessionIndex", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"An old slashing report from a prior era was discarded because it could", "not be processed."}}, types.Si1Variant{Name: "StakersElected", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"A new set of stakers was elected."}}, types.Si1Variant{Name: "Bonded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"An account has bonded this amount. \\[stash, amount\\]", "", "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,", "it will not be emitted for staking rewards when they are added to stake."}}, types.Si1Variant{Name: "Unbonded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"An account has unbonded this amount."}}, types.Si1Variant{Name: "Withdrawn", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`", "from the unlocking queue."}}, types.Si1Variant{Name: "Kicked", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "nominator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"A nominator has been kicked from a validator."}}, types.Si1Variant{Name: "StakingElectionFailed", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"The election failed. No new era is planned."}}, types.Si1Variant{Name: "Chilled", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"An account has stopped participating as either a validator or nominator."}}, types.Si1Variant{Name: "PayoutStarted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "era_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "validator_stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text{"The stakers' rewards are getting paid."}}, types.Si1Variant{Name: "ValidatorPrefsSet", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "prefs", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x39}}}, HasTypeName: true, TypeName: "ValidatorPrefs", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text{"A validator has set their preferences."}}, types.Si1Variant{Name: "SnapshotVotersSizeExceeded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "size", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text{"Voters size limit reached."}}, types.Si1Variant{Name: "SnapshotTargetsSizeExceeded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "size", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text{"Targets size limit reached."}}, types.Si1Variant{Name: "ForceEra", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "mode", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3b}}}, HasTypeName: true, TypeName: "Forcing", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text{"A new force era mode was set."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x37}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "RewardDestination"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Staked", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Stash", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Controller", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Account", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_arithmetic", "per_things", "Perbill"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x39}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "ValidatorPrefs"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3a}}}, HasTypeName: true, TypeName: "Perbill", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "blocked", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: true, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3b}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "Forcing"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NotForcing", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ForceNew", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ForceNone", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ForceAlways", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3c}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_session", "pallet", "Event"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NewSession", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "session_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SessionIndex", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"New session has happened. Note that the argument is the session index, not the", "block number as the type might suggest."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3d}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_collective", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Proposed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proposal_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A motion (given hash) has been proposed (by given account) with a threshold (given", "`MemberCount`)."}}, types.Si1Variant{Name: "Voted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "voted", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "yes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "no", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A motion (given hash) has been voted on by given account, leaving", "a tally (yes votes and no votes given respectively as `MemberCount`)."}}, types.Si1Variant{Name: "Approved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A motion was approved by the required threshold."}}, types.Si1Variant{Name: "Disapproved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A motion was not approved by the required threshold."}}, types.Si1Variant{Name: "Executed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"A motion was executed; result will be `Ok` if it returned without error."}}, types.Si1Variant{Name: "MemberExecuted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"A single member did some action; result will be `Ok` if it returned without error."}}, types.Si1Variant{Name: "Closed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "yes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "no", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"A proposal was closed because its threshold was reached or after its duration was up."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3e}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_membership", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "MemberAdded", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"The given member was added; see the transaction for who."}}, types.Si1Variant{Name: "MemberRemoved", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"The given member was removed; see the transaction for who."}}, types.Si1Variant{Name: "MembersSwapped", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Two members were swapped; see the transaction for who."}}, types.Si1Variant{Name: "MembersReset", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The membership was reset; see the transaction for who the new set is."}}, types.Si1Variant{Name: "KeyChanged", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"One of the members' keys changed."}}, types.Si1Variant{Name: "Dummy", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"Phantom member, never used."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3f}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_grandpa", "pallet", "Event"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NewAuthorities", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority_set", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x40}}}, HasTypeName: true, TypeName: "AuthorityList", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"New authority set has been applied."}}, types.Si1Variant{Name: "Paused", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Current authority set has been paused."}}, types.Si1Variant{Name: "Resumed", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Current authority set has been resumed."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x40}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x41}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x41}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x42}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x42}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_grandpa", "app", "Public"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x43}}}, HasTypeName: true, TypeName: "ed25519::Public", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x43}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "ed25519", "Public"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "[u8; 32]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x44}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_treasury", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Proposed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"New proposal."}}, types.Si1Variant{Name: "Spending", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "budget_remaining", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"We have ended a spend period and will now allocate funds."}}, types.Si1Variant{Name: "Awarded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "award", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"Some funds have been allocated."}}, types.Si1Variant{Name: "Rejected", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slashed", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A proposal was rejected; funds were slashed."}}, types.Si1Variant{Name: "Burnt", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "burnt_funds", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"Some of our funds have been burnt."}}, types.Si1Variant{Name: "Rollover", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "rollover_balance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"Spending has finished; this is the amount that rolls over until next spend."}}, types.Si1Variant{Name: "Deposit", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"Some funds have been deposited."}}, types.Si1Variant{Name: "SpendApproved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"A new spend proposal has been approved."}}, types.Si1Variant{Name: "UpdatedInactive", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "reactivated", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deactivated", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"The inactive funds of the pallet have been updated."}}, types.Si1Variant{Name: "AssetSpendApproved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "asset_kind", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, HasTypeName: true, TypeName: "T::AssetKind", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "AssetBalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::Beneficiary", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "valid_from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "expire_at", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"A new asset spend proposal has been approved."}}, types.Si1Variant{Name: "AssetSpendVoided", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"An approved spend was voided."}}, types.Si1Variant{Name: "Paid", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "payment_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, HasTypeName: true, TypeName: "<T::Paymaster as Pay>::Id", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"A payment happened."}}, types.Si1Variant{Name: "PaymentFailed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "payment_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, HasTypeName: true, TypeName: "<T::Paymaster as Pay>::Id", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text{"A payment failed and can be retried."}}, types.Si1Variant{Name: "SpendProcessed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text{"A spend was processed and removed from the storage. It might have been successfully", "paid or it may have expired."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x45}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_sudo", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Sudid", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sudo_result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text{"The result of the call made by the sudo user."}}}, Index: 0x0, Docs: []types.Text{"A sudo call just took place."}}, types.Si1Variant{Name: "KeyChanged", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "old", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text{"The old sudo key (if one was previously set)."}}, types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text{"The new sudo key (if one was set)."}}}, Index: 0x1, Docs: []types.Text{"The sudo key has been updated."}}, types.Si1Variant{Name: "KeyRemoved", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"The key was permanently removed."}}, types.Si1Variant{Name: "SudoAsDone", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sudo_result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text{"The result of the call made by the sudo user."}}}, Index: 0x3, Docs: []types.Text{"A [sudo_as](Pallet::sudo_as) call just took place."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x46}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_im_online", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "HeartbeatReceived", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x47}}}, HasTypeName: true, TypeName: "T::AuthorityId", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A new heartbeat was received from `AuthorityId`."}}, types.Si1Variant{Name: "AllGood", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"At the end of the session, no offence was committed."}}, types.Si1Variant{Name: "SomeOffline", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "offline", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x49}}}, HasTypeName: true, TypeName: "Vec<IdentificationTuple<T>>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"At the end of the session, at least one validator was found to be offline."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x47}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_im_online", "sr25519", "app_sr25519", "Public"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x48}}}, HasTypeName: true, TypeName: "sr25519::Public", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x48}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "sr25519", "Public"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "[u8; 32]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x49}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4a}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4b}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_staking", "Exposure"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "total", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "own", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "others", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4d}}}, HasTypeName: true, TypeName: "Vec<IndividualExposure<AccountId, Balance>>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: true, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4d}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4e}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4e}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_staking", "IndividualExposure"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4f}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_offences", "pallet", "Event"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Offence", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "kind", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x50}}}, HasTypeName: true, TypeName: "Kind", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "timeslot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "OpaqueTimeSlot", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"There is an offence reported of the given `kind` happened at the `session_index` and", "(kind-specific) time slot. This event is not deposited for duplicate slashes.", "\\[kind, timeslot\\]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Events type."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x50}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x10, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x51}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_scheduler", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Scheduled", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "when", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"Scheduled some task."}}, types.Si1Variant{Name: "Canceled", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "when", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"Canceled some task."}}, types.Si1Variant{Name: "Dispatched", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "task", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, HasTypeName: true, TypeName: "TaskAddress<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x53}}}, HasTypeName: true, TypeName: "Option<TaskName>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"Dispatched some task."}}, types.Si1Variant{Name: "CallUnavailable", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "task", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, HasTypeName: true, TypeName: "TaskAddress<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x53}}}, HasTypeName: true, TypeName: "Option<TaskName>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"The call for the provided hash was not found so the task has been aborted."}}, types.Si1Variant{Name: "PeriodicFailed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "task", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, HasTypeName: true, TypeName: "TaskAddress<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x53}}}, HasTypeName: true, TypeName: "Option<TaskName>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"The given task was unable to be renewed since the agenda is full at that block."}}, types.Si1Variant{Name: "PermanentlyOverweight", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "task", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, HasTypeName: true, TypeName: "TaskAddress<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x53}}}, HasTypeName: true, TypeName: "Option<TaskName>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"The given task can never be executed since it is overweight."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Events type."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x53}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x54}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bounties", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "BountyProposed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"New bounty proposal."}}, types.Si1Variant{Name: "BountyRejected", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A bounty proposal was rejected; funds were slashed."}}, types.Si1Variant{Name: "BountyBecameActive", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A bounty proposal is funded and became active."}}, types.Si1Variant{Name: "BountyAwarded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A bounty is awarded to a beneficiary."}}, types.Si1Variant{Name: "BountyClaimed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "payout", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"A bounty is claimed by beneficiary."}}, types.Si1Variant{Name: "BountyCanceled", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"A bounty is cancelled."}}, types.Si1Variant{Name: "BountyExtended", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"A bounty expiry is extended."}}, types.Si1Variant{Name: "BountyApproved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"A bounty is approved."}}, types.Si1Variant{Name: "CuratorProposed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "curator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"A bounty curator is proposed."}}, types.Si1Variant{Name: "CuratorUnassigned", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"A bounty curator is unassigned."}}, types.Si1Variant{Name: "CuratorAccepted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "curator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"A bounty curator is accepted."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x55}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_tips", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NewTip", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "tip_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A new tip suggestion has been opened."}}, types.Si1Variant{Name: "TipClosing", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "tip_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A tip suggestion has reached threshold and is closing."}}, types.Si1Variant{Name: "TipClosed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "tip_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "payout", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A tip suggestion has been closed."}}, types.Si1Variant{Name: "TipRetracted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "tip_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A tip suggestion has been retracted."}}, types.Si1Variant{Name: "TipSlashed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "tip_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "finder", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"A tip suggestion has been slashed."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x56}}}, Type: types.Si1Type{Path: types.Si1Path{"da_control", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "ApplicationKeyCreated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "key", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x57}}}, HasTypeName: true, TypeName: "AppKeyFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "owner", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}, HasTypeName: true, TypeName: "AppId", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A new application key was created."}}, types.Si1Variant{Name: "DataSubmitted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "data_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "BlockLengthProposalSubmitted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "rows", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x58}}}, HasTypeName: true, TypeName: "BlockLengthRows", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "cols", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x59}}}, HasTypeName: true, TypeName: "BlockLengthColumns", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Event for the pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x57}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x58}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "BlockLengthRows"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x59}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "BlockLengthColumns"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5a}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_preimage", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A preimage has been noted."}}, types.Si1Variant{Name: "Requested", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A preimage has been requested."}}, types.Si1Variant{Name: "Cleared", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A preimage has ben cleared."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5b}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_multisig", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NewMultisig", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "approving", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "multisig", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "CallHash", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A new multisig operation has begun."}}, types.Si1Variant{Name: "MultisigApproval", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "approving", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "timepoint", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}, HasTypeName: true, TypeName: "Timepoint<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "multisig", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "CallHash", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A multisig operation has been approved by someone."}}, types.Si1Variant{Name: "MultisigExecuted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "approving", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "timepoint", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}, HasTypeName: true, TypeName: "Timepoint<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "multisig", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "CallHash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A multisig operation has been executed."}}, types.Si1Variant{Name: "MultisigCancelled", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "cancelling", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "timepoint", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}, HasTypeName: true, TypeName: "Timepoint<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "multisig", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "CallHash", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A multisig operation has been cancelled."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_multisig", "Timepoint"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "height", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5d}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bags_list", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Rebagged", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "T::Score", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "T::Score", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"Moved an account from one bag to another."}}, types.Si1Variant{Name: "ScoreUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new_score", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "T::Score", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"Updated the score of some account to the given amount."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5e}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Created", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "depositor", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A pool has been created."}}, types.Si1Variant{Name: "Bonded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "member", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bonded", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "joined", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A member has became bonded in a pool."}}, types.Si1Variant{Name: "PaidOut", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "member", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "payout", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A payout has been made to a member."}}, types.Si1Variant{Name: "Unbonded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "member", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "balance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "points", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A member has unbonded from their pool.", "", "- `balance` is the corresponding balance of the number of points that has been", "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded", "  pool.", "- `points` is the number of points that are issued as a result of `balance` being", "dissolved into the corresponding unbonding pool.", "- `era` is the era in which the balance will be unbonded.", "In the absence of slashing, these values will match. In the presence of slashing, the", "number of points that are issued in the unbonding pool will be less than the amount", "requested to be unbonded."}}, types.Si1Variant{Name: "Withdrawn", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "member", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "balance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "points", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"A member has withdrawn from their pool.", "", "The given number of `points` have been dissolved in return of `balance`.", "", "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance", "will be 1."}}, types.Si1Variant{Name: "Destroyed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"A pool has been destroyed."}}, types.Si1Variant{Name: "StateChanged", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new_state", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5f}}}, HasTypeName: true, TypeName: "PoolState", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"The state of a pool has changed"}}, types.Si1Variant{Name: "MemberRemoved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "member", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"A member has been removed from a pool.", "", "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."}}, types.Si1Variant{Name: "RolesUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bouncer", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "nominator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"The roles of a pool have been updated to the given new roles. Note that the depositor", "can never change."}}, types.Si1Variant{Name: "PoolSlashed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "balance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"The active balance of pool `pool_id` has been slashed to `balance`."}}, types.Si1Variant{Name: "UnbondingPoolSlashed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "balance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."}}, types.Si1Variant{Name: "PoolCommissionUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "current", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x60}}}, HasTypeName: true, TypeName: "Option<(Perbill, T::AccountId)>", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"A pool's commission setting has been changed."}}, types.Si1Variant{Name: "PoolMaxCommissionUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: true, TypeName: "Perbill", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text{"A pool's maximum commission setting has been changed."}}, types.Si1Variant{Name: "PoolCommissionChangeRateUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "change_rate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x62}}}, HasTypeName: true, TypeName: "CommissionChangeRate<BlockNumberFor<T>>", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text{"A pool's commission `change_rate` has been changed."}}, types.Si1Variant{Name: "PoolCommissionClaimPermissionUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "permission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x63}}}, HasTypeName: true, TypeName: "Option<CommissionClaimPermission<T::AccountId>>", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text{"Pool commission claim permission has been updated."}}, types.Si1Variant{Name: "PoolCommissionClaimed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text{"Pool commission has been claimed."}}, types.Si1Variant{Name: "MinBalanceDeficitAdjusted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text{"Topped up deficit in frozen ED of the reward pool."}}, types.Si1Variant{Name: "MinBalanceExcessAdjusted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text{"Claimed excess frozen ED of af the reward pool."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Events of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5f}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "PoolState"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Open", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Blocked", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Destroying", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x60}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x61}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x61}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x61}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x62}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "CommissionChangeRate"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "max_increase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: true, TypeName: "Perbill", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "min_delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x63}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x64}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x64}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x64}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "CommissionClaimPermission"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Permissionless", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Account", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x65}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "IdentitySet", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A name was set or reset (which will remove all judgements)."}}, types.Si1Variant{Name: "IdentityCleared", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A name was cleared, and the given balance returned."}}, types.Si1Variant{Name: "IdentityKilled", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"A name was removed and the given balance slashed."}}, types.Si1Variant{Name: "JudgementRequested", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "registrar_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A judgement was asked from a registrar."}}, types.Si1Variant{Name: "JudgementUnrequested", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "registrar_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"A judgement request was retracted."}}, types.Si1Variant{Name: "JudgementGiven", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "target", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "registrar_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"A judgement was given by a registrar."}}, types.Si1Variant{Name: "RegistrarAdded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "registrar_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"A registrar was added."}}, types.Si1Variant{Name: "SubIdentityAdded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sub", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "main", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"A sub-identity was added to an identity and the deposit paid."}}, types.Si1Variant{Name: "SubIdentityRemoved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sub", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "main", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"A sub-identity was removed from an identity and the deposit freed."}}, types.Si1Variant{Name: "SubIdentityRevoked", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sub", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "main", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"A sub-identity was cleared, and the given deposit repatriated from the", "main identity account to the sub-identity account."}}, types.Si1Variant{Name: "AuthorityAdded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"A username authority was added."}}, types.Si1Variant{Name: "AuthorityRemoved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"A username authority was removed."}}, types.Si1Variant{Name: "UsernameSet", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text{"A username was set for `who`."}}, types.Si1Variant{Name: "UsernameQueued", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "expiration", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text{"A username was queued, but `who` must accept it prior to `expiration`."}}, types.Si1Variant{Name: "PreapprovalExpired", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "whose", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text{"A queued username passed its expiration without being claimed and was removed."}}, types.Si1Variant{Name: "PrimaryUsernameSet", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text{"A username was set as a primary and can be looked up from `who`."}}, types.Si1Variant{Name: "DanglingUsernameRemoved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text{"A dangling username (as in, a username corresponding to an account that has removed its", "identity) has been removed."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x67}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_mandate", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "RootOp", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A root operation was executed, show result"}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x68}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_vector", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "HeadUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "slot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "finalization_root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "execution_state_root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"emit event once the head is updated."}}, types.Si1Variant{Name: "SyncCommitteeUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "period", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x69}}}, HasTypeName: true, TypeName: "U256", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"emit event once the sync committee updates."}}, types.Si1Variant{Name: "BroadcasterUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "old", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "domain", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"emit when new updater is set"}}, types.Si1Variant{Name: "MessageExecuted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "message_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "message_root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"emit when message gets executed."}}, types.Si1Variant{Name: "SourceChainFrozen", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "source_chain_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "frozen", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"emit if source chain gets frozen."}}, types.Si1Variant{Name: "MessageSubmitted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "message_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6b}}}, HasTypeName: true, TypeName: "MessageType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "destination_domain", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"emit when message is submitted."}}, types.Si1Variant{Name: "WhitelistedDomainsUpdated", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"Whitelisted domains were updated."}}, types.Si1Variant{Name: "ConfigurationUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "slots_per_period", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "finality_threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"Configuration was updated."}}, types.Si1Variant{Name: "FunctionIdsUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6d}}}, HasTypeName: true, TypeName: "Option<(H256, H256)>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"Function Ids were updated"}}, types.Si1Variant{Name: "StepVerificationKeyUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6f}}}, HasTypeName: true, TypeName: "Option<BoundedVec<u8, ConstU32<10_000>>>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"Step verification key was updated"}}, types.Si1Variant{Name: "RotateVerificationKeyUpdated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6f}}}, HasTypeName: true, TypeName: "Option<BoundedVec<u8, ConstU32<10_000>>>", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"Rotate verification key was updated"}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x69}}}, Type: types.Si1Type{Path: types.Si1Path{"primitive_types", "U256"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6a}}}, HasTypeName: true, TypeName: "[u64; 4]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x4, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6b}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "data_proof_v2", "MessageType"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "ArbitraryMessage", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "FungibleToken", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: true, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x4}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6d}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6e}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6e}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6e}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6f}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x70}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x70}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x70}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x71}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_proxy", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "ProxyExecuted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "result", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2a}}}, HasTypeName: true, TypeName: "DispatchResult", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A proxy was executed correctly, with the given."}}, types.Si1Variant{Name: "PureCreated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pure", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "T::ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "disambiguation_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"A pure account has been created by new proxy with given", "disambiguation index and proxy type."}}, types.Si1Variant{Name: "Announced", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "real", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "CallHashOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"An announcement was placed to make a call in the future."}}, types.Si1Variant{Name: "ProxyAdded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delegator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delegatee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "T::ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"A proxy was added."}}, types.Si1Variant{Name: "ProxyRemoved", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delegator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delegatee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "T::ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"A proxy was removed."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "impls", "ProxyType"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Any", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NonTransfer", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Governance", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Staking", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x73}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_tx_pause", "pallet", "Event"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "CallPaused", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "full_name", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x74}}}, HasTypeName: true, TypeName: "RuntimeCallNameOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"This pallet, or a specific call is now paused."}}, types.Si1Variant{Name: "CallUnpaused", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "full_name", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x74}}}, HasTypeName: true, TypeName: "RuntimeCallNameOf<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"This pallet, or a specific call is now unpaused."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Event` enum of this pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x74}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x75}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x75}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x75}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x76}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "Phase"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "ApplyExtrinsic", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Finalization", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Initialization", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x77}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x78}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x79}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "LastRuntimeUpgradeInfo"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "spec_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "codec::Compact<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "spec_name", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7a}}}, HasTypeName: true, TypeName: "sp_runtime::RuntimeString", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: true, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x2}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7b}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "CodeUpgradeAuthorization"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "code_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "check_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7c}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "limits", "BlockLength"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "max", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7d}}}, HasTypeName: true, TypeName: "PerDispatchClass<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "cols", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x59}}}, HasTypeName: true, TypeName: "BlockLengthColumns", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "rows", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x58}}}, HasTypeName: true, TypeName: "BlockLengthRows", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "chunk_size", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7d}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "dispatch", "PerDispatchClass"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "normal", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "operational", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "mandatory", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7e}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7f}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "remark", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "remark", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::remark`]."}}, types.Si1Variant{Name: "set_heap_pages", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pages", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::set_heap_pages`]."}}, types.Si1Variant{Name: "set_code", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "code", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::set_code`]."}}, types.Si1Variant{Name: "set_code_without_checks", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "code", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::set_code_without_checks`]."}}, types.Si1Variant{Name: "set_storage", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "items", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x80}}}, HasTypeName: true, TypeName: "Vec<KeyValue>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::set_storage`]."}}, types.Si1Variant{Name: "kill_storage", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "keys", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x82}}}, HasTypeName: true, TypeName: "Vec<Key>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::kill_storage`]."}}, types.Si1Variant{Name: "kill_prefix", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "prefix", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Key", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "subkeys", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::kill_prefix`]."}}, types.Si1Variant{Name: "remark_with_event", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "remark", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::remark_with_event`]."}}, types.Si1Variant{Name: "authorize_upgrade", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "code_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"See [`Pallet::authorize_upgrade`]."}}, types.Si1Variant{Name: "authorize_upgrade_without_checks", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "code_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"See [`Pallet::authorize_upgrade_without_checks`]."}}, types.Si1Variant{Name: "apply_authorized_upgrade", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "code", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"See [`Pallet::apply_authorized_upgrade`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x80}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x81}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x81}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x82}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x83}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "limits", "BlockWeights"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "base_block", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_block", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "per_class", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x84}}}, HasTypeName: true, TypeName: "PerDispatchClass<WeightsPerClass>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x84}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "dispatch", "PerDispatchClass"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x85}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "normal", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x85}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "operational", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x85}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "mandatory", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x85}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x85}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "limits", "WeightsPerClass"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "base_extrinsic", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_extrinsic", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x86}}}, HasTypeName: true, TypeName: "Option<Weight>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_total", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x86}}}, HasTypeName: true, TypeName: "Option<Weight>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "reserved", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x86}}}, HasTypeName: true, TypeName: "Option<Weight>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x86}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x87}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_weights", "RuntimeDbWeight"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "read", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "write", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x88}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_version", "RuntimeVersion"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "spec_name", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7a}}}, HasTypeName: true, TypeName: "RuntimeString", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "impl_name", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7a}}}, HasTypeName: true, TypeName: "RuntimeString", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "authoring_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "spec_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "impl_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "apis", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x89}}}, HasTypeName: true, TypeName: "ApisVec", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "transaction_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "state_version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "u8", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x89}}}, Type: types.Si1Type{Path: types.Si1Path{"Cow"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8a}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8a}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8b}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8c}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8c}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x8, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8d}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "InvalidSpecName", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"The name of specification does not match between the current runtime", "and the new runtime."}}, types.Si1Variant{Name: "SpecVersionNeedsToIncrease", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"The specification version is not allowed to decrease between the current runtime", "and the new runtime."}}, types.Si1Variant{Name: "FailedToExtractRuntimeVersion", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Failed to extract the runtime version from the new runtime.", "", "Either calling `Core_version` or decoding `RuntimeVersion` failed."}}, types.Si1Variant{Name: "NonDefaultComposite", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Suicide called when the account has non-default composite data."}}, types.Si1Variant{Name: "NonZeroRefCount", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"There is a non-zero reference count preventing the account from being purged."}}, types.Si1Variant{Name: "CallFiltered", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"The origin filter prevent the call to be dispatched."}}, types.Si1Variant{Name: "NothingAuthorized", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"No upgrade authorized."}}, types.Si1Variant{Name: "Unauthorized", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"The submitted code is not authorized."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Error for the System pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8e}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_utility", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "batch", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "calls", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8f}}}, HasTypeName: true, TypeName: "Vec<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::batch`]."}}, types.Si1Variant{Name: "as_derivative", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::as_derivative`]."}}, types.Si1Variant{Name: "batch_all", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "calls", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8f}}}, HasTypeName: true, TypeName: "Vec<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::batch_all`]."}}, types.Si1Variant{Name: "dispatch_as", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "as_origin", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x151}}}, HasTypeName: true, TypeName: "Box<T::PalletsOrigin>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::dispatch_as`]."}}, types.Si1Variant{Name: "force_batch", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "calls", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8f}}}, HasTypeName: true, TypeName: "Vec<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::force_batch`]."}}, types.Si1Variant{Name: "with_weight", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "weight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::with_weight`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8f}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "RuntimeCall"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "System", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7f}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Utility", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8e}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Babe", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x91}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Timestamp", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa2}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Indices", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa3}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Balances", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa6}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ElectionProviderMultiPhase", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa9}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Staking", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe5}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Session", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xed}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TechnicalCommittee", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf0}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TechnicalMembership", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf1}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Grandpa", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf2}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Treasury", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfe}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Sudo", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xff}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ImOnline", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x100}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Scheduler", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x104}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>", Docs: []types.Text(nil)}}, Index: 0x18, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Bounties", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x106}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>", Docs: []types.Text(nil)}}, Index: 0x19, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Tips", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x107}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>", Docs: []types.Text(nil)}}, Index: 0x1a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "DataAvailability", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x108}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DataAvailability, Runtime>", Docs: []types.Text(nil)}}, Index: 0x1d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Preimage", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10a}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>", Docs: []types.Text(nil)}}, Index: 0x21, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Multisig", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10b}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>", Docs: []types.Text(nil)}}, Index: 0x22, Docs: []types.Text(nil)}, types.Si1Variant{Name: "VoterList", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10d}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>", Docs: []types.Text(nil)}}, Index: 0x23, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NominationPools", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10e}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>", Docs: []types.Text(nil)}}, Index: 0x24, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Identity", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x115}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>", Docs: []types.Text(nil)}}, Index: 0x25, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mandate", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13f}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Mandate, Runtime>", Docs: []types.Text(nil)}}, Index: 0x26, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Vector", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x140}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vector, Runtime>", Docs: []types.Text(nil)}}, Index: 0x27, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Proxy", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14e}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>", Docs: []types.Text(nil)}}, Index: 0x28, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TxPause", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x150}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TxPause, Runtime>", Docs: []types.Text(nil)}}, Index: 0x29, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x91}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_babe", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "report_equivocation", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "equivocation_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x92}}}, HasTypeName: true, TypeName: "Box<EquivocationProof<HeaderFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "key_owner_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9e}}}, HasTypeName: true, TypeName: "T::KeyOwnerProof", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::report_equivocation`]."}}, types.Si1Variant{Name: "report_equivocation_unsigned", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "equivocation_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x92}}}, HasTypeName: true, TypeName: "Box<EquivocationProof<HeaderFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "key_owner_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9e}}}, HasTypeName: true, TypeName: "T::KeyOwnerProof", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::report_equivocation_unsigned`]."}}, types.Si1Variant{Name: "plan_config_change", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "config", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9f}}}, HasTypeName: true, TypeName: "NextConfigDescriptor", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::plan_config_change`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x92}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_slots", "EquivocationProof"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Header", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x93}}}}, types.Si1TypeParameter{Name: "Id", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9c}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "offender", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9c}}}, HasTypeName: true, TypeName: "Id", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9d}}}, HasTypeName: true, TypeName: "Slot", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "first_header", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x93}}}, HasTypeName: true, TypeName: "Header", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "second_header", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x93}}}, HasTypeName: true, TypeName: "Header", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x93}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "header", "Header"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Number", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "Hash", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x94}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "parent_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "Hash::Output", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "number", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "Number", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "state_root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "Hash::Output", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "extrinsics_root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "Hash::Output", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "digest", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18}}}, HasTypeName: true, TypeName: "Digest", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "extension", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x95}}}, HasTypeName: true, TypeName: "HeaderExtension", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x94}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "traits", "BlakeTwo256"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x95}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "header", "extension", "HeaderExtension"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "V3", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x96}}}, HasTypeName: true, TypeName: "v3::HeaderExtension", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x96}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "header", "extension", "v3", "HeaderExtension"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "app_lookup", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x97}}}, HasTypeName: true, TypeName: "DataLookup", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "commitment", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9a}}}, HasTypeName: true, TypeName: "KateCommitment", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x97}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "data_lookup", "compact", "CompactDataLookup"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "size", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x98}}}, HasTypeName: true, TypeName: "Vec<DataLookupItem>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x98}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x99}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x99}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "data_lookup", "compact", "DataLookupItem"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "app_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}, HasTypeName: true, TypeName: "AppId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "start", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9a}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "kate_commitment", "v3", "KateCommitment"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "rows", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "cols", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "commitment", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "data_root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: true, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9c}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "app", "Public"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x48}}}, HasTypeName: true, TypeName: "sr25519::Public", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9d}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_slots", "Slot"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9e}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_session", "MembershipProof"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "session", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SessionIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "trie_nodes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x82}}}, HasTypeName: true, TypeName: "Vec<Vec<u8>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "validator_count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "ValidatorCount", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9f}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "digests", "NextConfigDescriptor"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "V1", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "c", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa0}}}, HasTypeName: true, TypeName: "(u64, u64)", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "allowed_slots", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa1}}}, HasTypeName: true, TypeName: "AllowedSlots", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa1}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "AllowedSlots"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "PrimarySlots", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PrimaryAndSecondaryPlainSlots", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PrimaryAndSecondaryVRFSlots", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa2}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_timestamp", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "set", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "now", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa}}}, HasTypeName: true, TypeName: "T::Moment", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::set`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa3}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_indices", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "claim", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::claim`]."}}, types.Si1Variant{Name: "transfer", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::transfer`]."}}, types.Si1Variant{Name: "free", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::free`]."}}, types.Si1Variant{Name: "force_transfer", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "freeze", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::force_transfer`]."}}, types.Si1Variant{Name: "freeze", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T::AccountIndex", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::freeze`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "multiaddress", "MultiAddress"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "AccountIndex", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Id", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Index", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "AccountIndex", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Address32", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "[u8; 32]", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Address20", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa5}}}, HasTypeName: true, TypeName: "[u8; 20]", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa5}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x14, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa6}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "transfer_allow_death", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "dest", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::transfer_allow_death`]."}}, types.Si1Variant{Name: "force_transfer", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "source", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "dest", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::force_transfer`]."}}, types.Si1Variant{Name: "transfer_keep_alive", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "dest", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::transfer_keep_alive`]."}}, types.Si1Variant{Name: "transfer_all", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "dest", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "keep_alive", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::transfer_all`]."}}, types.Si1Variant{Name: "force_unreserve", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::force_unreserve`]."}}, types.Si1Variant{Name: "upgrade_accounts", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::upgrade_accounts`]."}}, types.Si1Variant{Name: "force_set_balance", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new_free", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"See [`Pallet::force_set_balance`]."}}, types.Si1Variant{Name: "force_adjust_total_issuance", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "direction", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa8}}}, HasTypeName: true, TypeName: "AdjustmentDirection", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delta", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "T::Balance", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"See [`Pallet::force_adjust_total_issuance`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa8}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "AdjustmentDirection"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Increase", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Decrease", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa9}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "submit_unsigned", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "raw_solution", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xaa}}}, HasTypeName: true, TypeName: "Box<RawSolution<SolutionOf<T::MinerConfig>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "witness", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdd}}}, HasTypeName: true, TypeName: "SolutionOrSnapshotSize", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::submit_unsigned`]."}}, types.Si1Variant{Name: "set_minimum_untrusted_score", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "maybe_next_score", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xde}}}, HasTypeName: true, TypeName: "Option<ElectionScore>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::set_minimum_untrusted_score`]."}}, types.Si1Variant{Name: "set_emergency_election_result", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "supports", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdf}}}, HasTypeName: true, TypeName: "Supports<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::set_emergency_election_result`]."}}, types.Si1Variant{Name: "submit", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "raw_solution", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xaa}}}, HasTypeName: true, TypeName: "Box<RawSolution<SolutionOf<T::MinerConfig>>>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::submit`]."}}, types.Si1Variant{Name: "governance_fallback", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "maybe_max_voters", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_max_targets", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<u32>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::governance_fallback`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xaa}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "RawSolution"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "S", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xab}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "solution", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xab}}}, HasTypeName: true, TypeName: "S", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "score", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}, HasTypeName: true, TypeName: "ElectionScore", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "round", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xab}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "constants", "staking", "NposSolution16"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "votes1", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xac}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes2", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xae}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes3", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb3}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes4", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb6}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes5", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb9}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes6", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbc}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes7", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbf}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes8", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes9", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc5}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes10", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc8}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes11", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcb}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes12", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xce}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes13", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd1}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes14", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd4}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes15", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd7}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "votes16", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xda}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xac}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xad}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xad}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xae}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xaf}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xaf}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb1}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb1}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: true, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb2}}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb2}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_arithmetic", "per_things", "PerU16"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb3}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb4}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb4}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb5}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb5}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x2, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb6}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb7}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb7}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb8}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb8}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x3, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb9}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xba}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xba}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbb}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbb}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x4, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbc}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbd}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbd}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbe}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbe}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x5, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xbf}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc0}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc1}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc1}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x6, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc2}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc3}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc3}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc4}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x7, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc5}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc6}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc6}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc7}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc7}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x8, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc8}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc9}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc9}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xca}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xca}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x9, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcb}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcc}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcc}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcd}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcd}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xa, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xce}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcf}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xcf}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd0}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xb, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd1}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd2}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd2}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd3}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd3}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xc, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd4}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd5}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd5}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd6}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd6}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xd, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd7}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd8}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd8}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd9}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xd9}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xe, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xda}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdb}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdb}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdc}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9b}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdc}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xf, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb0}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdd}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "SolutionOrSnapshotSize"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "voters", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "targets", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xde}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdf}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe0}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe1}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe1}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_npos_elections", "Support"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "total", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "ExtendedBalance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "voters", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe2}}}, HasTypeName: true, TypeName: "Vec<(AccountId, ExtendedBalance)>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe2}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe3}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe3}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe5}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "pallet", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "bond", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "payee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x37}}}, HasTypeName: true, TypeName: "RewardDestination<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::bond`]."}}, types.Si1Variant{Name: "bond_extra", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "max_additional", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::bond_extra`]."}}, types.Si1Variant{Name: "unbond", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::unbond`]."}}, types.Si1Variant{Name: "withdraw_unbonded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "num_slashing_spans", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::withdraw_unbonded`]."}}, types.Si1Variant{Name: "validate", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "prefs", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x39}}}, HasTypeName: true, TypeName: "ValidatorPrefs", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::validate`]."}}, types.Si1Variant{Name: "nominate", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "targets", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe6}}}, HasTypeName: true, TypeName: "Vec<AccountIdLookupOf<T>>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::nominate`]."}}, types.Si1Variant{Name: "chill", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"See [`Pallet::chill`]."}}, types.Si1Variant{Name: "set_payee", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "payee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x37}}}, HasTypeName: true, TypeName: "RewardDestination<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::set_payee`]."}}, types.Si1Variant{Name: "set_controller", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"See [`Pallet::set_controller`]."}}, types.Si1Variant{Name: "set_validator_count", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"See [`Pallet::set_validator_count`]."}}, types.Si1Variant{Name: "increase_validator_count", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "additional", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"See [`Pallet::increase_validator_count`]."}}, types.Si1Variant{Name: "scale_validator_count", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "factor", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe7}}}, HasTypeName: true, TypeName: "Percent", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"See [`Pallet::scale_validator_count`]."}}, types.Si1Variant{Name: "force_no_eras", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text{"See [`Pallet::force_no_eras`]."}}, types.Si1Variant{Name: "force_new_era", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text{"See [`Pallet::force_new_era`]."}}, types.Si1Variant{Name: "set_invulnerables", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "invulnerables", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text{"See [`Pallet::set_invulnerables`]."}}, types.Si1Variant{Name: "force_unstake", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "num_slashing_spans", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text{"See [`Pallet::force_unstake`]."}}, types.Si1Variant{Name: "force_new_era_always", Fields: []types.Si1Field(nil), Index: 0x10, Docs: []types.Text{"See [`Pallet::force_new_era_always`]."}}, types.Si1Variant{Name: "cancel_deferred_slash", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slash_indices", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, HasTypeName: true, TypeName: "Vec<u32>", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text{"See [`Pallet::cancel_deferred_slash`]."}}, types.Si1Variant{Name: "payout_stakers", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "validator_stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text{"See [`Pallet::payout_stakers`]."}}, types.Si1Variant{Name: "rebond", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text{"See [`Pallet::rebond`]."}}, types.Si1Variant{Name: "reap_stash", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "num_slashing_spans", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text{"See [`Pallet::reap_stash`]."}}, types.Si1Variant{Name: "kick", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe6}}}, HasTypeName: true, TypeName: "Vec<AccountIdLookupOf<T>>", Docs: []types.Text(nil)}}, Index: 0x15, Docs: []types.Text{"See [`Pallet::kick`]."}}, types.Si1Variant{Name: "set_staking_configs", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "min_nominator_bond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe8}}}, HasTypeName: true, TypeName: "ConfigOp<BalanceOf<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "min_validator_bond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe8}}}, HasTypeName: true, TypeName: "ConfigOp<BalanceOf<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_nominator_count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe9}}}, HasTypeName: true, TypeName: "ConfigOp<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_validator_count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe9}}}, HasTypeName: true, TypeName: "ConfigOp<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "chill_threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xea}}}, HasTypeName: true, TypeName: "ConfigOp<Percent>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "min_commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xeb}}}, HasTypeName: true, TypeName: "ConfigOp<Perbill>", Docs: []types.Text(nil)}}, Index: 0x16, Docs: []types.Text{"See [`Pallet::set_staking_configs`]."}}, types.Si1Variant{Name: "chill_other", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x17, Docs: []types.Text{"See [`Pallet::chill_other`]."}}, types.Si1Variant{Name: "force_apply_min_commission", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "validator_stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x18, Docs: []types.Text{"See [`Pallet::force_apply_min_commission`]."}}, types.Si1Variant{Name: "set_min_commission", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: true, TypeName: "Perbill", Docs: []types.Text(nil)}}, Index: 0x19, Docs: []types.Text{"See [`Pallet::set_min_commission`]."}}, types.Si1Variant{Name: "payout_stakers_by_page", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "validator_stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "page", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "Page", Docs: []types.Text(nil)}}, Index: 0x1a, Docs: []types.Text{"See [`Pallet::payout_stakers_by_page`]."}}, types.Si1Variant{Name: "update_payee", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "controller", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x1b, Docs: []types.Text{"See [`Pallet::update_payee`]."}}, types.Si1Variant{Name: "deprecate_controller_batch", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "controllers", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xec}}}, HasTypeName: true, TypeName: "BoundedVec<T::AccountId, T::MaxControllersInDeprecationBatch>", Docs: []types.Text(nil)}}, Index: 0x1c, Docs: []types.Text{"See [`Pallet::deprecate_controller_batch`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe6}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe7}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_arithmetic", "per_things", "Percent"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "u8", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe8}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "pallet", "pallet", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe9}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "pallet", "pallet", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xea}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "pallet", "pallet", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe7}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe7}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xeb}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "pallet", "pallet", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xec}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xed}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_session", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "set_keys", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "keys", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xee}}}, HasTypeName: true, TypeName: "T::Keys", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::set_keys`]."}}, types.Si1Variant{Name: "purge_keys", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"See [`Pallet::purge_keys`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xee}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "primitives", "SessionKeys"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "babe", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9c}}}, HasTypeName: true, TypeName: "<crate::Babe as $crate::BoundToRuntimeAppPublic>::Public", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "grandpa", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x42}}}, HasTypeName: true, TypeName: "<crate::Grandpa as $crate::BoundToRuntimeAppPublic>::Public", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "im_online", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x47}}}, HasTypeName: true, TypeName: "<crate::ImOnline as $crate::BoundToRuntimeAppPublic>::Public", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "authority_discovery", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xef}}}, HasTypeName: true, TypeName: "<crate::AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xef}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_authority_discovery", "app", "Public"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x48}}}, HasTypeName: true, TypeName: "sr25519::Public", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf0}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_collective", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "set_members", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "new_members", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "prime", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "old_count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::set_members`]."}}, types.Si1Variant{Name: "execute", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config<I>>::Proposal>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "length_bound", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::execute`]."}}, types.Si1Variant{Name: "propose", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proposal", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config<I>>::Proposal>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "length_bound", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::propose`]."}}, types.Si1Variant{Name: "vote", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "approve", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::vote`]."}}, types.Si1Variant{Name: "disapprove_proposal", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::disapprove_proposal`]."}}, types.Si1Variant{Name: "close", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proposal_weight_bound", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "length_bound", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::close`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf1}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_membership", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "add_member", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::add_member`]."}}, types.Si1Variant{Name: "remove_member", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::remove_member`]."}}, types.Si1Variant{Name: "swap_member", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "remove", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "add", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::swap_member`]."}}, types.Si1Variant{Name: "reset_members", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "members", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::reset_members`]."}}, types.Si1Variant{Name: "change_key", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::change_key`]."}}, types.Si1Variant{Name: "set_prime", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::set_prime`]."}}, types.Si1Variant{Name: "clear_prime", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"See [`Pallet::clear_prime`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf2}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_grandpa", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "report_equivocation", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "equivocation_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf3}}}, HasTypeName: true, TypeName: "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "key_owner_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9e}}}, HasTypeName: true, TypeName: "T::KeyOwnerProof", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::report_equivocation`]."}}, types.Si1Variant{Name: "report_equivocation_unsigned", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "equivocation_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf3}}}, HasTypeName: true, TypeName: "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "key_owner_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9e}}}, HasTypeName: true, TypeName: "T::KeyOwnerProof", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::report_equivocation_unsigned`]."}}, types.Si1Variant{Name: "note_stalled", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "best_finalized_block_number", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::note_stalled`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf3}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_grandpa", "EquivocationProof"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "H", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.Si1TypeParameter{Name: "N", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "set_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "SetId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "equivocation", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf4}}}, HasTypeName: true, TypeName: "Equivocation<H, N>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf4}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_grandpa", "Equivocation"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "H", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.Si1TypeParameter{Name: "N", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Prevote", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf5}}}, HasTypeName: true, TypeName: "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Precommit", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfb}}}, HasTypeName: true, TypeName: "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf5}}}, Type: types.Si1Type{Path: types.Si1Path{"finality_grandpa", "Equivocation"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Id", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x42}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf6}}}}, types.Si1TypeParameter{Name: "S", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf7}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "round_number", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "identity", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x42}}}, HasTypeName: true, TypeName: "Id", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "first", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfa}}}, HasTypeName: true, TypeName: "(V, S)", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "second", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfa}}}, HasTypeName: true, TypeName: "(V, S)", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf6}}}, Type: types.Si1Type{Path: types.Si1Path{"finality_grandpa", "Prevote"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "H", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.Si1TypeParameter{Name: "N", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "target_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "target_number", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf7}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_grandpa", "app", "Signature"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf8}}}, HasTypeName: true, TypeName: "ed25519::Signature", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf8}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "ed25519", "Signature"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf9}}}, HasTypeName: true, TypeName: "[u8; 64]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf9}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x40, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfa}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf6}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf7}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfb}}}, Type: types.Si1Type{Path: types.Si1Path{"finality_grandpa", "Equivocation"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Id", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x42}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfc}}}}, types.Si1TypeParameter{Name: "S", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf7}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "round_number", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "identity", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x42}}}, HasTypeName: true, TypeName: "Id", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "first", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfd}}}, HasTypeName: true, TypeName: "(V, S)", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "second", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfd}}}, HasTypeName: true, TypeName: "(V, S)", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfc}}}, Type: types.Si1Type{Path: types.Si1Path{"finality_grandpa", "Precommit"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "H", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.Si1TypeParameter{Name: "N", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "target_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "target_number", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfd}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfc}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf7}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfe}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_treasury", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "propose_spend", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::propose_spend`]."}}, types.Si1Variant{Name: "reject_proposal", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::reject_proposal`]."}}, types.Si1Variant{Name: "approve_proposal", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::approve_proposal`]."}}, types.Si1Variant{Name: "spend_local", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::spend_local`]."}}, types.Si1Variant{Name: "remove_approval", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposal_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::remove_approval`]."}}, types.Si1Variant{Name: "spend", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "asset_kind", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, HasTypeName: true, TypeName: "Box<T::AssetKind>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "AssetBalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "Box<BeneficiaryLookupOf<T, I>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "valid_from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<BlockNumberFor<T>>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::spend`]."}}, types.Si1Variant{Name: "payout", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::payout`]."}}, types.Si1Variant{Name: "check_status", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::check_status`]."}}, types.Si1Variant{Name: "void_spend", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpendIndex", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"See [`Pallet::void_spend`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xff}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_sudo", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "sudo", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::sudo`]."}}, types.Si1Variant{Name: "sudo_unchecked_weight", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "weight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::sudo_unchecked_weight`]."}}, types.Si1Variant{Name: "set_key", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::set_key`]."}}, types.Si1Variant{Name: "sudo_as", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::sudo_as`]."}}, types.Si1Variant{Name: "remove_key", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"See [`Pallet::remove_key`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x100}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_im_online", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "heartbeat", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "heartbeat", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x101}}}, HasTypeName: true, TypeName: "Heartbeat<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "signature", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x102}}}, HasTypeName: true, TypeName: "<T::AuthorityId as RuntimeAppPublic>::Signature", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::heartbeat`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x101}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_im_online", "Heartbeat"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "block_number", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "session_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SessionIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "authority_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "AuthIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "validators_len", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x102}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_im_online", "sr25519", "app_sr25519", "Signature"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x103}}}, HasTypeName: true, TypeName: "sr25519::Signature", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x103}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "sr25519", "Signature"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf9}}}, HasTypeName: true, TypeName: "[u8; 64]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x104}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_scheduler", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "schedule", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "when", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_periodic", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x105}}}, HasTypeName: true, TypeName: "Option<schedule::Period<BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "priority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "schedule::Priority", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::schedule`]."}}, types.Si1Variant{Name: "cancel", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "when", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::cancel`]."}}, types.Si1Variant{Name: "schedule_named", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "TaskName", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "when", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_periodic", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x105}}}, HasTypeName: true, TypeName: "Option<schedule::Period<BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "priority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "schedule::Priority", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::schedule_named`]."}}, types.Si1Variant{Name: "cancel_named", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "TaskName", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::cancel_named`]."}}, types.Si1Variant{Name: "schedule_after", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "after", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_periodic", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x105}}}, HasTypeName: true, TypeName: "Option<schedule::Period<BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "priority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "schedule::Priority", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::schedule_after`]."}}, types.Si1Variant{Name: "schedule_named_after", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "TaskName", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "after", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_periodic", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x105}}}, HasTypeName: true, TypeName: "Option<schedule::Period<BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "priority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "schedule::Priority", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::schedule_named_after`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x105}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x106}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bounties", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "propose_bounty", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "description", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::propose_bounty`]."}}, types.Si1Variant{Name: "approve_bounty", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::approve_bounty`]."}}, types.Si1Variant{Name: "propose_curator", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "curator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::propose_curator`]."}}, types.Si1Variant{Name: "unassign_curator", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::unassign_curator`]."}}, types.Si1Variant{Name: "accept_curator", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::accept_curator`]."}}, types.Si1Variant{Name: "award_bounty", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::award_bounty`]."}}, types.Si1Variant{Name: "claim_bounty", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::claim_bounty`]."}}, types.Si1Variant{Name: "close_bounty", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::close_bounty`]."}}, types.Si1Variant{Name: "extend_bounty_expiry", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bounty_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BountyIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "remark", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"See [`Pallet::extend_bounty_expiry`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x107}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_tips", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "report_awesome", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "reason", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::report_awesome`]."}}, types.Si1Variant{Name: "retract_tip", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::retract_tip`]."}}, types.Si1Variant{Name: "tip_new", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "reason", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "tip_value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::tip_new`]."}}, types.Si1Variant{Name: "tip", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "tip_value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T, I>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::tip`]."}}, types.Si1Variant{Name: "close_tip", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::close_tip`]."}}, types.Si1Variant{Name: "slash_tip", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::slash_tip`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x108}}}, Type: types.Si1Type{Path: types.Si1Path{"da_control", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "create_application_key", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "key", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x57}}}, HasTypeName: true, TypeName: "AppKeyFor<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::create_application_key`]."}}, types.Si1Variant{Name: "submit_data", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "data", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x109}}}, HasTypeName: true, TypeName: "AppDataFor<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::submit_data`]."}}, types.Si1Variant{Name: "submit_block_length_proposal", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "rows", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "cols", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::submit_block_length_proposal`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x109}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10a}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_preimage", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "note_preimage", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "bytes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::note_preimage`]."}}, types.Si1Variant{Name: "unnote_preimage", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::unnote_preimage`]."}}, types.Si1Variant{Name: "request_preimage", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::request_preimage`]."}}, types.Si1Variant{Name: "unrequest_preimage", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::unrequest_preimage`]."}}, types.Si1Variant{Name: "ensure_updated", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hashes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x77}}}, HasTypeName: true, TypeName: "Vec<T::Hash>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::ensure_updated`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10b}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_multisig", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "as_multi_threshold_1", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "other_signatories", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::as_multi_threshold_1`]."}}, types.Si1Variant{Name: "as_multi", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "other_signatories", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_timepoint", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10c}}}, HasTypeName: true, TypeName: "Option<Timepoint<BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_weight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::as_multi`]."}}, types.Si1Variant{Name: "approve_as_multi", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "other_signatories", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_timepoint", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10c}}}, HasTypeName: true, TypeName: "Option<Timepoint<BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "[u8; 32]", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_weight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, HasTypeName: true, TypeName: "Weight", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::approve_as_multi`]."}}, types.Si1Variant{Name: "cancel_as_multi", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "other_signatories", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "timepoint", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}, HasTypeName: true, TypeName: "Timepoint<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "[u8; 32]", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::cancel_as_multi`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10c}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10d}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bags_list", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "rebag", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "dislocated", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::rebag`]."}}, types.Si1Variant{Name: "put_in_front_of", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "lighter", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::put_in_front_of`]."}}, types.Si1Variant{Name: "put_in_front_of_other", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "heavier", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "lighter", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::put_in_front_of_other`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10e}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "join", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::join`]."}}, types.Si1Variant{Name: "bond_extra", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "extra", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10f}}}, HasTypeName: true, TypeName: "BondExtra<BalanceOf<T>>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::bond_extra`]."}}, types.Si1Variant{Name: "claim_payout", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"See [`Pallet::claim_payout`]."}}, types.Si1Variant{Name: "unbond", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "member_account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "unbonding_points", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::unbond`]."}}, types.Si1Variant{Name: "pool_withdraw_unbonded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "num_slashing_spans", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::pool_withdraw_unbonded`]."}}, types.Si1Variant{Name: "withdraw_unbonded", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "member_account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "num_slashing_spans", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::withdraw_unbonded`]."}}, types.Si1Variant{Name: "create", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "nominator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bouncer", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::create`]."}}, types.Si1Variant{Name: "create_with_pool_id", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "nominator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bouncer", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::create_with_pool_id`]."}}, types.Si1Variant{Name: "nominate", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "validators", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"See [`Pallet::nominate`]."}}, types.Si1Variant{Name: "set_state", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "state", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5f}}}, HasTypeName: true, TypeName: "PoolState", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"See [`Pallet::set_state`]."}}, types.Si1Variant{Name: "set_metadata", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "metadata", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"See [`Pallet::set_metadata`]."}}, types.Si1Variant{Name: "set_configs", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "min_join_bond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x110}}}, HasTypeName: true, TypeName: "ConfigOp<BalanceOf<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "min_create_bond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x110}}}, HasTypeName: true, TypeName: "ConfigOp<BalanceOf<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_pools", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x111}}}, HasTypeName: true, TypeName: "ConfigOp<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_members", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x111}}}, HasTypeName: true, TypeName: "ConfigOp<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_members_per_pool", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x111}}}, HasTypeName: true, TypeName: "ConfigOp<u32>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "global_max_commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x112}}}, HasTypeName: true, TypeName: "ConfigOp<Perbill>", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"See [`Pallet::set_configs`]."}}, types.Si1Variant{Name: "update_roles", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new_root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x113}}}, HasTypeName: true, TypeName: "ConfigOp<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new_nominator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x113}}}, HasTypeName: true, TypeName: "ConfigOp<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new_bouncer", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x113}}}, HasTypeName: true, TypeName: "ConfigOp<T::AccountId>", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text{"See [`Pallet::update_roles`]."}}, types.Si1Variant{Name: "chill", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text{"See [`Pallet::chill`]."}}, types.Si1Variant{Name: "bond_extra_other", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "member", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "extra", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10f}}}, HasTypeName: true, TypeName: "BondExtra<BalanceOf<T>>", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text{"See [`Pallet::bond_extra_other`]."}}, types.Si1Variant{Name: "set_claim_permission", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "permission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x114}}}, HasTypeName: true, TypeName: "ClaimPermission", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text{"See [`Pallet::set_claim_permission`]."}}, types.Si1Variant{Name: "claim_payout_other", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "other", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text{"See [`Pallet::claim_payout_other`]."}}, types.Si1Variant{Name: "set_commission", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new_commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x60}}}, HasTypeName: true, TypeName: "Option<(Perbill, T::AccountId)>", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text{"See [`Pallet::set_commission`]."}}, types.Si1Variant{Name: "set_commission_max", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: true, TypeName: "Perbill", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text{"See [`Pallet::set_commission_max`]."}}, types.Si1Variant{Name: "set_commission_change_rate", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "change_rate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x62}}}, HasTypeName: true, TypeName: "CommissionChangeRate<BlockNumberFor<T>>", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text{"See [`Pallet::set_commission_change_rate`]."}}, types.Si1Variant{Name: "claim_commission", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text{"See [`Pallet::claim_commission`]."}}, types.Si1Variant{Name: "adjust_pool_deposit", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}}, Index: 0x15, Docs: []types.Text{"See [`Pallet::adjust_pool_deposit`]."}}, types.Si1Variant{Name: "set_commission_claim_permission", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "permission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x63}}}, HasTypeName: true, TypeName: "Option<CommissionClaimPermission<T::AccountId>>", Docs: []types.Text(nil)}}, Index: 0x16, Docs: []types.Text{"See [`Pallet::set_commission_claim_permission`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10f}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "BondExtra"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "FreeBalance", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Rewards", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x110}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x111}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x112}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x113}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "ConfigOp"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Noop", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Set", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Remove", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x114}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "ClaimPermission"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Permissioned", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PermissionlessCompound", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PermissionlessWithdraw", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PermissionlessAll", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x115}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "add_registrar", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::add_registrar`]."}}, types.Si1Variant{Name: "set_identity", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "info", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x116}}}, HasTypeName: true, TypeName: "Box<T::IdentityInformation>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::set_identity`]."}}, types.Si1Variant{Name: "set_subs", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "subs", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x138}}}, HasTypeName: true, TypeName: "Vec<(T::AccountId, Data)>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::set_subs`]."}}, types.Si1Variant{Name: "clear_identity", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"See [`Pallet::clear_identity`]."}}, types.Si1Variant{Name: "request_judgement", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "reg_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max_fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::request_judgement`]."}}, types.Si1Variant{Name: "cancel_request", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "reg_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::cancel_request`]."}}, types.Si1Variant{Name: "set_fee", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::set_fee`]."}}, types.Si1Variant{Name: "set_account_id", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "new", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::set_account_id`]."}}, types.Si1Variant{Name: "set_fields", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "fields", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "<T::IdentityInformation as IdentityInformationProvider>::\nFieldsIdentifier", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"See [`Pallet::set_fields`]."}}, types.Si1Variant{Name: "provide_judgement", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "reg_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "RegistrarIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "target", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "judgement", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13a}}}, HasTypeName: true, TypeName: "Judgement<BalanceOf<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "identity", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "T::Hash", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"See [`Pallet::provide_judgement`]."}}, types.Si1Variant{Name: "kill_identity", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "target", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"See [`Pallet::kill_identity`]."}}, types.Si1Variant{Name: "add_sub", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sub", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "data", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text{"See [`Pallet::add_sub`]."}}, types.Si1Variant{Name: "rename_sub", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sub", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "data", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text{"See [`Pallet::rename_sub`]."}}, types.Si1Variant{Name: "remove_sub", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "sub", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text{"See [`Pallet::remove_sub`]."}}, types.Si1Variant{Name: "quit_sub", Fields: []types.Si1Field(nil), Index: 0xe, Docs: []types.Text{"See [`Pallet::quit_sub`]."}}, types.Si1Variant{Name: "add_username_authority", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "suffix", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "allocation", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text{"See [`Pallet::add_username_authority`]."}}, types.Si1Variant{Name: "remove_username_authority", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text{"See [`Pallet::remove_username_authority`]."}}, types.Si1Variant{Name: "set_username_for", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<u8>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "signature", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13b}}}, HasTypeName: true, TypeName: "Option<T::OffchainSignature>", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text{"See [`Pallet::set_username_for`]."}}, types.Si1Variant{Name: "accept_username", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text{"See [`Pallet::accept_username`]."}}, types.Si1Variant{Name: "remove_expired_approval", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text{"See [`Pallet::remove_expired_approval`]."}}, types.Si1Variant{Name: "set_primary_username", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text{"See [`Pallet::set_primary_username`]."}}, types.Si1Variant{Name: "remove_dangling_username", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "username", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: true, TypeName: "Username<T>", Docs: []types.Text(nil)}}, Index: 0x15, Docs: []types.Text{"See [`Pallet::remove_dangling_username`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Identity pallet declaration."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x116}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "legacy", "IdentityInfo"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "FieldLimit", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "additional", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x117}}}, HasTypeName: true, TypeName: "BoundedVec<(Data, Data), FieldLimit>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "display", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "legal", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "web", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "riot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "email", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "pgp_fingerprint", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x137}}}, HasTypeName: true, TypeName: "Option<[u8; 20]>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "image", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "twitter", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, HasTypeName: true, TypeName: "Data", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x117}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x118}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x136}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x118}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "types", "Data"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw0", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11a}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw1", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11b}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw2", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11c}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw3", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11d}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw4", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw5", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11e}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw6", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11f}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw7", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x120}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw8", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8c}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw9", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x121}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw10", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x122}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw11", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x123}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw12", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x124}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw13", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x125}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw14", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x126}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw15", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x127}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw16", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x50}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw17", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x128}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw18", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x129}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw19", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12a}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw20", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa5}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x15, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw21", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12b}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x16, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw22", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12c}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x17, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw23", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12d}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x18, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw24", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12e}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x19, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw25", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12f}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw26", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x130}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw27", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x131}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw28", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x132}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw29", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x133}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw30", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x134}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw31", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x135}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x20, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Raw32", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x21, Docs: []types.Text(nil)}, types.Si1Variant{Name: "BlakeTwo256", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x22, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Sha256", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x23, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Keccak256", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x24, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ShaThree256", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x25, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x1, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11c}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x2, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11d}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x3, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11e}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x5, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x11f}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x6, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x120}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x7, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x121}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x9, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x122}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xa, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x123}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xb, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x124}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xc, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x125}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xd, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x126}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xe, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x127}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0xf, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x128}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x11, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x129}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x12, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x13, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x15, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12c}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x16, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12d}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x17, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12e}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x18, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12f}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x19, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x130}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x1a, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x131}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x1b, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x132}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x1c, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x133}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x1d, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x134}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x1e, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x135}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x1f, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x136}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x118}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x137}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa5}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa5}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x138}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x139}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x139}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x119}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13a}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "types", "Judgement"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Unknown", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "FeePaid", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Reasonable", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "KnownGood", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "OutOfDate", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "LowQuality", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Erroneous", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13b}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13c}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13c}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13c}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "MultiSignature"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Ed25519", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf8}}}, HasTypeName: true, TypeName: "ed25519::Signature", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Sr25519", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x103}}}, HasTypeName: true, TypeName: "sr25519::Signature", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Ecdsa", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13d}}}, HasTypeName: true, TypeName: "ecdsa::Signature", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13d}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "ecdsa", "Signature"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13e}}}, HasTypeName: true, TypeName: "[u8; SIGNATURE_SERIALIZED_SIZE]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13e}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: true, Array: types.Si1TypeDefArray{Len: 0x41, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13f}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_mandate", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "mandate", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::mandate`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x140}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_vector", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "fulfill_call", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "function_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "input", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x75}}}, HasTypeName: true, TypeName: "FunctionInput", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "output", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x141}}}, HasTypeName: true, TypeName: "FunctionOutput", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x142}}}, HasTypeName: true, TypeName: "FunctionProof", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::fulfill_call`]."}}, types.Si1Variant{Name: "execute", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "slot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "message", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x143}}}, HasTypeName: true, TypeName: "Message", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "account_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x145}}}, HasTypeName: true, TypeName: "ValidProof", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "storage_proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x145}}}, HasTypeName: true, TypeName: "ValidProof", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::execute`]."}}, types.Si1Variant{Name: "source_chain_froze", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "source_chain_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "frozen", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::source_chain_froze`]."}}, types.Si1Variant{Name: "send_message", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "message_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6b}}}, HasTypeName: true, TypeName: "MessageType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "domain", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x148}}}, HasTypeName: true, TypeName: "Option<u128>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "asset_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x149}}}, HasTypeName: true, TypeName: "Option<H256>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "data", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14a}}}, HasTypeName: true, TypeName: "Option<BoundedData>", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text{"See [`Pallet::send_message`]."}}, types.Si1Variant{Name: "set_poseidon_hash", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "period", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "poseidon_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14b}}}, HasTypeName: true, TypeName: "BoundedVec<u8, ConstU32<200>>", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::set_poseidon_hash`]."}}, types.Si1Variant{Name: "set_broadcaster", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "broadcaster_domain", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "broadcaster", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::set_broadcaster`]."}}, types.Si1Variant{Name: "set_whitelisted_domains", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14c}}}, HasTypeName: true, TypeName: "BoundedVec<u32, ConstU32<10_000>>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::set_whitelisted_domains`]."}}, types.Si1Variant{Name: "set_configuration", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14d}}}, HasTypeName: true, TypeName: "Configuration", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::set_configuration`]."}}, types.Si1Variant{Name: "set_function_ids", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6d}}}, HasTypeName: true, TypeName: "Option<(H256, H256)>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"See [`Pallet::set_function_ids`]."}}, types.Si1Variant{Name: "set_step_verification_key", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6f}}}, HasTypeName: true, TypeName: "Option<BoundedVec<u8, ConstU32<10_000>>>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"See [`Pallet::set_step_verification_key`]."}}, types.Si1Variant{Name: "set_rotate_verification_key", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6f}}}, HasTypeName: true, TypeName: "Option<BoundedVec<u8, ConstU32<10_000>>>", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text{"See [`Pallet::set_rotate_verification_key`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x141}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x142}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x143}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "data_proof_v2", "Message"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "message_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6b}}}, HasTypeName: true, TypeName: "MessageType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "to", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H256", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "origin_domain", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "destination_domain", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "data", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x144}}}, HasTypeName: true, TypeName: "BoundedData", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x144}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x145}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x146}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x147}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x146}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x147}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x146}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x148}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x149}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14a}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x144}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x144}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14b}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14c}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14d}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_vector", "state", "Configuration"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "slots_per_period", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "u64", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "finality_threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14e}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_proxy", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "proxy", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "real", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "force_proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14f}}}, HasTypeName: true, TypeName: "Option<T::ProxyType>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::proxy`]."}}, types.Si1Variant{Name: "add_proxy", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delegate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "T::ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::add_proxy`]."}}, types.Si1Variant{Name: "remove_proxy", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delegate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "T::ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text{"See [`Pallet::remove_proxy`]."}}, types.Si1Variant{Name: "remove_proxies", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"See [`Pallet::remove_proxies`]."}}, types.Si1Variant{Name: "create_pure", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "T::ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text{"See [`Pallet::create_pure`]."}}, types.Si1Variant{Name: "kill_pure", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "spawner", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "T::ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, HasTypeName: true, TypeName: "u16", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "height", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "BlockNumberFor<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "ext_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text{"See [`Pallet::kill_pure`]."}}, types.Si1Variant{Name: "announce", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "real", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "CallHashOf<T>", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text{"See [`Pallet::announce`]."}}, types.Si1Variant{Name: "remove_announcement", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "real", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "CallHashOf<T>", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text{"See [`Pallet::remove_announcement`]."}}, types.Si1Variant{Name: "reject_announcement", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delegate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "CallHashOf<T>", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text{"See [`Pallet::reject_announcement`]."}}, types.Si1Variant{Name: "proxy_announced", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delegate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "real", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}, HasTypeName: true, TypeName: "AccountIdLookupOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "force_proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14f}}}, HasTypeName: true, TypeName: "Option<T::ProxyType>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}, HasTypeName: true, TypeName: "Box<<T as Config>::RuntimeCall>", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text{"See [`Pallet::proxy_announced`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14f}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x150}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_tx_pause", "pallet", "Call"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "pause", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "full_name", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x74}}}, HasTypeName: true, TypeName: "RuntimeCallNameOf<T>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"See [`Pallet::pause`]."}}, types.Si1Variant{Name: "unpause", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "ident", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x74}}}, HasTypeName: true, TypeName: "RuntimeCallNameOf<T>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text{"See [`Pallet::unpause`]."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Contains a variant per dispatchable extrinsic that this pallet has."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x151}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "OriginCaller"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "system", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x152}}}, HasTypeName: true, TypeName: "frame_system::Origin<Runtime>", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TechnicalCommittee", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x153}}}, HasTypeName: true, TypeName: "pallet_collective::Origin<Runtime, pallet_collective::Instance2>", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Void", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x154}}}, HasTypeName: true, TypeName: "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x152}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "dispatch", "RawOrigin"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Root", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Signed", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x153}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_collective", "RawOrigin"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Members", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Member", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "_Phantom", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x154}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "Void"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x155}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_utility", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "TooManyCalls", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Too many calls batched."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x156}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "weak_bounded_vec", "WeakBoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x157}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x158}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x157}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9c}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x158}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x157}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x159}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15a}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15b}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15c}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15c}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15c}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "digests", "PreDigest"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Primary", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15d}}}, HasTypeName: true, TypeName: "PrimaryPreDigest", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "SecondaryPlain", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15f}}}, HasTypeName: true, TypeName: "SecondaryPlainPreDigest", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "SecondaryVRF", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x160}}}, HasTypeName: true, TypeName: "SecondaryVRFPreDigest", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15d}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "digests", "PrimaryPreDigest"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "super::AuthorityIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9d}}}, HasTypeName: true, TypeName: "Slot", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "vrf_signature", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15e}}}, HasTypeName: true, TypeName: "VrfSignature", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15e}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "sr25519", "vrf", "VrfSignature"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pre_output", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, HasTypeName: true, TypeName: "VrfPreOutput", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proof", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf9}}}, HasTypeName: true, TypeName: "VrfProof", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15f}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "digests", "SecondaryPlainPreDigest"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "super::AuthorityIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9d}}}, HasTypeName: true, TypeName: "Slot", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x160}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "digests", "SecondaryVRFPreDigest"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "authority_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "super::AuthorityIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "slot", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9d}}}, HasTypeName: true, TypeName: "Slot", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "vrf_signature", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15e}}}, HasTypeName: true, TypeName: "VrfSignature", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x161}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_consensus_babe", "BabeEpochConfiguration"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "c", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa0}}}, HasTypeName: true, TypeName: "(u64, u64)", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "allowed_slots", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa1}}}, HasTypeName: true, TypeName: "AllowedSlots", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x162}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x163}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x164}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x163}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x164}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x163}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x165}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_babe", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "InvalidEquivocationProof", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"An equivocation proof provided as part of an equivocation report is invalid."}}, types.Si1Variant{Name: "InvalidKeyOwnershipProof", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"A key ownership proof provided as part of an equivocation report is invalid."}}, types.Si1Variant{Name: "DuplicateOffenceReport", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"A given equivocation report is valid but already previously reported."}}, types.Si1Variant{Name: "InvalidConfiguration", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Submitted configuration is invalid."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x166}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x167}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_indices", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NotAssigned", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"The index was not already assigned."}}, types.Si1Variant{Name: "NotOwner", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"The index is assigned to another account."}}, types.Si1Variant{Name: "InUse", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"The index was not available."}}, types.Si1Variant{Name: "NotTransfer", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The source and destination accounts are identical."}}, types.Si1Variant{Name: "Permanent", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"The index is permanent and may not be freed/changed."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x168}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "weak_bounded_vec", "WeakBoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x169}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16b}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x169}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "BalanceLock"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8c}}}, HasTypeName: true, TypeName: "LockIdentifier", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "reasons", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16a}}}, HasTypeName: true, TypeName: "Reasons", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16a}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "Reasons"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Fee", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Misc", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "All", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x169}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16c}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16d}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16e}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16d}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "ReserveData"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "ReserveIdentifier", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8c}}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8c}}}, HasTypeName: true, TypeName: "ReserveIdentifier", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16e}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16d}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16f}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x170}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x173}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x170}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "IdAmount"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Id", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x171}}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x171}}}, HasTypeName: true, TypeName: "Id", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x171}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "RuntimeHoldReason"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Preimage", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x172}}}, HasTypeName: true, TypeName: "pallet_preimage::HoldReason", Docs: []types.Text(nil)}}, Index: 0x21, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x172}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_preimage", "pallet", "HoldReason"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Preimage", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x173}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x170}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x174}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x175}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x178}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x175}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "types", "IdAmount"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Id", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x176}}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x176}}}, HasTypeName: true, TypeName: "Id", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x176}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "RuntimeFreezeReason"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NominationPools", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x177}}}, HasTypeName: true, TypeName: "pallet_nomination_pools::FreezeReason", Docs: []types.Text(nil)}}, Index: 0x24, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x177}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "pallet", "FreezeReason"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "PoolMinBalance", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x178}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x175}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x179}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_balances", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "VestingBalance", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Vesting balance too high to send value."}}, types.Si1Variant{Name: "LiquidityRestrictions", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Account liquidity restrictions prevent withdrawal."}}, types.Si1Variant{Name: "InsufficientBalance", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Balance too low to send value."}}, types.Si1Variant{Name: "ExistentialDeposit", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Value too low to create account due to existential deposit."}}, types.Si1Variant{Name: "Expendability", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Transfer/payment would kill account."}}, types.Si1Variant{Name: "ExistingVestingSchedule", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"A vesting schedule already exists for this account."}}, types.Si1Variant{Name: "DeadAccount", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"Beneficiary account must pre-exist."}}, types.Si1Variant{Name: "TooManyReserves", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"Number of named reserves exceed `MaxReserves`."}}, types.Si1Variant{Name: "TooManyHolds", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."}}, types.Si1Variant{Name: "TooManyFreezes", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"Number of freezes exceed `MaxFreezes`."}}, types.Si1Variant{Name: "IssuanceDeactivated", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"The issuance cannot be modified since it is already deactivated."}}, types.Si1Variant{Name: "DeltaZero", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text{"The delta cannot be zero."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17a}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_arithmetic", "fixed_point", "FixedU128"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "u128", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17b}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_transaction_payment", "Releases"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "V1Ancient", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "V2", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17c}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "ReadySolution"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "MaxWinners", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "supports", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17d}}}, HasTypeName: true, TypeName: "BoundedSupports<AccountId, MaxWinners>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "score", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}, HasTypeName: true, TypeName: "ElectionScore", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "compute", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x31}}}, HasTypeName: true, TypeName: "ElectionCompute", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17d}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe0}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdf}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17e}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "RoundSnapshot"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "DataProvider", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17f}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "voters", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x181}}}, HasTypeName: true, TypeName: "Vec<DataProvider>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "targets", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<AccountId>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17f}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x180}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x180}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x181}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17f}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x182}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x183}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x184}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x183}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x184}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x183}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x185}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "signed", "SignedSubmission"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "Solution", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xab}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "raw_solution", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xaa}}}, HasTypeName: true, TypeName: "RawSolution<Solution>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x186}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_election_provider_multi_phase", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "PreDispatchEarlySubmission", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Submission was too early."}}, types.Si1Variant{Name: "PreDispatchWrongWinnerCount", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Wrong number of winners presented."}}, types.Si1Variant{Name: "PreDispatchWeakSubmission", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Submission was too weak, score-wise."}}, types.Si1Variant{Name: "SignedQueueFull", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The queue was full, and the solution was not better than any of the existing ones."}}, types.Si1Variant{Name: "SignedCannotPayDeposit", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"The origin failed to pay the deposit."}}, types.Si1Variant{Name: "SignedInvalidWitness", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"Witness data to dispatchable is invalid."}}, types.Si1Variant{Name: "SignedTooMuchWeight", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"The signed submission consumes too much weight"}}, types.Si1Variant{Name: "OcwCallWrongEra", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"OCW submitted solution for wrong round"}}, types.Si1Variant{Name: "MissingSnapshotMetadata", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"Snapshot metadata should exist but didn't."}}, types.Si1Variant{Name: "InvalidSubmissionIndex", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"`Self::insert_submission` returned an invalid index."}}, types.Si1Variant{Name: "CallNotAllowed", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"The call is not allowed at this point."}}, types.Si1Variant{Name: "FallbackFailed", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text{"The fallback failed"}}, types.Si1Variant{Name: "BoundNotMet", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text{"Some bound not met"}}, types.Si1Variant{Name: "TooManyWinners", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text{"Submitted solution has too many winners"}}, types.Si1Variant{Name: "PreDispatchDifferentRound", Fields: []types.Si1Field(nil), Index: 0xe, Docs: []types.Text{"Sumission was prepared for a different round."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Error of the pallet that can be returned in response to dispatches."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x187}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "StakingLedger"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "stash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "total", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "active", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "unlocking", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x188}}}, HasTypeName: true, TypeName: "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "legacy_claimed_rewards", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18b}}}, HasTypeName: true, TypeName: "BoundedVec<EraIndex, T::HistoryDepth>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x188}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x189}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18a}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x189}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "UnlockChunk"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18a}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x189}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18b}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18c}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "Nominations"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "targets", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x180}}}, HasTypeName: true, TypeName: "BoundedVec<T::AccountId, MaxNominationsOf<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "submitted_in", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "suppressed", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18d}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "ActiveEraInfo"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "start", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18e}}}, HasTypeName: true, TypeName: "Option<u64>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18e}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x190}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_staking", "PagedExposureMetadata"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "total", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "own", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "nominator_count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "page_count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "Page", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x191}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x192}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_staking", "ExposurePage"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "page_total", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "others", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4d}}}, HasTypeName: true, TypeName: "Vec<IndividualExposure<AccountId, Balance>>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x193}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "EraRewardPoints"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "total", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "RewardPoint", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "individual", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x194}}}, HasTypeName: true, TypeName: "BTreeMap<AccountId, RewardPoint>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x194}}}, Type: types.Si1Type{Path: types.Si1Path{"BTreeMap"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "K", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x195}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x195}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x196}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x196}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x197}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x198}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x198}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "UnappliedSlash"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "validator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "own", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "others", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe2}}}, HasTypeName: true, TypeName: "Vec<(AccountId, Balance)>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "reporters", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "payout", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x199}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19a}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "slashing", "SlashingSpans"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "span_index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "SpanIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "last_start", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "last_nonzero_slash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "EraIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "prior", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, HasTypeName: true, TypeName: "Vec<EraIndex>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19b}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "slashing", "SpanRecord"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "slashed", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "paid_out", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19c}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19d}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19d}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19e}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_staking", "pallet", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NotController", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Not a controller account."}}, types.Si1Variant{Name: "NotStash", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Not a stash account."}}, types.Si1Variant{Name: "AlreadyBonded", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Stash is already bonded."}}, types.Si1Variant{Name: "AlreadyPaired", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Controller is already paired."}}, types.Si1Variant{Name: "EmptyTargets", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Targets cannot be empty."}}, types.Si1Variant{Name: "DuplicateIndex", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"Duplicate index."}}, types.Si1Variant{Name: "InvalidSlashIndex", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"Slash record index out of bounds."}}, types.Si1Variant{Name: "InsufficientBond", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"Cannot have a validator or nominator role, with value less than the minimum defined by", "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the", "intention, `chill` first to remove one's role as validator/nominator."}}, types.Si1Variant{Name: "NoMoreChunks", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"Can not schedule more unlock chunks."}}, types.Si1Variant{Name: "NoUnlockChunk", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"Can not rebond without unlocking chunks."}}, types.Si1Variant{Name: "FundedTarget", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"Attempting to target a stash that still has funds."}}, types.Si1Variant{Name: "InvalidEraToReward", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text{"Invalid era to reward."}}, types.Si1Variant{Name: "InvalidNumberOfNominations", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text{"Invalid number of nominations."}}, types.Si1Variant{Name: "NotSortedAndUnique", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text{"Items are not sorted and unique."}}, types.Si1Variant{Name: "AlreadyClaimed", Fields: []types.Si1Field(nil), Index: 0xe, Docs: []types.Text{"Rewards for this era have already been claimed for this validator."}}, types.Si1Variant{Name: "InvalidPage", Fields: []types.Si1Field(nil), Index: 0xf, Docs: []types.Text{"No nominators exist on this page."}}, types.Si1Variant{Name: "IncorrectHistoryDepth", Fields: []types.Si1Field(nil), Index: 0x10, Docs: []types.Text{"Incorrect previous history depth input provided."}}, types.Si1Variant{Name: "IncorrectSlashingSpans", Fields: []types.Si1Field(nil), Index: 0x11, Docs: []types.Text{"Incorrect number of slashing spans provided."}}, types.Si1Variant{Name: "BadState", Fields: []types.Si1Field(nil), Index: 0x12, Docs: []types.Text{"Internal state has become somehow corrupted and the operation cannot continue."}}, types.Si1Variant{Name: "TooManyTargets", Fields: []types.Si1Field(nil), Index: 0x13, Docs: []types.Text{"Too many nomination targets supplied."}}, types.Si1Variant{Name: "BadTarget", Fields: []types.Si1Field(nil), Index: 0x14, Docs: []types.Text{"A nomination target was supplied that was blocked or otherwise not a validator."}}, types.Si1Variant{Name: "CannotChillOther", Fields: []types.Si1Field(nil), Index: 0x15, Docs: []types.Text{"The user has enough bond and thus cannot be chilled forcefully by an external person."}}, types.Si1Variant{Name: "TooManyNominators", Fields: []types.Si1Field(nil), Index: 0x16, Docs: []types.Text{"There are too many nominators in the system. Governance needs to adjust the staking", "settings to keep things safe for the runtime."}}, types.Si1Variant{Name: "TooManyValidators", Fields: []types.Si1Field(nil), Index: 0x17, Docs: []types.Text{"There are too many validator candidates in the system. Governance needs to adjust the", "staking settings to keep things safe for the runtime."}}, types.Si1Variant{Name: "CommissionTooLow", Fields: []types.Si1Field(nil), Index: 0x18, Docs: []types.Text{"Commission is too low. Must be at least `MinCommission`."}}, types.Si1Variant{Name: "BoundNotMet", Fields: []types.Si1Field(nil), Index: 0x19, Docs: []types.Text{"Some bound is not met."}}, types.Si1Variant{Name: "ControllerDeprecated", Fields: []types.Si1Field(nil), Index: 0x1a, Docs: []types.Text{"Used when attempting to use deprecated controller account logic."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19f}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a0}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xee}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a1}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a2}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a2}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_core", "crypto", "KeyTypeId"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b}}}, HasTypeName: true, TypeName: "[u8; 4]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a3}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_session", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "InvalidProof", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Invalid ownership proof."}}, types.Si1Variant{Name: "NoAssociatedValidatorId", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"No associated validator ID for account."}}, types.Si1Variant{Name: "DuplicatedKey", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Registered duplicate key."}}, types.Si1Variant{Name: "NoKeys", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"No keys are associated with this account."}}, types.Si1Variant{Name: "NoAccount", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Key setting account is not live, so it's impossible to associate keys."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Error for the session pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a4}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x77}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a5}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_collective", "Votes"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "index", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "ProposalIndex", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "threshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "MemberCount", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "ayes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "nays", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "end", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a6}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_collective", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NotMember", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Account is not a member"}}, types.Si1Variant{Name: "DuplicateProposal", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Duplicate proposals not allowed"}}, types.Si1Variant{Name: "ProposalMissing", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Proposal must exist"}}, types.Si1Variant{Name: "WrongIndex", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Mismatched index"}}, types.Si1Variant{Name: "DuplicateVote", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Duplicate vote ignored"}}, types.Si1Variant{Name: "AlreadyInitialized", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"Members are already initialized!"}}, types.Si1Variant{Name: "TooEarly", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"The close call was made too early, before the end of the voting."}}, types.Si1Variant{Name: "TooManyProposals", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"There can only be a maximum of `MaxProposals` active proposals."}}, types.Si1Variant{Name: "WrongProposalWeight", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"The given weight bound for the proposal was too low."}}, types.Si1Variant{Name: "WrongProposalLength", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"The given length bound for the proposal was too low."}}, types.Si1Variant{Name: "PrimeAccountNotMember", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"Prime account is not a member"}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a7}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a8}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_membership", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "AlreadyMember", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Already a member."}}, types.Si1Variant{Name: "NotMember", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Not a member."}}, types.Si1Variant{Name: "TooManyMembers", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Too many members."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a9}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_grandpa", "StoredState"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "N", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Live", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PendingPause", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "scheduled_at", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Paused", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PendingResume", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "scheduled_at", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1aa}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_grandpa", "StoredPendingChange"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "N", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "Limit", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "scheduled_at", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "N", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "next_authorities", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ab}}}, HasTypeName: true, TypeName: "BoundedAuthorityList<Limit>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "forced", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<N>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ab}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "weak_bounded_vec", "WeakBoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x41}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x40}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ac}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_grandpa", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "PauseFailed", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Attempt to signal GRANDPA pause when the authority set isn't live", "(either paused or already pending pause)."}}, types.Si1Variant{Name: "ResumeFailed", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Attempt to signal GRANDPA resume when the authority set isn't paused", "(either live or already pending resume)."}}, types.Si1Variant{Name: "ChangePending", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Attempt to signal GRANDPA change with one already pending."}}, types.Si1Variant{Name: "TooSoon", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Cannot signal forced change so soon after last."}}, types.Si1Variant{Name: "InvalidKeyOwnershipProof", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"A key ownership proof provided as part of an equivocation report is invalid."}}, types.Si1Variant{Name: "InvalidEquivocationProof", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"An equivocation proof provided as part of an equivocation report is invalid."}}, types.Si1Variant{Name: "DuplicateOffenceReport", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"A given equivocation report is valid but already previously reported."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ad}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_treasury", "Proposal"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposer", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ae}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1af}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_treasury", "SpendStatus"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AssetKind", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}, types.Si1TypeParameter{Name: "AssetBalance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "Beneficiary", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "PaymentId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "asset_kind", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, HasTypeName: true, TypeName: "AssetKind", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "amount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "AssetBalance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "Beneficiary", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "valid_from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "expire_at", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "status", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b0}}}, HasTypeName: true, TypeName: "PaymentState<PaymentId>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b0}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_treasury", "PaymentState"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Id", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Pending", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Attempted", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}, HasTypeName: true, TypeName: "Id", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Failed", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b1}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_arithmetic", "per_things", "Permill"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b2}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "PalletId"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8c}}}, HasTypeName: true, TypeName: "[u8; 8]", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b3}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_treasury", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "InsufficientProposersBalance", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Proposer's balance is too low."}}, types.Si1Variant{Name: "InvalidIndex", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"No proposal, bounty or spend at that index."}}, types.Si1Variant{Name: "TooManyApprovals", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Too many approvals in the queue."}}, types.Si1Variant{Name: "InsufficientPermission", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The spend origin is valid but the amount it is allowed to spend is lower than the", "amount to be spent."}}, types.Si1Variant{Name: "ProposalNotApproved", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Proposal has not been approved."}}, types.Si1Variant{Name: "FailedToConvertBalance", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"The balance of the asset kind is not convertible to the balance of the native asset."}}, types.Si1Variant{Name: "SpendExpired", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"The spend has expired and cannot be claimed."}}, types.Si1Variant{Name: "EarlyPayout", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"The spend is not yet eligible for payout."}}, types.Si1Variant{Name: "AlreadyAttempted", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"The payment has already been attempted."}}, types.Si1Variant{Name: "PayoutError", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"There was some issue with the mechanism of payment."}}, types.Si1Variant{Name: "NotAttempted", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"The payout was not yet attempted/claimed."}}, types.Si1Variant{Name: "Inconclusive", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text{"The payment has neither failed nor succeeded yet."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Error for the treasury pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b4}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_sudo", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "RequireSudo", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Sender must be the Sudo account."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Error for the Sudo pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b5}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "weak_bounded_vec", "WeakBoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x47}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b6}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b6}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x47}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b7}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_im_online", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "InvalidKey", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Non existent public key."}}, types.Si1Variant{Name: "DuplicatedHeartbeat", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Duplicated heartbeat."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b8}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "weak_bounded_vec", "WeakBoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xef}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b9}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b9}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xef}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ba}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_staking", "offence", "OffenceDetails"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Reporter", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Offender", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4a}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "offender", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4a}}}, HasTypeName: true, TypeName: "Offender", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "reporters", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<Reporter>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bb}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x50}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bc}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bd}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1be}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c2}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1be}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bf}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bf}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bf}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_scheduler", "Scheduled"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Name", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}}, types.Si1TypeParameter{Name: "Call", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c0}}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "PalletsOrigin", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x151}}}}, types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "maybe_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x53}}}, HasTypeName: true, TypeName: "Option<Name>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "priority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: true, TypeName: "schedule::Priority", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c0}}}, HasTypeName: true, TypeName: "Call", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_periodic", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x105}}}, HasTypeName: true, TypeName: "Option<schedule::Period<BlockNumber>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "origin", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x151}}}, HasTypeName: true, TypeName: "PalletsOrigin", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c0}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "traits", "preimages", "Bounded"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}}, types.Si1TypeParameter{Name: "H", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x94}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Legacy", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H::Output", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Inline", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c1}}}, HasTypeName: true, TypeName: "BoundedInline", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Lookup", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "H::Output", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "len", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c1}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c2}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1be}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c3}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_scheduler", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "FailedToSchedule", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Failed to schedule a call"}}, types.Si1Variant{Name: "NotFound", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Cannot find the scheduled call."}}, types.Si1Variant{Name: "TargetBlockNumberInPast", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Given target block number is in the past."}}, types.Si1Variant{Name: "RescheduleNoChange", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Reschedule failed because it does not change scheduled time."}}, types.Si1Variant{Name: "Named", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Attempt to use a non-named function on a named task."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c4}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bounties", "Bounty"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "proposer", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "value", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "curator_deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "status", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c5}}}, HasTypeName: true, TypeName: "BountyStatus<AccountId, BlockNumber>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c5}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bounties", "BountyStatus"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Proposed", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Approved", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Funded", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CuratorProposed", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "curator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Active", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "curator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "update_due", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PendingPayout", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "curator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "beneficiary", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "unlock_at", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c6}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c7}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bounties", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "InsufficientProposersBalance", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Proposer's balance is too low."}}, types.Si1Variant{Name: "InvalidIndex", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"No proposal or bounty at that index."}}, types.Si1Variant{Name: "ReasonTooBig", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"The reason given is just too big."}}, types.Si1Variant{Name: "UnexpectedStatus", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The bounty status is unexpected."}}, types.Si1Variant{Name: "RequireCurator", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Require bounty curator."}}, types.Si1Variant{Name: "InvalidValue", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"Invalid bounty value."}}, types.Si1Variant{Name: "InvalidFee", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"Invalid bounty fee."}}, types.Si1Variant{Name: "PendingPayout", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"A bounty payout is pending.", "To cancel the bounty, you must unassign and slash the curator."}}, types.Si1Variant{Name: "Premature", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"The bounties cannot be claimed/closed because it's still in the countdown period."}}, types.Si1Variant{Name: "HasActiveChildBounty", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"The bounty cannot be closed because it has active child bounties."}}, types.Si1Variant{Name: "TooManyQueued", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"Too many approvals are already queued."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c8}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_tips", "OpenTip"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "Hash", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "reason", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "who", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "finder", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "closes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<BlockNumber>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "tips", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe2}}}, HasTypeName: true, TypeName: "Vec<(AccountId, Balance)>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "finders_fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, HasTypeName: true, TypeName: "bool", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c9}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_tips", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "ReasonTooBig", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"The reason given is just too big."}}, types.Si1Variant{Name: "AlreadyKnown", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"The tip was already found/started."}}, types.Si1Variant{Name: "UnknownTip", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"The tip hash is unknown."}}, types.Si1Variant{Name: "MaxTipAmountExceeded", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The tip given was too generous."}}, types.Si1Variant{Name: "NotFinder", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"The account attempting to retract the tip is not the finder of the tip."}}, types.Si1Variant{Name: "StillOpen", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"The tip cannot be claimed/closed because there are not enough tippers yet."}}, types.Si1Variant{Name: "Premature", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"The tip cannot be claimed/closed because it's still in the countdown period."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ca}}}, Type: types.Si1Type{Path: types.Si1Path{"da_control", "pallet", "AppKeyInfo"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Acc", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "owner", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "Acc", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}, HasTypeName: true, TypeName: "AppId", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cb}}}, Type: types.Si1Type{Path: types.Si1Path{"da_control", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "AppKeyAlreadyExists", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"The application key already exists."}}, types.Si1Variant{Name: "AppKeyCannotBeEmpty", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"The application key is an empty string."}}, types.Si1Variant{Name: "LastAppIdOverflowed", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"The last application ID overflowed."}}, types.Si1Variant{Name: "DataCannotBeEmpty", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The submitted data is empty."}}, types.Si1Variant{Name: "LastBlockLenProposalIdOverflowed", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"The last block length proposal Id overflowed."}}, types.Si1Variant{Name: "BlockDimensionsOutOfBounds", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"The proposed block dimensions are out of bounds."}}, types.Si1Variant{Name: "BlockDimensionsTooSmall", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"The proposed block dimensions are too small."}}, types.Si1Variant{Name: "InvalidBlockWeightReduction", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"The request to reduce block dimensions was made in a non-empty block"}}, types.Si1Variant{Name: "BadContext", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"Submit data call outside of block execution context."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"Error for the System pallet"}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cc}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_preimage", "OldRequestStatus"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Unrequested", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe3}}}, HasTypeName: true, TypeName: "(AccountId, Balance)", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "len", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Requested", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cd}}}, HasTypeName: true, TypeName: "Option<(AccountId, Balance)>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "len", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<u32>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cd}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe3}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe3}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ce}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_preimage", "RequestStatus"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Ticket", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cf}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Unrequested", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "ticket", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d0}}}, HasTypeName: true, TypeName: "(AccountId, Ticket)", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "len", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Requested", Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "maybe_ticket", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d1}}}, HasTypeName: true, TypeName: "Option<(AccountId, Ticket)>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "count", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "maybe_len", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<u32>", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cf}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_support", "traits", "tokens", "fungible", "HoldConsideration"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "A", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "F", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "R", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "D", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "F::Balance", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cf}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d1}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d0}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d0}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d2}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d3}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_preimage", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "TooBig", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Preimage is too large to store on-chain."}}, types.Si1Variant{Name: "AlreadyNoted", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Preimage has already been noted on-chain."}}, types.Si1Variant{Name: "NotAuthorized", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"The user is not authorized to perform this action."}}, types.Si1Variant{Name: "NotNoted", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"The preimage cannot be removed since it has not yet been noted."}}, types.Si1Variant{Name: "Requested", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"A preimage may not be removed when there are outstanding requests."}}, types.Si1Variant{Name: "NotRequested", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"The preimage request cannot be removed since no outstanding requests exist."}}, types.Si1Variant{Name: "TooMany", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."}}, types.Si1Variant{Name: "TooFew", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"Too few hashes were requested to be upgraded (i.e. zero)."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d4}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d5}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_multisig", "Multisig"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "MaxApprovals", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "when", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5c}}}, HasTypeName: true, TypeName: "Timepoint<BlockNumber>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "depositor", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "approvals", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a7}}}, HasTypeName: true, TypeName: "BoundedVec<AccountId, MaxApprovals>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d6}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_multisig", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "MinimumThreshold", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Threshold must be 2 or greater."}}, types.Si1Variant{Name: "AlreadyApproved", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Call is already approved by this signatory."}}, types.Si1Variant{Name: "NoApprovalsNeeded", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Call doesn't need any (more) approvals."}}, types.Si1Variant{Name: "TooFewSignatories", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"There are too few signatories in the list."}}, types.Si1Variant{Name: "TooManySignatories", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"There are too many signatories in the list."}}, types.Si1Variant{Name: "SignatoriesOutOfOrder", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"The signatories were provided out of order; they should be ordered."}}, types.Si1Variant{Name: "SenderInSignatories", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"The sender was contained in the other signatories; it shouldn't be."}}, types.Si1Variant{Name: "NotFound", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"Multisig operation not found when attempting to cancel."}}, types.Si1Variant{Name: "NotOwner", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"Only the account that originally created the multisig is able to cancel it."}}, types.Si1Variant{Name: "NoTimepoint", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"No timepoint was given, yet the multisig operation is already underway."}}, types.Si1Variant{Name: "WrongTimepoint", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"A different timepoint was given to the multisig operation that is underway."}}, types.Si1Variant{Name: "UnexpectedTimepoint", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text{"A timepoint was given, yet no multisig operation is underway."}}, types.Si1Variant{Name: "MaxWeightTooLow", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text{"The maximum weight information provided was too low."}}, types.Si1Variant{Name: "AlreadyStored", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text{"The data to be stored is already stored."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d7}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bags_list", "list", "Node"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "T::AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "prev", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "next", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bag_upper", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "T::Score", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "score", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "T::Score", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d8}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bags_list", "list", "Bag"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "head", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "tail", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<T::AccountId>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d9}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1da}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bags_list", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "I", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "List", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1db}}}, HasTypeName: true, TypeName: "ListError", Docs: []types.Text(nil)}}, Index: 0x0, Docs: []types.Text{"A error in the list interface implementation."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1db}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_bags_list", "list", "ListError"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Duplicate", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NotHeavier", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NotInSameBag", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NodeNotFound", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1dc}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "PoolMember"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "pool_id", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "PoolId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "points", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "last_recorded_reward_counter", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17a}}}, HasTypeName: true, TypeName: "T::RewardCounter", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "unbonding_eras", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1dd}}}, HasTypeName: true, TypeName: "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1dd}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_btree_map", "BoundedBTreeMap"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "K", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1de}}}, HasTypeName: true, TypeName: "BTreeMap<K, V>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1de}}}, Type: types.Si1Type{Path: types.Si1Path{"BTreeMap"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "K", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1df}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1df}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e0}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e0}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e1}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "BondedPoolInner"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "commission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e2}}}, HasTypeName: true, TypeName: "Commission<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "member_counter", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "u32", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "points", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "roles", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e5}}}, HasTypeName: true, TypeName: "PoolRoles<T::AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "state", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5f}}}, HasTypeName: true, TypeName: "PoolState", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e2}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "Commission"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "current", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x60}}}, HasTypeName: true, TypeName: "Option<(Perbill, T::AccountId)>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "max", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e3}}}, HasTypeName: true, TypeName: "Option<Perbill>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "change_rate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e4}}}, HasTypeName: true, TypeName: "Option<CommissionChangeRate<BlockNumberFor<T>>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "throttle_from", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe4}}}, HasTypeName: true, TypeName: "Option<BlockNumberFor<T>>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "claim_permission", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x63}}}, HasTypeName: true, TypeName: "Option<CommissionClaimPermission<T::AccountId>>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e3}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e4}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x62}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x62}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e5}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "PoolRoles"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "depositor", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "root", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "nominator", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<AccountId>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "bouncer", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x32}}}, HasTypeName: true, TypeName: "Option<AccountId>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e6}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "RewardPool"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "last_recorded_reward_counter", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17a}}}, HasTypeName: true, TypeName: "T::RewardCounter", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "last_recorded_total_payouts", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "total_rewards_claimed", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "total_commission_pending", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "total_commission_claimed", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e7}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "SubPools"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "no_era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e8}}}, HasTypeName: true, TypeName: "UnbondPool<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "with_era", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e9}}}, HasTypeName: true, TypeName: "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e8}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "UnbondPool"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "points", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "balance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e9}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_btree_map", "BoundedBTreeMap"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "K", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e8}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ea}}}, HasTypeName: true, TypeName: "BTreeMap<K, V>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ea}}}, Type: types.Si1Type{Path: types.Si1Path{"BTreeMap"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "K", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.Si1TypeParameter{Name: "V", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e8}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1eb}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1eb}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ec}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ec}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e8}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ed}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "PoolNotFound", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"A (bonded) pool id does not exist."}}, types.Si1Variant{Name: "PoolMemberNotFound", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"An account is not a member."}}, types.Si1Variant{Name: "RewardPoolNotFound", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"A reward pool does not exist. In all cases this is a system logic error."}}, types.Si1Variant{Name: "SubPoolsNotFound", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"A sub pool does not exist."}}, types.Si1Variant{Name: "AccountBelongsToOtherPool", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"An account is already delegating in another pool. An account may only belong to one", "pool at a time."}}, types.Si1Variant{Name: "FullyUnbonding", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"The member is fully unbonded (and thus cannot access the bonded and reward pool", "anymore to, for example, collect rewards)."}}, types.Si1Variant{Name: "MaxUnbondingLimit", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"The member cannot unbond further chunks due to reaching the limit."}}, types.Si1Variant{Name: "CannotWithdrawAny", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"None of the funds can be withdrawn yet because the bonding duration has not passed."}}, types.Si1Variant{Name: "MinimumBondNotMet", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"The amount does not meet the minimum bond to either join or create a pool.", "", "The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The", "caller does not have nominating permissions for the pool. Members can never unbond to a", "value below `MinJoinBond`."}}, types.Si1Variant{Name: "OverflowRisk", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"The transaction could not be executed due to overflow risk for the pool."}}, types.Si1Variant{Name: "NotDestroying", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for", "other members to be permissionlessly unbonded."}}, types.Si1Variant{Name: "NotNominator", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text{"The caller does not have nominating permissions for the pool."}}, types.Si1Variant{Name: "NotKickerOrDestroying", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text{"Either a) the caller cannot make a valid kick or b) the pool is not destroying."}}, types.Si1Variant{Name: "NotOpen", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text{"The pool is not open to join"}}, types.Si1Variant{Name: "MaxPools", Fields: []types.Si1Field(nil), Index: 0xe, Docs: []types.Text{"The system is maxed out on pools."}}, types.Si1Variant{Name: "MaxPoolMembers", Fields: []types.Si1Field(nil), Index: 0xf, Docs: []types.Text{"Too many members in the pool or system."}}, types.Si1Variant{Name: "CanNotChangeState", Fields: []types.Si1Field(nil), Index: 0x10, Docs: []types.Text{"The pools state cannot be changed."}}, types.Si1Variant{Name: "DoesNotHavePermission", Fields: []types.Si1Field(nil), Index: 0x11, Docs: []types.Text{"The caller does not have adequate permissions."}}, types.Si1Variant{Name: "MetadataExceedsMaxLen", Fields: []types.Si1Field(nil), Index: 0x12, Docs: []types.Text{"Metadata exceeds [`Config::MaxMetadataLen`]"}}, types.Si1Variant{Name: "Defensive", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ee}}}, HasTypeName: true, TypeName: "DefensiveError", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text{"Some error occurred that should never happen. This should be reported to the", "maintainers."}}, types.Si1Variant{Name: "PartialUnbondNotAllowedPermissionlessly", Fields: []types.Si1Field(nil), Index: 0x14, Docs: []types.Text{"Partial unbonding now allowed permissionlessly."}}, types.Si1Variant{Name: "MaxCommissionRestricted", Fields: []types.Si1Field(nil), Index: 0x15, Docs: []types.Text{"The pool's max commission cannot be set higher than the existing value."}}, types.Si1Variant{Name: "CommissionExceedsMaximum", Fields: []types.Si1Field(nil), Index: 0x16, Docs: []types.Text{"The supplied commission exceeds the max allowed commission."}}, types.Si1Variant{Name: "CommissionExceedsGlobalMaximum", Fields: []types.Si1Field(nil), Index: 0x17, Docs: []types.Text{"The supplied commission exceeds global maximum commission."}}, types.Si1Variant{Name: "CommissionChangeThrottled", Fields: []types.Si1Field(nil), Index: 0x18, Docs: []types.Text{"Not enough blocks have surpassed since the last commission update."}}, types.Si1Variant{Name: "CommissionChangeRateNotAllowed", Fields: []types.Si1Field(nil), Index: 0x19, Docs: []types.Text{"The submitted changes to commission change rate are not allowed."}}, types.Si1Variant{Name: "NoPendingCommission", Fields: []types.Si1Field(nil), Index: 0x1a, Docs: []types.Text{"There is no pending commission to claim."}}, types.Si1Variant{Name: "NoCommissionCurrentSet", Fields: []types.Si1Field(nil), Index: 0x1b, Docs: []types.Text{"No commission current has been set."}}, types.Si1Variant{Name: "PoolIdInUse", Fields: []types.Si1Field(nil), Index: 0x1c, Docs: []types.Text{"Pool id currently in use."}}, types.Si1Variant{Name: "InvalidPoolId", Fields: []types.Si1Field(nil), Index: 0x1d, Docs: []types.Text{"Pool id provided is not correct/usable."}}, types.Si1Variant{Name: "BondExtraRestricted", Fields: []types.Si1Field(nil), Index: 0x1e, Docs: []types.Text{"Bonding extra is restricted to the exact pending reward amount."}}, types.Si1Variant{Name: "NothingToAdjust", Fields: []types.Si1Field(nil), Index: 0x1f, Docs: []types.Text{"No imbalance in the ED deposit for the pool."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ee}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_nomination_pools", "pallet", "DefensiveError"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NotEnoughSpaceInUnbondPool", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "PoolNotFound", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "RewardPoolNotFound", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "SubPoolsNotFound", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "BondedStashKilledPrematurely", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ef}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f0}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f4}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f0}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "types", "Registration"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "MaxJudgements", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "IdentityInfo", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x116}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "judgements", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f1}}}, HasTypeName: true, TypeName: "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "info", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x116}}}, HasTypeName: true, TypeName: "IdentityInfo", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f1}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f3}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f2}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13a}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f3}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f2}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f4}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f5}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f6}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f6}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f7}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f8}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fa}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f8}}}, Type: types.Si1Type{Path: types.Si1Path{"Option"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f9}}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "None", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Some", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f9}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f9}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "types", "RegistrarInfo"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Balance", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "IdField", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "account", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "fee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, HasTypeName: true, TypeName: "Balance", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "fields", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, HasTypeName: true, TypeName: "IdField", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fa}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f8}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fb}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "types", "AuthorityProperties"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Suffix", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fc}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "suffix", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fc}}}, HasTypeName: true, TypeName: "Suffix", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "allocation", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "Allocation", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fc}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fd}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_identity", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "TooManySubAccounts", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"Too many subs-accounts."}}, types.Si1Variant{Name: "NotFound", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Account isn't found."}}, types.Si1Variant{Name: "NotNamed", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Account isn't named."}}, types.Si1Variant{Name: "EmptyIndex", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"Empty index."}}, types.Si1Variant{Name: "FeeChanged", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Fee is changed."}}, types.Si1Variant{Name: "NoIdentity", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"No identity found."}}, types.Si1Variant{Name: "StickyJudgement", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"Sticky judgement."}}, types.Si1Variant{Name: "JudgementGiven", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"Judgement given."}}, types.Si1Variant{Name: "InvalidJudgement", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text{"Invalid judgement."}}, types.Si1Variant{Name: "InvalidIndex", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text{"The index is invalid."}}, types.Si1Variant{Name: "InvalidTarget", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text{"The target is invalid."}}, types.Si1Variant{Name: "TooManyRegistrars", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text{"Maximum amount of registrars reached. Cannot add any more."}}, types.Si1Variant{Name: "AlreadyClaimed", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text{"Account ID is already named."}}, types.Si1Variant{Name: "NotSub", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text{"Sender is not a sub-account."}}, types.Si1Variant{Name: "NotOwned", Fields: []types.Si1Field(nil), Index: 0xe, Docs: []types.Text{"Sub-account isn't owned by sender."}}, types.Si1Variant{Name: "JudgementForDifferentIdentity", Fields: []types.Si1Field(nil), Index: 0xf, Docs: []types.Text{"The provided judgement was for a different identity."}}, types.Si1Variant{Name: "JudgementPaymentFailed", Fields: []types.Si1Field(nil), Index: 0x10, Docs: []types.Text{"Error that occurs when there is an issue paying for judgement."}}, types.Si1Variant{Name: "InvalidSuffix", Fields: []types.Si1Field(nil), Index: 0x11, Docs: []types.Text{"The provided suffix is too long."}}, types.Si1Variant{Name: "NotUsernameAuthority", Fields: []types.Si1Field(nil), Index: 0x12, Docs: []types.Text{"The sender does not have permission to issue a username."}}, types.Si1Variant{Name: "NoAllocation", Fields: []types.Si1Field(nil), Index: 0x13, Docs: []types.Text{"The authority cannot allocate any more usernames."}}, types.Si1Variant{Name: "InvalidSignature", Fields: []types.Si1Field(nil), Index: 0x14, Docs: []types.Text{"The signature on a username was not valid."}}, types.Si1Variant{Name: "RequiresSignature", Fields: []types.Si1Field(nil), Index: 0x15, Docs: []types.Text{"Setting this username requires a signature, but none was provided."}}, types.Si1Variant{Name: "InvalidUsername", Fields: []types.Si1Field(nil), Index: 0x16, Docs: []types.Text{"The username does not meet the requirements."}}, types.Si1Variant{Name: "UsernameTaken", Fields: []types.Si1Field(nil), Index: 0x17, Docs: []types.Text{"The username is already taken."}}, types.Si1Variant{Name: "NoUsername", Fields: []types.Si1Field(nil), Index: 0x18, Docs: []types.Text{"The requested username does not exist."}}, types.Si1Variant{Name: "NotExpired", Fields: []types.Si1Field(nil), Index: 0x19, Docs: []types.Text{"The username cannot be forcefully removed because it can still be accepted."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fe}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_vector", "storage_utils", "MessageStatusEnum"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "NotExecuted", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ExecutionFailed", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ExecutionSucceeded", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ff}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_vector", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "VerificationError", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NotEnoughParticipants", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "ConfigurationNotSet", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "SlotBehindHead", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "TooLongVerificationKey", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "VerificationKeyIsNotSet", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "MalformedVerificationKey", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "FunctionIdNotKnown", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NotSupportedCurve", Fields: []types.Si1Field(nil), Index: 0x8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "NotSupportedProtocol", Fields: []types.Si1Field(nil), Index: 0x9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "StepVerificationError", Fields: []types.Si1Field(nil), Index: 0xa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "RotateVerificationError", Fields: []types.Si1Field(nil), Index: 0xb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "HeaderRootNotSet", Fields: []types.Si1Field(nil), Index: 0xc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "VerificationFailed", Fields: []types.Si1Field(nil), Index: 0xd, Docs: []types.Text(nil)}, types.Si1Variant{Name: "HeaderRootAlreadySet", Fields: []types.Si1Field(nil), Index: 0xe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "StateRootAlreadySet", Fields: []types.Si1Field(nil), Index: 0xf, Docs: []types.Text(nil)}, types.Si1Variant{Name: "SyncCommitteeAlreadySet", Fields: []types.Si1Field(nil), Index: 0x10, Docs: []types.Text(nil)}, types.Si1Variant{Name: "SyncCommitteeNotSet", Fields: []types.Si1Field(nil), Index: 0x11, Docs: []types.Text(nil)}, types.Si1Variant{Name: "MessageAlreadyExecuted", Fields: []types.Si1Field(nil), Index: 0x12, Docs: []types.Text(nil)}, types.Si1Variant{Name: "WrongDestinationChain", Fields: []types.Si1Field(nil), Index: 0x13, Docs: []types.Text(nil)}, types.Si1Variant{Name: "UnsupportedOriginChain", Fields: []types.Si1Field(nil), Index: 0x14, Docs: []types.Text(nil)}, types.Si1Variant{Name: "BroadcasterSourceChainNotSet", Fields: []types.Si1Field(nil), Index: 0x15, Docs: []types.Text(nil)}, types.Si1Variant{Name: "SourceChainFrozen", Fields: []types.Si1Field(nil), Index: 0x16, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CannotGetStorageRoot", Fields: []types.Si1Field(nil), Index: 0x17, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CannotGetStorageValue", Fields: []types.Si1Field(nil), Index: 0x18, Docs: []types.Text(nil)}, types.Si1Variant{Name: "InvalidMessageHash", Fields: []types.Si1Field(nil), Index: 0x19, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CannotDecodeData", Fields: []types.Si1Field(nil), Index: 0x1a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "CannotDecodeDestinationAccountId", Fields: []types.Si1Field(nil), Index: 0x1b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "AssetNotSupported", Fields: []types.Si1Field(nil), Index: 0x1c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "InvalidBridgeInputs", Fields: []types.Si1Field(nil), Index: 0x1d, Docs: []types.Text{"Given inputs for the selected MessageType are invalid"}}, types.Si1Variant{Name: "DomainNotSupported", Fields: []types.Si1Field(nil), Index: 0x1e, Docs: []types.Text{"Domain is not supported"}}, types.Si1Variant{Name: "FunctionIdsAreNotSet", Fields: []types.Si1Field(nil), Index: 0x1f, Docs: []types.Text{"Function ids (step / rotate) are not set"}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x200}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x201}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x201}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x202}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x203}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x202}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_proxy", "ProxyDefinition"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "ProxyType", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "delegate", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "proxy_type", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x72}}}, HasTypeName: true, TypeName: "ProxyType", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "delay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x203}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x202}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x204}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x205}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x205}}}, Type: types.Si1Type{Path: types.Si1Path{"bounded_collections", "bounded_vec", "BoundedVec"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x206}}}}, types.Si1TypeParameter{Name: "S", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x207}}}, HasTypeName: true, TypeName: "Vec<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x206}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_proxy", "Announcement"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "AccountId", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, types.Si1TypeParameter{Name: "Hash", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.Si1TypeParameter{Name: "BlockNumber", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: true, Name: "real", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, HasTypeName: true, TypeName: "AccountId", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "call_hash", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, HasTypeName: true, TypeName: "Hash", Docs: []types.Text(nil)}, types.Si1Field{HasName: true, Name: "height", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, HasTypeName: true, TypeName: "BlockNumber", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x207}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: true, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x206}}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x208}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_proxy", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "TooMany", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"There are too many proxies registered or too many announcements pending."}}, types.Si1Variant{Name: "NotFound", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"Proxy registration not found."}}, types.Si1Variant{Name: "NotProxy", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"Sender is not a proxy of the account to be proxied."}}, types.Si1Variant{Name: "Unproxyable", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text{"A call which is incompatible with the proxy type's filter was attempted."}}, types.Si1Variant{Name: "Duplicate", Fields: []types.Si1Field(nil), Index: 0x4, Docs: []types.Text{"Account is already a proxy."}}, types.Si1Variant{Name: "NoPermission", Fields: []types.Si1Field(nil), Index: 0x5, Docs: []types.Text{"Call may not be made by proxy because it may escalate its privileges."}}, types.Si1Variant{Name: "Unannounced", Fields: []types.Si1Field(nil), Index: 0x6, Docs: []types.Text{"Announcement, if made at all, was made too recently."}}, types.Si1Variant{Name: "NoSelfProxy", Fields: []types.Si1Field(nil), Index: 0x7, Docs: []types.Text{"Cannot add self as proxy."}}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x209}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_tx_pause", "pallet", "Error"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "IsPaused", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text{"The call is paused."}}, types.Si1Variant{Name: "IsUnpaused", Fields: []types.Si1Field(nil), Index: 0x1, Docs: []types.Text{"The call is unpaused."}}, types.Si1Variant{Name: "Unpausable", Fields: []types.Si1Field(nil), Index: 0x2, Docs: []types.Text{"The call is whitelisted and cannot be paused."}}, types.Si1Variant{Name: "NotFound", Fields: []types.Si1Field(nil), Index: 0x3, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text{"The `Error` enum of this pallet."}}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20a}}}, Type: types.Si1Type{Path: types.Si1Path{"avail_core", "asdr", "AppUncheckedExtrinsic"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "Address", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa4}}}}, types.Si1TypeParameter{Name: "Call", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}}, types.Si1TypeParameter{Name: "Signature", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13c}}}}, types.Si1TypeParameter{Name: "Extra", HasType: true, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20b}}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20b}}}, Type: types.Si1Type{Path: types.Si1Path(nil), Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: true, Tuple: types.Si1TypeDefTuple{types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20c}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20d}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20e}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20f}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x210}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x212}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x213}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x214}}}, types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x215}}}}, IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20c}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extensions", "check_non_zero_sender", "CheckNonZeroSender"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20d}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extensions", "check_spec_version", "CheckSpecVersion"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20e}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extensions", "check_tx_version", "CheckTxVersion"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20f}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extensions", "check_genesis", "CheckGenesis"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x210}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extensions", "check_mortality", "CheckMortality"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x211}}}, HasTypeName: true, TypeName: "Era", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x211}}}, Type: types.Si1Type{Path: types.Si1Path{"sp_runtime", "generic", "era", "Era"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: false, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: true, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant{types.Si1Variant{Name: "Immortal", Fields: []types.Si1Field(nil), Index: 0x0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal1", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal2", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal3", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal4", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal5", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal6", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal7", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal8", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal9", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal10", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal11", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal12", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal13", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal14", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal15", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal16", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x10, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal17", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x11, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal18", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x12, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal19", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x13, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal20", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x14, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal21", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x15, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal22", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x16, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal23", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x17, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal24", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x18, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal25", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x19, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal26", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal27", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal28", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal29", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal30", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal31", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x1f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal32", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x20, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal33", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x21, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal34", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x22, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal35", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x23, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal36", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x24, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal37", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x25, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal38", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x26, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal39", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x27, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal40", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x28, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal41", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x29, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal42", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal43", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal44", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal45", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal46", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal47", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x2f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal48", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x30, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal49", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x31, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal50", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x32, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal51", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x33, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal52", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x34, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal53", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x35, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal54", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x36, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal55", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x37, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal56", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x38, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal57", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x39, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal58", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal59", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal60", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal61", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal62", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal63", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x3f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal64", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x40, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal65", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x41, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal66", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x42, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal67", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x43, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal68", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x44, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal69", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x45, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal70", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x46, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal71", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x47, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal72", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x48, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal73", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x49, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal74", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal75", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal76", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal77", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal78", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal79", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x4f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal80", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x50, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal81", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x51, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal82", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x52, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal83", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x53, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal84", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x54, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal85", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x55, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal86", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x56, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal87", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x57, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal88", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x58, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal89", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x59, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal90", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal91", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal92", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal93", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal94", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal95", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x5f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal96", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x60, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal97", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x61, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal98", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x62, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal99", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x63, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal100", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x64, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal101", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x65, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal102", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x66, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal103", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x67, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal104", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x68, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal105", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x69, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal106", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal107", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal108", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal109", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal110", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal111", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x6f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal112", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x70, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal113", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x71, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal114", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x72, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal115", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x73, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal116", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x74, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal117", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x75, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal118", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x76, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal119", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x77, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal120", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x78, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal121", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x79, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal122", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal123", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal124", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal125", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal126", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal127", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x7f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal128", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x80, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal129", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x81, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal130", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x82, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal131", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x83, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal132", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x84, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal133", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x85, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal134", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x86, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal135", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x87, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal136", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x88, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal137", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x89, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal138", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal139", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal140", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal141", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal142", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal143", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x8f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal144", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x90, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal145", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x91, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal146", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x92, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal147", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x93, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal148", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x94, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal149", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x95, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal150", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x96, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal151", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x97, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal152", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x98, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal153", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x99, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal154", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9a, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal155", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9b, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal156", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9c, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal157", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9d, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal158", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9e, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal159", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0x9f, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal160", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal161", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal162", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal163", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal164", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal165", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal166", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal167", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal168", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal169", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xa9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal170", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xaa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal171", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xab, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal172", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xac, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal173", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xad, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal174", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xae, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal175", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xaf, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal176", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal177", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal178", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal179", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal180", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal181", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal182", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal183", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal184", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal185", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xb9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal186", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xba, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal187", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xbb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal188", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xbc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal189", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xbd, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal190", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xbe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal191", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xbf, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal192", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal193", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal194", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal195", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal196", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal197", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal198", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal199", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal200", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal201", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xc9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal202", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xca, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal203", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xcb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal204", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xcc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal205", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xcd, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal206", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xce, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal207", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xcf, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal208", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal209", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal210", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal211", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal212", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal213", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal214", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal215", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal216", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal217", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xd9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal218", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xda, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal219", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xdb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal220", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xdc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal221", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xdd, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal222", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xde, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal223", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xdf, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal224", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal225", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal226", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal227", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal228", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal229", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal230", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal231", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal232", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal233", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xe9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal234", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xea, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal235", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xeb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal236", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xec, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal237", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xed, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal238", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xee, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal239", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xef, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal240", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf0, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal241", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf1, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal242", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf2, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal243", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf3, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal244", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf4, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal245", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf5, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal246", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf6, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal247", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf7, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal248", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf8, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal249", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xf9, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal250", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xfa, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal251", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xfb, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal252", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xfc, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal253", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xfd, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal254", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xfe, Docs: []types.Text(nil)}, types.Si1Variant{Name: "Mortal255", Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, HasTypeName: false, TypeName: "", Docs: []types.Text(nil)}}, Index: 0xff, Docs: []types.Text(nil)}}}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x212}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extensions", "check_nonce", "CheckNonce"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf}}}, HasTypeName: true, TypeName: "T::Nonce", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x213}}}, Type: types.Si1Type{Path: types.Si1Path{"frame_system", "extensions", "check_weight", "CheckWeight"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x214}}}, Type: types.Si1Type{Path: types.Si1Path{"pallet_transaction_payment", "ChargeTransactionPayment"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4c}}}, HasTypeName: true, TypeName: "BalanceOf<T>", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x215}}}, Type: types.Si1Type{Path: types.Si1Path{"da_control", "extensions", "check_app_id", "CheckAppId"}, Params: []types.Si1TypeParameter{types.Si1TypeParameter{Name: "T", HasType: false, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field{types.Si1Field{HasName: false, Name: "", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}, HasTypeName: true, TypeName: "AppId", Docs: []types.Text(nil)}}}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}, types.PortableTypeV14{ID: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x216}}}, Type: types.Si1Type{Path: types.Si1Path{"da_runtime", "Runtime"}, Params: []types.Si1TypeParameter(nil), Def: types.Si1TypeDef{IsComposite: true, Composite: types.Si1TypeDefComposite{Fields: []types.Si1Field(nil)}, IsVariant: false, Variant: types.Si1TypeDefVariant{Variants: []types.Si1Variant(nil)}, IsSequence: false, Sequence: types.Si1TypeDefSequence{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsArray: false, Array: types.Si1TypeDefArray{Len: 0x0, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsTuple: false, Tuple: types.Si1TypeDefTuple(nil), IsPrimitive: false, Primitive: types.Si1TypeDefPrimitive{Si0TypeDefPrimitive: 0x0}, IsCompact: false, Compact: types.Si1TypeDefCompact{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsBitSequence: false, BitSequence: types.Si1TypeDefBitSequence{BitStoreType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, BitOrderType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, IsHistoricMetaCompat: false, HistoricMetaCompat: ""}, Docs: []types.Text(nil)}}}}, Pallets: []types.PalletMetadataV14{types.PalletMetadataV14{Name: "System", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "System", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Account", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80}, Documentation: []types.Text{" The full account information for a particular account ID."}}, types.StorageEntryMetadataV14{Name: "ExtrinsicCount", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Total extrinsics count for the current block."}}, types.StorageEntryMetadataV14{Name: "BlockWeight", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The current weight for the block."}}, types.StorageEntryMetadataV14{Name: "AllExtrinsicsLen", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xc}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Total length (in bytes) for all extrinsics put together, for the current block."}}, types.StorageEntryMetadataV14{Name: "BlockHash", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Map of block numbers to block hashes."}}, types.StorageEntryMetadataV14{Name: "ExtrinsicData", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Extrinsics data for the current block (maps an extrinsic's index to its data)."}}, types.StorageEntryMetadataV14{Name: "Number", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The current block number being processed. Set by `execute_block`."}}, types.StorageEntryMetadataV14{Name: "ParentHash", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Hash of the previous block."}}, types.StorageEntryMetadataV14{Name: "Digest", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Digest of the current block, also part of the block header."}}, types.StorageEntryMetadataV14{Name: "Events", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Events deposited for the current block.", "", " NOTE: The item is unbound and should therefore never be read on chain.", " It could otherwise inflate the PoV size of a block.", "", " Events have a large in-memory size. Box the events to not go out-of-memory", " just in case someone still reads them from within the runtime."}}, types.StorageEntryMetadataV14{Name: "EventCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The number of events in the `Events<T>` list."}}, types.StorageEntryMetadataV14{Name: "EventTopics", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x78}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Mapping between a topic (represented by T::Hash) and a vector of indexes", " of events in the `<Events<T>>` list.", "", " All topic vectors have deterministic storage locations depending on the topic. This", " allows light-clients to leverage the changes trie storage tracking mechanism and", " in case of changes fetch the list of events of interest.", "", " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just", " the `EventIndex` then in case if the topic has the same contents on the next block", " no notification will be triggered thus the event might be lost."}}, types.StorageEntryMetadataV14{Name: "LastRuntimeUpgrade", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x79}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."}}, types.StorageEntryMetadataV14{Name: "UpgradedToU32RefCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."}}, types.StorageEntryMetadataV14{Name: "UpgradedToTripleRefCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" True if we have upgraded so that AccountInfo contains three types of `RefCount`. False", " (default) if not."}}, types.StorageEntryMetadataV14{Name: "ExecutionPhase", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x76}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The execution phase of the block."}}, types.StorageEntryMetadataV14{Name: "AuthorizedUpgrade", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7b}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" `Some` if a code upgrade has been authorized."}}, types.StorageEntryMetadataV14{Name: "DynamicBlockLength", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7c}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x3c, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x50, 0x0, 0x1, 0x4, 0x1, 0x4, 0x80}, Documentation: []types.Text{" The dynamic block length"}}, types.StorageEntryMetadataV14{Name: "BridgeNonce", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Total number of messages bridged to other chains"}}, types.StorageEntryMetadataV14{Name: "FailedExtrinsicIndices", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7e}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" List of failed indices in the current block"}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7f}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "BlockWeights", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x83}}}, Value: types.Bytes{0x2, 0x5b, 0x1f, 0x5d, 0x0, 0xb, 0x0, 0x50, 0x39, 0x27, 0x8c, 0x4, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc2, 0xa0, 0xa9, 0x1d, 0x0, 0x1, 0xb, 0xd0, 0x93, 0x0, 0x16, 0x69, 0x3, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x1, 0xb, 0x0, 0x84, 0xbd, 0x87, 0xdd, 0x3, 0x13, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xd9, 0x1, 0x0, 0x0, 0xc2, 0xa0, 0xa9, 0x1d, 0x0, 0x1, 0xb, 0xd0, 0x5f, 0x7c, 0xb5, 0x17, 0x4, 0x13, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0xe6, 0x1, 0xb, 0x0, 0x50, 0x39, 0x27, 0x8c, 0x4, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x7, 0x0, 0xcc, 0x7b, 0x9f, 0xae, 0x13, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x26, 0xc2, 0xa0, 0xa9, 0x1d, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Block & extrinsics weights: base values and limits."}}, types.ConstantMetadataV14{Name: "BlockLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x7c}}}, Value: types.Bytes{0x0, 0x0, 0x44, 0x0, 0x0, 0x0, 0x50, 0x0, 0x0, 0x0, 0x50, 0x0, 0x1, 0x4, 0x1, 0x4, 0x80}, Docs: []types.Text{" The maximum length of a block (in bytes)."}}, types.ConstantMetadataV14{Name: "BlockHashCount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x60, 0x9, 0x0, 0x0}, Docs: []types.Text{" Maximum number of block number to block hash mappings to keep (oldest pruned first)."}}, types.ConstantMetadataV14{Name: "DbWeight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x87}}}, Value: types.Bytes{0x40, 0x78, 0x7d, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe1, 0xf5, 0x5, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The weight of runtime database operations the runtime can invoke."}}, types.ConstantMetadataV14{Name: "Version", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x88}}}, Value: types.Bytes{0x28, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x28, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0xb, 0x0, 0x0, 0x0, 0x17, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44, 0xdf, 0x6a, 0xcb, 0x68, 0x99, 0x7, 0x60, 0x9b, 0x4, 0x0, 0x0, 0x0, 0x37, 0xe3, 0x97, 0xfc, 0x7c, 0x91, 0xf5, 0xe4, 0x2, 0x0, 0x0, 0x0, 0x40, 0xfe, 0x3a, 0xd4, 0x1, 0xf8, 0x95, 0x9a, 0x6, 0x0, 0x0, 0x0, 0xd2, 0xbc, 0x98, 0x97, 0xee, 0xd0, 0x8f, 0x15, 0x3, 0x0, 0x0, 0x0, 0xf7, 0x8b, 0x27, 0x8b, 0xe5, 0x3f, 0x45, 0x4c, 0x2, 0x0, 0x0, 0x0, 0xed, 0x99, 0xc5, 0xac, 0xb2, 0x5e, 0xed, 0xf5, 0x3, 0x0, 0x0, 0x0, 0xcb, 0xca, 0x25, 0xe3, 0x9f, 0x14, 0x23, 0x87, 0x2, 0x0, 0x0, 0x0, 0x68, 0x7a, 0xd4, 0x4a, 0xd3, 0x7f, 0x3, 0xc2, 0x1, 0x0, 0x0, 0x0, 0xbc, 0x9d, 0x89, 0x90, 0x4f, 0x5b, 0x92, 0x3f, 0x1, 0x0, 0x0, 0x0, 0x37, 0xc8, 0xbb, 0x13, 0x50, 0xa9, 0xa2, 0xa8, 0x4, 0x0, 0x0, 0x0, 0xf3, 0xff, 0x14, 0xd5, 0xab, 0x52, 0x70, 0x59, 0x3, 0x0, 0x0, 0x0, 0x91, 0xd5, 0xdf, 0x18, 0xb0, 0xd2, 0xcf, 0x58, 0x2, 0x0, 0x0, 0x0, 0x17, 0xa6, 0xbc, 0xd, 0x0, 0x62, 0xae, 0xb3, 0x1, 0x0, 0x0, 0x0, 0x79, 0x15, 0xd7, 0x20, 0xc2, 0x76, 0x9a, 0xc8, 0x1, 0x0, 0x0, 0x0, 0x53, 0x7d, 0xc9, 0xeb, 0xb9, 0x65, 0xe7, 0xc0, 0x1, 0x0, 0x0, 0x0, 0xab, 0x3c, 0x5, 0x72, 0x29, 0x1f, 0xeb, 0x8b, 0x1, 0x0, 0x0, 0x0, 0xfb, 0xc5, 0x77, 0xb9, 0xd7, 0x47, 0xef, 0xd6, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1}, Docs: []types.Text{" Get the chain's current version."}}, types.ConstantMetadataV14{Name: "SS58Prefix", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6c}}}, Value: types.Bytes{0x2a, 0x0}, Docs: []types.Text{" The designated SS58 prefix of this chain.", "", " This replaces the \"ss58Format\" property declared in the chain spec. Reason is", " that the runtime should know about the prefix in order to make use of it as", " an identifier of the chain."}}, types.ConstantMetadataV14{Name: "MaxDiffAppIdPerBlock", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x4, 0x0, 0x0}, Docs: []types.Text{" Maximum different `AppId` allowed per block.", " This is used during the calculation of padded length of the block when", " a transaction is validated (see `CheckAppId` signed extension)."}}, types.ConstantMetadataV14{Name: "MaxTxPerAppIdPerBlock", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x20, 0x0, 0x0}, Docs: []types.Text{" Maximum number of Tx per AppId allowed per block.", " This is used during the calculation of padded length of the block when", " a transaction is validated (see `CheckAppId` signed extension)."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8d}}}}, Index: 0x0}, types.PalletMetadataV14{Name: "Utility", HasStorage: false, Storage: types.StorageMetadataV14{Prefix: "", Items: []types.StorageEntryMetadataV14(nil)}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x8e}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x29}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "batched_calls_limit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xaa, 0x2a, 0x0, 0x0}, Docs: []types.Text{" The limit on the number of batched calls."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x155}}}}, Index: 0x1}, types.PalletMetadataV14{Name: "Babe", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Babe", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "EpochIndex", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Current epoch index."}}, types.StorageEntryMetadataV14{Name: "Authorities", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x156}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Current epoch authorities."}}, types.StorageEntryMetadataV14{Name: "GenesisSlot", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9d}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The slot at which the first epoch actually started. This is 0", " until the first block of the chain."}}, types.StorageEntryMetadataV14{Name: "CurrentSlot", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9d}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Current slot number."}}, types.StorageEntryMetadataV14{Name: "Randomness", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The epoch randomness for the *current* epoch.", "", " # Security", "", " This MUST NOT be used for gambling, as it can be influenced by a", " malicious validator in the short term. It MAY be used in many", " cryptographic protocols, however, so long as one remembers that this", " (like everything else on-chain) it is public. For example, it can be", " used where a number is needed that cannot have been chosen by an", " adversary, for purposes such as public-coin zero-knowledge proofs."}}, types.StorageEntryMetadataV14{Name: "PendingEpochConfigChange", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9f}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Pending epoch configuration change that will be applied when the next epoch is enacted."}}, types.StorageEntryMetadataV14{Name: "NextRandomness", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Next epoch randomness."}}, types.StorageEntryMetadataV14{Name: "NextAuthorities", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x156}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Next epoch authorities."}}, types.StorageEntryMetadataV14{Name: "SegmentIndex", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Randomness under construction.", "", " We make a trade-off between storage accesses and list length.", " We store the under-construction randomness in segments of up to", " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.", "", " Once a segment reaches this length, we begin the next one.", " We reset all segments and return to `0` at the beginning of every", " epoch."}}, types.StorageEntryMetadataV14{Name: "UnderConstruction", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x159}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."}}, types.StorageEntryMetadataV14{Name: "Initialized", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x15b}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Temporary value (cleared at block finalization) which is `Some`", " if per-block initialization has already been called for current block."}}, types.StorageEntryMetadataV14{Name: "AuthorVrfRandomness", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x53}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" This field should always be populated during block processing unless", " secondary plain slots are enabled (which don't contain a VRF output).", "", " It is set in `on_finalize`, before it will contain the value from the last block."}}, types.StorageEntryMetadataV14{Name: "EpochStart", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The block numbers when the last and current epoch have started, respectively `N-1` and", " `N`.", " NOTE: We track this is in order to annotate the block number when a given pool of", " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in", " slots, which may be skipped, the block numbers may not line up with the slot numbers."}}, types.StorageEntryMetadataV14{Name: "Lateness", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" How late the current block is compared to its parent.", "", " This entry is populated as part of block execution and is cleaned up", " on block finalization. Querying this storage entry outside of block", " execution context should always yield zero."}}, types.StorageEntryMetadataV14{Name: "EpochConfig", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x161}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The configuration for the current epoch. Should never be `None` as it is initialized in", " genesis."}}, types.StorageEntryMetadataV14{Name: "NextEpochConfig", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x161}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The configuration for the next epoch, `None` if the config will not change", " (you can fallback to `EpochConfig` instead in that case)."}}, types.StorageEntryMetadataV14{Name: "SkippedEpochs", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x162}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A list of the last 100 skipped epochs and the corresponding session index", " when the epoch was skipped.", "", " This is only used for validating equivocation proofs. An equivocation proof", " must contains a key-ownership proof for a given session, therefore we need a", " way to tie together sessions and epoch indices, i.e. we need to validate that", " a validator was the owner of a given key on a given session, and what the", " active epoch index was during that session."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x91}}}}, HasEvents: false, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "EpochDuration", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Bytes{0xd0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount of time, in slots, that each epoch should last.", " NOTE: Currently it is not possible to change the epoch duration after", " the chain has started. Attempting to do so will brick block production."}}, types.ConstantMetadataV14{Name: "ExpectedBlockTime", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Bytes{0x20, 0x4e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The expected average block time at which BABE should be creating", " blocks. Since BABE is probabilistic it is not trivial to figure out", " what the expected average block time should be based on the slot", " duration and the security parameter `c` (where `1 - c` represents", " the probability of a slot being empty)."}}, types.ConstantMetadataV14{Name: "MaxAuthorities", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xa0, 0x86, 0x1, 0x0}, Docs: []types.Text{" Max number of authorities allowed"}}, types.ConstantMetadataV14{Name: "MaxNominators", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x1, 0x0, 0x0}, Docs: []types.Text{" The maximum number of nominators for each validator."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x165}}}}, Index: 0x2}, types.PalletMetadataV14{Name: "Timestamp", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Timestamp", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Now", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The current time for the current block."}}, types.StorageEntryMetadataV14{Name: "DidUpdate", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Whether the timestamp has been updated in this block.", "", " This value is updated to `true` upon successful submission of a timestamp by a node.", " It is then checked at the end of each block execution in the `on_finalize` hook."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa2}}}}, HasEvents: false, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MinimumPeriod", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Bytes{0x10, 0x27, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The minimum period between blocks.", "", " Be aware that this is different to the *expected* period that the block production", " apparatus provides. Your chosen consensus system will generally work with this to", " determine a sensible block time. For example, in the Aura pallet it will be double this", " period on default settings."}}}, HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x3}, types.PalletMetadataV14{Name: "Authorship", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Authorship", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Author", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Author of current block."}}}}, HasCalls: false, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, HasEvents: false, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x4}, types.PalletMetadataV14{Name: "Indices", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Indices", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Accounts", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x166}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The lookup from index to account."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa3}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2c}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "Deposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The deposit needed for reserving an index."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x167}}}}, Index: 0x5}, types.PalletMetadataV14{Name: "Balances", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Balances", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "TotalIssuance", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The total units issued in the system."}}, types.StorageEntryMetadataV14{Name: "InactiveIssuance", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The total units of outstanding deactivated balance in the system."}}, types.StorageEntryMetadataV14{Name: "Account", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80}, Documentation: []types.Text{" The Balances pallet example of storing the balance of an account.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>", "  }", " ```", "", " You can also store the balance of an account in the `System` pallet.", "", " # Example", "", " ```nocompile", "  impl pallet_balances::Config for Runtime {", "   type AccountStore = System", "  }", " ```", "", " But this comes with tradeoffs, storing account balances in the system pallet stores", " `frame_system` data alongside the account data contrary to storing account balances in the", " `Balances` pallet, which uses a `StorageMap` to store balances data only.", " NOTE: This is only used in the case that this pallet is used to store balances."}}, types.StorageEntryMetadataV14{Name: "Locks", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x168}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Any liquidity locks on some account balances.", " NOTE: Should only be accessed when setting, changing and freeing a lock."}}, types.StorageEntryMetadataV14{Name: "Reserves", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16c}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Named reserves on some account balances."}}, types.StorageEntryMetadataV14{Name: "Holds", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16f}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Holds on account balances."}}, types.StorageEntryMetadataV14{Name: "Freezes", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x174}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Freeze locks on account balances."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa6}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2d}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "ExistentialDeposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0xa0, 0x72, 0x4e, 0x18, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!", "", " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for", " this pallet. However, you do so at your own risk: this will open up a major DoS vector.", " In case you have multiple sources of provider references, you may also get unexpected", " behaviour if you set this to zero.", "", " Bottom line: Do yourself a favour and make it at least one!"}}, types.ConstantMetadataV14{Name: "MaxLocks", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x32, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of locks that should exist on an account.", " Not strictly enforced, but used for weight estimation."}}, types.ConstantMetadataV14{Name: "MaxReserves", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x32, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of named reserves that can exist on an account."}}, types.ConstantMetadataV14{Name: "MaxFreezes", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x2, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of individual freeze locks that can exist on an account at any time."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x179}}}}, Index: 0x6}, types.PalletMetadataV14{Name: "TransactionPayment", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "TransactionPayment", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "NextFeeMultiplier", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17a}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text(nil)}, types.StorageEntryMetadataV14{Name: "NextLengthMultiplier", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17a}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text(nil)}, types.StorageEntryMetadataV14{Name: "StorageVersion", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17b}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text(nil)}}}, HasCalls: false, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2f}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "OperationalFeeMultiplier", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, Value: types.Bytes{0x5}, Docs: []types.Text{" A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their", " `priority`", "", " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later", " added to a tip component in regular `priority` calculations.", " It means that a `Normal` transaction can front-run a similarly-sized `Operational`", " extrinsic (with no tip), by including a tip value greater than the virtual tip.", "", " ```rust,ignore", " // For `Normal`", " let priority = priority_calc(tip);", "", " // For `Operational`", " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;", " let priority = priority_calc(tip + virtual_tip);", " ```", "", " Note that since we use `final_fee` the multiplier applies also to the regular `tip`", " sent with the transaction. So, not only does the transaction get a priority bump based", " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`", " transactions."}}}, HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x7}, types.PalletMetadataV14{Name: "ElectionProviderMultiPhase", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "ElectionProviderMultiPhase", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Round", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x1, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Internal counter for the number of rounds.", "", " This is useful for de-duplication of transactions submitted to the pool, and general", " diagnostics of the pallet.", "", " This is merely incremented once per every time that an upstream `elect` is called."}}, types.StorageEntryMetadataV14{Name: "CurrentPhase", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x34}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Current phase."}}, types.StorageEntryMetadataV14{Name: "QueuedSolution", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17c}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Current best solution, signed or unsigned, queued to be returned upon `elect`.", "", " Always sorted by score."}}, types.StorageEntryMetadataV14{Name: "Snapshot", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17e}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Snapshot data of the round.", "", " This is created at the beginning of the signed phase and cleared upon calling `elect`.", " Note: This storage type must only be mutated through [`SnapshotWrapper`]."}}, types.StorageEntryMetadataV14{Name: "DesiredTargets", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Desired number of targets to elect for this round.", "", " Only exists when [`Snapshot`] is present.", " Note: This storage type must only be mutated through [`SnapshotWrapper`]."}}, types.StorageEntryMetadataV14{Name: "SnapshotMetadata", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xdd}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The metadata of the [`RoundSnapshot`]", "", " Only exists when [`Snapshot`] is present.", " Note: This storage type must only be mutated through [`SnapshotWrapper`]."}}, types.StorageEntryMetadataV14{Name: "SignedSubmissionNextIndex", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The next index to be assigned to an incoming signed submission.", "", " Every accepted submission is assigned a unique index; that index is bound to that particular", " submission for the duration of the election. On election finalization, the next index is", " reset to 0.", "", " We can't just use `SignedSubmissionIndices.len()`, because that's a bounded set; past its", " capacity, it will simply saturate. We can't just iterate over `SignedSubmissionsMap`,", " because iteration is slow. Instead, we store the value here."}}, types.StorageEntryMetadataV14{Name: "SignedSubmissionIndices", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x182}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A sorted, bounded vector of `(score, block_number, index)`, where each `index` points to a", " value in `SignedSubmissions`.", "", " We never need to process more than a single signed submission at a time. Signed submissions", " can be quite large, so we're willing to pay the cost of multiple database accesses to access", " them one at a time instead of reading and decoding all of them at once."}}, types.StorageEntryMetadataV14{Name: "SignedSubmissionsMap", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x185}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Unchecked, signed solutions.", "", " Together with `SubmissionIndices`, this stores a bounded set of `SignedSubmissions` while", " allowing us to keep only a single one in memory at a time.", "", " Twox note: the key of the map is an auto-incrementing index which users cannot inspect or", " affect; we shouldn't need a cryptographically secure hasher."}}, types.StorageEntryMetadataV14{Name: "MinimumUntrustedScore", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x33}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The minimum score that each 'untrusted' solution must attain in order to be considered", " feasible.", "", " Can be set via `set_minimum_untrusted_score`."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa9}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x30}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "UnsignedPhase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xb4, 0x0, 0x0, 0x0}, Docs: []types.Text{" Duration of the unsigned phase."}}, types.ConstantMetadataV14{Name: "SignedPhase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xb4, 0x0, 0x0, 0x0}, Docs: []types.Text{" Duration of the signed phase."}}, types.ConstantMetadataV14{Name: "BetterSignedThreshold", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, Value: types.Bytes{0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The minimum amount of improvement to the solution score that defines a solution as", " \"better\" in the Signed phase."}}, types.ConstantMetadataV14{Name: "OffchainRepeat", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x5, 0x0, 0x0, 0x0}, Docs: []types.Text{" The repeat threshold of the offchain worker.", "", " For example, if it is 5, that means that at least 5 blocks will elapse between attempts", " to submit the worker's solution."}}, types.ConstantMetadataV14{Name: "MinerTxPriority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Bytes{0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f}, Docs: []types.Text{" The priority of the unsigned transaction submitted in the unsigned-phase"}}, types.ConstantMetadataV14{Name: "SignedMaxSubmissions", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x10, 0x0, 0x0, 0x0}, Docs: []types.Text{" Maximum number of signed submissions that can be queued.", "", " It is best to avoid adjusting this during an election, as it impacts downstream data", " structures. In particular, `SignedSubmissionIndices<T>` is bounded on this value. If you", " update this value during an election, you _must_ ensure that", " `SignedSubmissionIndices.len()` is less than or equal to the new value. Otherwise,", " attempts to submit new solutions may cause a runtime panic."}}, types.ConstantMetadataV14{Name: "SignedMaxWeight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, Value: types.Bytes{0xb, 0x10, 0xbd, 0xb8, 0xfe, 0x68, 0x3, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0}, Docs: []types.Text{" Maximum weight of a signed solution.", "", " If [`Config::MinerConfig`] is being implemented to submit signed solutions (outside of", " this pallet), then [`MinerConfig::solution_weight`] is used to compare against", " this value."}}, types.ConstantMetadataV14{Name: "SignedMaxRefunds", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x4, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum amount of unchecked solutions to refund the call fee for."}}, types.ConstantMetadataV14{Name: "SignedRewardBase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Base reward for a signed solution"}}, types.ConstantMetadataV14{Name: "SignedDepositByte", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x10, 0xa5, 0xd4, 0xe8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Per-byte deposit for a signed solution."}}, types.ConstantMetadataV14{Name: "SignedDepositWeight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Per-weight deposit for a signed solution."}}, types.ConstantMetadataV14{Name: "MaxWinners", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xb0, 0x4, 0x0, 0x0}, Docs: []types.Text{" The maximum number of winners that can be elected by this `ElectionProvider`", " implementation.", "", " Note: This must always be greater or equal to `T::DataProvider::desired_targets()`."}}, types.ConstantMetadataV14{Name: "MinerMaxLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x33, 0x33, 0x3d, 0x0}, Docs: []types.Text(nil)}, types.ConstantMetadataV14{Name: "MinerMaxWeight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, Value: types.Bytes{0xb, 0x10, 0xbd, 0xb8, 0xfe, 0x68, 0x3, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0}, Docs: []types.Text(nil)}, types.ConstantMetadataV14{Name: "MinerMaxVotesPerVoter", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x10, 0x0, 0x0, 0x0}, Docs: []types.Text(nil)}, types.ConstantMetadataV14{Name: "MinerMaxWinners", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xb0, 0x4, 0x0, 0x0}, Docs: []types.Text(nil)}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x186}}}}, Index: 0x9}, types.PalletMetadataV14{Name: "Staking", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Staking", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "ValidatorCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The ideal number of active validators."}}, types.StorageEntryMetadataV14{Name: "MinimumValidatorCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Minimum number of staking participants before emergency conditions are imposed."}}, types.StorageEntryMetadataV14{Name: "Invulnerables", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Any validators that may never be slashed or forcibly kicked. It's a Vec since they're", " easy to initialize and the performance hit is minimal (we expect no more than four", " invulnerables) and restricted to testnets."}}, types.StorageEntryMetadataV14{Name: "Bonded", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Map from all locked \"stash\" accounts to the controller account.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."}}, types.StorageEntryMetadataV14{Name: "MinNominatorBond", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The minimum active bond to become and maintain the role of a nominator."}}, types.StorageEntryMetadataV14{Name: "MinValidatorBond", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The minimum active bond to become and maintain the role of a validator."}}, types.StorageEntryMetadataV14{Name: "MinimumActiveStake", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The minimum active nominator stake of the last successful election."}}, types.StorageEntryMetadataV14{Name: "MinCommission", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The minimum amount of commission that validators can set.", "", " If set to `0`, no limit exists."}}, types.StorageEntryMetadataV14{Name: "Ledger", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x187}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Map from all (unlocked) \"controller\" accounts to the info regarding the staking.", "", " Note: All the reads and mutations to this storage *MUST* be done through the methods exposed", " by [`StakingLedger`] to ensure data and lock consistency."}}, types.StorageEntryMetadataV14{Name: "Payee", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x37}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Where the reward payment should be made. Keyed by stash.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."}}, types.StorageEntryMetadataV14{Name: "Validators", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x39}}}}}, Fallback: types.Bytes{0x0, 0x0}, Documentation: []types.Text{" The map from (wannabe) validator stash key to the preferences of that validator.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."}}, types.StorageEntryMetadataV14{Name: "CounterForValidators", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "MaxValidatorsCount", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The maximum validator count before we stop allowing new validators to join.", "", " When this value is not set, no limits are enforced."}}, types.StorageEntryMetadataV14{Name: "Nominators", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18c}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The map from nominator stash key to their nomination preferences, namely the validators that", " they wish to support.", "", " Note that the keys of this storage map might become non-decodable in case the", " account's [`NominationsQuota::MaxNominations`] configuration is decreased.", " In this rare case, these nominators", " are still existent in storage, their key is correct and retrievable (i.e. `contains_key`", " indicates that they exist), but their value cannot be decoded. Therefore, the non-decodable", " nominators will effectively not-exist, until they re-submit their preferences such that it", " is within the bounds of the newly set `Config::MaxNominations`.", "", " This implies that `::iter_keys().count()` and `::iter().count()` might return different", " values for this map. Moreover, the main `::count()` is aligned with the former, namely the", " number of keys that exist.", "", " Lastly, if any of the nominators become non-decodable, they can be chilled immediately via", " [`Call::chill_other`] dispatchable by anyone.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."}}, types.StorageEntryMetadataV14{Name: "CounterForNominators", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "MaxNominatorsCount", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The maximum nominator count before we stop allowing new validators to join.", "", " When this value is not set, no limits are enforced."}}, types.StorageEntryMetadataV14{Name: "CurrentEra", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The current era index.", "", " This is the latest planned era, depending on how the Session pallet queues the validator", " set, it might be active or not."}}, types.StorageEntryMetadataV14{Name: "ActiveEra", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18d}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The active era information, it holds index and start.", "", " The active era is the era being currently rewarded. Validator set of this era must be", " equal to [`SessionInterface::validators`]."}}, types.StorageEntryMetadataV14{Name: "ErasStartSessionIndex", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The session index at which the era start for the last [`Config::HistoryDepth`] eras.", "", " Note: This tracks the starting session (i.e. session index when era start being active)", " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."}}, types.StorageEntryMetadataV14{Name: "ErasStakers", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4b}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0}, Documentation: []types.Text{" Exposure of validator at era.", "", " This is keyed first by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after [`Config::HistoryDepth`] eras.", " If stakers hasn't been set or has been removed then empty exposure is returned.", "", " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."}}, types.StorageEntryMetadataV14{Name: "ErasStakersOverview", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x190}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Summary of validator exposure at a given era.", "", " This contains the total stake in support of the validator and their own stake. In addition,", " it can also be used to get the number of nominators backing this validator and the number of", " exposure pages they are divided into. The page count is useful to determine the number of", " pages of rewards that needs to be claimed.", "", " This is keyed first by the era index to allow bulk deletion and then the stash account.", " Should only be accessed through `EraInfo`.", "", " Is it removed after [`Config::HistoryDepth`] eras.", " If stakers hasn't been set or has been removed then empty overview is returned."}}, types.StorageEntryMetadataV14{Name: "ErasStakersClipped", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4b}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0}, Documentation: []types.Text{" Clipped Exposure of validator at era.", "", " Note: This is deprecated, should be used as read-only and will be removed in the future.", " New `Exposure`s are stored in a paged manner in `ErasStakersPaged` instead.", "", " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the", " `T::MaxExposurePageSize` biggest stakers.", " (Note: the field `total` and `own` of the exposure remains unchanged).", " This is used to limit the i/o cost for the nominator payout.", "", " This is keyed fist by the era index to allow bulk deletion and then the stash account.", "", " It is removed after [`Config::HistoryDepth`] eras.", " If stakers hasn't been set or has been removed then empty exposure is returned.", "", " Note: Deprecated since v14. Use `EraInfo` instead to work with exposures."}}, types.StorageEntryMetadataV14{Name: "ErasStakersPaged", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x191}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x192}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Paginated exposure of a validator at given era.", "", " This is keyed first by the era index to allow bulk deletion, then stash account and finally", " the page. Should only be accessed through `EraInfo`.", "", " This is cleared after [`Config::HistoryDepth`] eras."}}, types.StorageEntryMetadataV14{Name: "ClaimedRewards", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" History of claimed paged rewards by era and validator.", "", " This is keyed by era and validator stash which maps to the set of page indexes which have", " been claimed.", "", " It is removed after [`Config::HistoryDepth`] eras."}}, types.StorageEntryMetadataV14{Name: "ErasValidatorPrefs", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x39}}}}}, Fallback: types.Bytes{0x0, 0x0}, Documentation: []types.Text{" Similar to `ErasStakers`, this holds the preferences of validators.", "", " This is keyed first by the era index to allow bulk deletion and then the stash account.", "", " Is it removed after [`Config::HistoryDepth`] eras."}}, types.StorageEntryMetadataV14{Name: "ErasValidatorReward", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The total validator era payout for the last [`Config::HistoryDepth`] eras.", "", " Eras that haven't finished yet or has been removed doesn't have reward."}}, types.StorageEntryMetadataV14{Name: "ErasRewardPoints", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x193}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Rewards for the last [`Config::HistoryDepth`] eras.", " If reward hasn't been set or has been removed then 0 reward is returned."}}, types.StorageEntryMetadataV14{Name: "ErasTotalStake", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The total amount staked for the last [`Config::HistoryDepth`] eras.", " If total hasn't been set or has been removed then 0 stake is returned."}}, types.StorageEntryMetadataV14{Name: "ForceEra", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3b}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Mode of era forcing."}}, types.StorageEntryMetadataV14{Name: "SlashRewardFraction", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The percentage of the slash that is distributed to reporters.", "", " The rest of the slashed value is handled by the `Slash`."}}, types.StorageEntryMetadataV14{Name: "CanceledSlashPayout", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The amount of currency given to reporters of a slash event which was", " canceled by extraordinary circumstances (e.g. governance)."}}, types.StorageEntryMetadataV14{Name: "UnappliedSlashes", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x197}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" All unapplied slashes that are queued for later."}}, types.StorageEntryMetadataV14{Name: "BondedEras", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x78}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A mapping from still-bonded eras to the first session index of that era.", "", " Must contains information for eras for the range:", " `[active_era - bounding_duration; active_era]`"}}, types.StorageEntryMetadataV14{Name: "ValidatorSlashInEra", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x199}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" All slashing events on validators, mapped by era to the highest slash proportion", " and slash value of the era."}}, types.StorageEntryMetadataV14{Name: "NominatorSlashInEra", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" All slashing events on nominators, mapped by era to the highest slash value of the era."}}, types.StorageEntryMetadataV14{Name: "SlashingSpans", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19a}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Slashing spans for stash accounts."}}, types.StorageEntryMetadataV14{Name: "SpanSlash", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x196}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19b}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Records information about the maximum slash of a stash within a slashing span,", " as well as how much reward has been paid out."}}, types.StorageEntryMetadataV14{Name: "CurrentPlannedSession", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The last planned session scheduled by the session pallet.", "", " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."}}, types.StorageEntryMetadataV14{Name: "OffendingValidators", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19c}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Indices of validators that have offended in the active era and whether they are currently", " disabled.", "", " This value should be a superset of disabled validators since not all offences lead to the", " validator being disabled (if there was no slash). This is needed to track the percentage of", " validators that have offended in the current era, ensuring a new era is forced if", " `OffendingValidatorsThreshold` is reached. The vec is always kept sorted so that we can find", " whether a given validator has previously offended using binary search. It gets cleared when", " the era ends."}}, types.StorageEntryMetadataV14{Name: "ChillThreshold", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe7}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The threshold for when users can start calling `chill_other` for other validators /", " nominators. The threshold is compared to the actual number of validators / nominators", " (`CountFor*`) in the system compared to the configured max (`Max*Count`)."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe5}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x36}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "HistoryDepth", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x54, 0x0, 0x0, 0x0}, Docs: []types.Text{" Number of eras to keep in history.", "", " Following information is kept for eras in `[current_era -", " HistoryDepth, current_era]`: `ErasStakers`, `ErasStakersClipped`,", " `ErasValidatorPrefs`, `ErasValidatorReward`, `ErasRewardPoints`,", " `ErasTotalStake`, `ErasStartSessionIndex`, `ClaimedRewards`, `ErasStakersPaged`,", " `ErasStakersOverview`.", "", " Must be more than the number of eras delayed by session.", " I.e. active era must always be in history. I.e. `active_era >", " current_era - history_depth` must be guaranteed.", "", " If migrating an existing pallet from storage value to config value,", " this should be set to same value or greater as in storage.", "", " Note: `HistoryDepth` is used as the upper bound for the `BoundedVec`", " item `StakingLedger.legacy_claimed_rewards`. Setting this value lower than", " the existing value can lead to inconsistencies in the", " `StakingLedger` and will need to be handled properly in a migration.", " The test `reducing_history_depth_abrupt` shows this effect."}}, types.ConstantMetadataV14{Name: "SessionsPerEra", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x6, 0x0, 0x0, 0x0}, Docs: []types.Text{" Number of sessions per era."}}, types.ConstantMetadataV14{Name: "BondingDuration", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x1c, 0x0, 0x0, 0x0}, Docs: []types.Text{" Number of eras that staked funds must remain bonded for."}}, types.ConstantMetadataV14{Name: "SlashDeferDuration", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x1b, 0x0, 0x0, 0x0}, Docs: []types.Text{" Number of eras that slashes are deferred by, after computation.", "", " This should be less than the bonding duration. Set to 0 if slashes", " should be applied immediately, without opportunity for intervention."}}, types.ConstantMetadataV14{Name: "MaxExposurePageSize", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x1, 0x0, 0x0}, Docs: []types.Text{" The maximum size of each `T::ExposurePage`.", "", " An `ExposurePage` is weakly bounded to a maximum of `MaxExposurePageSize`", " nominators.", "", " For older non-paged exposure, a reward payout was restricted to the top", " `MaxExposurePageSize` nominators. This is to limit the i/o cost for the", " nominator payout.", "", " Note: `MaxExposurePageSize` is used to bound `ClaimedRewards` and is unsafe to reduce", " without handling it in a migration."}}, types.ConstantMetadataV14{Name: "MaxUnlockingChunks", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x20, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of `unlocking` chunks a [`StakingLedger`] can", " have. Effectively determines how many unique eras a staker may be", " unbonding in.", "", " Note: `MaxUnlockingChunks` is used as the upper bound for the", " `BoundedVec` item `StakingLedger.unlocking`. Setting this value", " lower than the existing value can lead to inconsistencies in the", " `StakingLedger` and will need to be handled properly in a runtime", " migration. The test `reducing_max_unlocking_chunks_abrupt` shows", " this effect."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19e}}}}, Index: 0xa}, types.PalletMetadataV14{Name: "Session", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Session", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Validators", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The current set of validators."}}, types.StorageEntryMetadataV14{Name: "CurrentIndex", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Current index of the session."}}, types.StorageEntryMetadataV14{Name: "QueuedChanged", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" True if the underlying economic identities or weighting behind the validators", " has changed in the queued validator set."}}, types.StorageEntryMetadataV14{Name: "QueuedKeys", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x19f}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The queued keys for the next session. When the next session begins, these keys", " will be used to determine the validator's session keys."}}, types.StorageEntryMetadataV14{Name: "DisabledValidators", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x12}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Indices of disabled validators.", "", " The vec is always kept sorted so that we can find whether a given validator is", " disabled using binary search. It gets cleared when `on_session_ending` returns", " a new set of identities."}}, types.StorageEntryMetadataV14{Name: "NextKeys", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xee}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The next session keys for a validator."}}, types.StorageEntryMetadataV14{Name: "KeyOwner", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a1}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The owner of a key. The key is the `KeyTypeId` + the encoded key."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xed}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3c}}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a3}}}}, Index: 0xb}, types.PalletMetadataV14{Name: "TechnicalCommittee", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "TechnicalCommittee", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Proposals", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The hashes of the active proposals."}}, types.StorageEntryMetadataV14{Name: "ProposalOf", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x90}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Actual proposal for a given hash, if it's current."}}, types.StorageEntryMetadataV14{Name: "Voting", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a5}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Votes on a given proposal, if it is ongoing."}}, types.StorageEntryMetadataV14{Name: "ProposalCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Proposals so far."}}, types.StorageEntryMetadataV14{Name: "Members", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xa7}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The current members of the collective. This is stored sorted (just by value)."}}, types.StorageEntryMetadataV14{Name: "Prime", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The prime member that helps determine the default vote behavior in case of absentations."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf0}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3d}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MaxProposalWeight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, Value: types.Bytes{0xb, 0x0, 0xa8, 0x9c, 0x13, 0x46, 0x2, 0x13, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f}, Docs: []types.Text{" The maximum weight of a dispatch call that can be proposed and executed."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a6}}}}, Index: 0xe}, types.PalletMetadataV14{Name: "TechnicalMembership", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "TechnicalMembership", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Members", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a7}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The current membership, stored as an ordered Vec."}}, types.StorageEntryMetadataV14{Name: "Prime", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The current prime member, if one exists."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf1}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3e}}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a8}}}}, Index: 0x10}, types.PalletMetadataV14{Name: "Grandpa", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Grandpa", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "State", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1a9}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" State of the current authority set."}}, types.StorageEntryMetadataV14{Name: "PendingChange", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1aa}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Pending change: (signaled at, scheduled change)."}}, types.StorageEntryMetadataV14{Name: "NextForced", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" next block number where we can force a change."}}, types.StorageEntryMetadataV14{Name: "Stalled", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" `true` if we are currently stalled."}}, types.StorageEntryMetadataV14{Name: "CurrentSetId", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The number of changes (both in terms of keys and underlying economic responsibilities)", " in the \"set\" of Grandpa validators from genesis."}}, types.StorageEntryMetadataV14{Name: "SetIdSession", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A mapping from grandpa set ID to the index of the *most recent* session for which its", " members were responsible.", "", " This is only used for validating equivocation proofs. An equivocation proof must", " contains a key-ownership proof for a given session, therefore we need a way to tie", " together sessions and GRANDPA set ids, i.e. we need to validate that a validator", " was the owner of a given key on a given session, and what the active set ID was", " during that session.", "", " TWOX-NOTE: `SetId` is not under user control."}}, types.StorageEntryMetadataV14{Name: "Authorities", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ab}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The current list of authorities."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xf2}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x3f}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MaxAuthorities", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xa0, 0x86, 0x1, 0x0}, Docs: []types.Text{" Max Authorities in use"}}, types.ConstantMetadataV14{Name: "MaxNominators", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x1, 0x0, 0x0}, Docs: []types.Text{" The maximum number of nominators for each validator."}}, types.ConstantMetadataV14{Name: "MaxSetIdSessionEntries", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Bytes{0xa8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of entries to keep in the set id to session index mapping.", "", " Since the `SetIdSession` map is only used for validating equivocations this", " value should relate to the bonding duration of whatever staking system is", " being used (if any). If equivocation handling is not enabled then this value", " can be zero."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ac}}}}, Index: 0x11}, types.PalletMetadataV14{Name: "Treasury", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Treasury", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "ProposalCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Number of proposals that have been made."}}, types.StorageEntryMetadataV14{Name: "Proposals", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ad}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Proposals that have been made."}}, types.StorageEntryMetadataV14{Name: "Deactivated", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The amount which has been reported as inactive to Currency."}}, types.StorageEntryMetadataV14{Name: "Approvals", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ae}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Proposal indices that have been approved but not yet awarded."}}, types.StorageEntryMetadataV14{Name: "SpendCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The count of spends that have been made."}}, types.StorageEntryMetadataV14{Name: "Spends", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1af}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Spends that have been approved and being processed."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xfe}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x44}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "ProposalBond", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b1}}}, Value: types.Bytes{0x50, 0xc3, 0x0, 0x0}, Docs: []types.Text{" Fraction of a proposal's value that should be bonded in order to place the proposal.", " An accepted proposal gets these back. A rejected proposal does not."}}, types.ConstantMetadataV14{Name: "ProposalBondMinimum", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Minimum amount of funds that should be placed in a deposit for making a proposal."}}, types.ConstantMetadataV14{Name: "ProposalBondMaximum", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x148}}}, Value: types.Bytes{0x0}, Docs: []types.Text{" Maximum amount of funds that should be placed in a deposit for making a proposal."}}, types.ConstantMetadataV14{Name: "SpendPeriod", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xe0, 0x10, 0x0, 0x0}, Docs: []types.Text{" Period between successive spends."}}, types.ConstantMetadataV14{Name: "Burn", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b1}}}, Value: types.Bytes{0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Percentage of spare funds (if any) that are burnt per spend period."}}, types.ConstantMetadataV14{Name: "PalletId", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b2}}}, Value: types.Bytes{0x70, 0x79, 0x2f, 0x74, 0x72, 0x73, 0x72, 0x79}, Docs: []types.Text{" The treasury's pallet id, used for deriving its sovereign account ID."}}, types.ConstantMetadataV14{Name: "MaxApprovals", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x64, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of approvals that can wait in the spending queue.", "", " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."}}, types.ConstantMetadataV14{Name: "PayoutPeriod", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x40, 0xfa, 0x1, 0x0}, Docs: []types.Text{" The period during which an approved treasury spend has to be claimed."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b3}}}}, Index: 0x12}, types.PalletMetadataV14{Name: "Sudo", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Sudo", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Key", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The `AccountId` of the sudo key."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xff}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x45}}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b4}}}}, Index: 0x13}, types.PalletMetadataV14{Name: "ImOnline", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "ImOnline", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "HeartbeatAfter", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The block number after which it's ok to send heartbeats in the current", " session.", "", " At the beginning of each session we set this to a value that should fall", " roughly in the middle of the session duration. The idea is to first wait for", " the validators to produce a block in the current session, so that the", " heartbeat later on will not be necessary.", "", " This value will only be used as a fallback if we fail to get a proper session", " progress estimate from `NextSessionRotation`, as those estimates should be", " more accurate then the value we calculate for `HeartbeatAfter`."}}, types.StorageEntryMetadataV14{Name: "Keys", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b5}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The current set of keys that may issue a heartbeat."}}, types.StorageEntryMetadataV14{Name: "ReceivedHeartbeats", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" For each session index, we keep a mapping of `SessionIndex` and `AuthIndex`."}}, types.StorageEntryMetadataV14{Name: "AuthoredBlocks", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x18f}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" For each session index, we keep a mapping of `ValidatorId<T>` to the", " number of blocks authored by the given authority."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x100}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x46}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "UnsignedPriority", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Bytes{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, Docs: []types.Text{" A configuration for base priority of unsigned transactions.", "", " This is exposed so that it can be tuned for particular runtime, when", " multiple pallets send unsigned transactions."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b7}}}}, Index: 0x14}, types.PalletMetadataV14{Name: "AuthorityDiscovery", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "AuthorityDiscovery", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Keys", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b8}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Keys of the current authority set."}}, types.StorageEntryMetadataV14{Name: "NextKeys", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b8}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Keys of the next authority set."}}}}, HasCalls: false, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, HasEvents: false, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x15}, types.PalletMetadataV14{Name: "Offences", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Offences", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Reports", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ba}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The primary structure that holds all offence records keyed by report identifiers."}}, types.StorageEntryMetadataV14{Name: "ConcurrentReportsIndex", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x77}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A vector of reports of the same kind that happened at the same time slot."}}}}, HasCalls: false, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4f}}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x16}, types.PalletMetadataV14{Name: "Historical", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Historical", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "HistoricalSessions", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bc}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Mapping from historical session indices to session-data root hash and validator count."}}, types.StorageEntryMetadataV14{Name: "StoredRange", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The range of historical sessions we store. [first, last)"}}}}, HasCalls: false, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, HasEvents: false, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x17}, types.PalletMetadataV14{Name: "Scheduler", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Scheduler", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "IncompleteSince", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text(nil)}, types.StorageEntryMetadataV14{Name: "Agenda", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bd}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Items to be executed, indexed by the block number that they should be executed on."}}, types.StorageEntryMetadataV14{Name: "Lookup", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x52}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Lookup from a name to the block number and index of the task.", "", " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4", " identities."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x104}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x51}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MaximumWeight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x9}}}, Value: types.Bytes{0xb, 0x0, 0x40, 0x94, 0x52, 0xa3, 0x3, 0x13, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc}, Docs: []types.Text{" The maximum weight that may be scheduled per block for any dispatchables."}}, types.ConstantMetadataV14{Name: "MaxScheduledPerBlock", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x2, 0x0, 0x0}, Docs: []types.Text{" The maximum number of scheduled calls in the queue for a single block.", "", " NOTE:", " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a", " higher limit under `runtime-benchmarks` feature."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c3}}}}, Index: 0x18}, types.PalletMetadataV14{Name: "Bounties", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Bounties", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "BountyCount", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Number of bounty proposals that have been made."}}, types.StorageEntryMetadataV14{Name: "Bounties", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c4}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Bounties that have been made."}}, types.StorageEntryMetadataV14{Name: "BountyDescriptions", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c6}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The description of each bounty."}}, types.StorageEntryMetadataV14{Name: "BountyApprovals", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ae}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Bounty indices that have been approved but not yet funded."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x106}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x54}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "BountyDepositBase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount held on deposit for placing a bounty proposal."}}, types.ConstantMetadataV14{Name: "BountyDepositPayoutDelay", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x87, 0x0, 0x0}, Docs: []types.Text{" The delay period for which a bounty beneficiary need to wait before claim the payout."}}, types.ConstantMetadataV14{Name: "BountyUpdatePeriod", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xc0, 0xee, 0x5, 0x0}, Docs: []types.Text{" Bounty duration in blocks."}}, types.ConstantMetadataV14{Name: "CuratorDepositMultiplier", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b1}}}, Value: types.Bytes{0x20, 0xa1, 0x7, 0x0}, Docs: []types.Text{" The curator deposit is calculated as a percentage of the curator fee.", "", " This deposit has optional upper and lower bounds with `CuratorDepositMax` and", " `CuratorDepositMin`."}}, types.ConstantMetadataV14{Name: "CuratorDepositMax", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x148}}}, Value: types.Bytes{0x1, 0x0, 0x0, 0x10, 0x63, 0x2d, 0x5e, 0xc7, 0x6b, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Maximum amount of funds that should be placed in a deposit for making a proposal."}}, types.ConstantMetadataV14{Name: "CuratorDepositMin", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x148}}}, Value: types.Bytes{0x1, 0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Minimum amount of funds that should be placed in a deposit for making a proposal."}}, types.ConstantMetadataV14{Name: "BountyValueMinimum", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xf4, 0x44, 0x82, 0x91, 0x63, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" Minimum value for a bounty."}}, types.ConstantMetadataV14{Name: "DataDepositPerByte", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xc1, 0x6f, 0xf2, 0x86, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount held on deposit per byte within the tip report reason or bounty description."}}, types.ConstantMetadataV14{Name: "MaximumReasonLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x40, 0x0, 0x0}, Docs: []types.Text{" Maximum acceptable reason length.", "", " Benchmarks depend on this value, be sure to update weights file when changing this value"}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c7}}}}, Index: 0x19}, types.PalletMetadataV14{Name: "Tips", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Tips", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Tips", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c8}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.", " This has the insecure enumerable hash function since the key itself is already", " guaranteed to be a secure hash."}}, types.StorageEntryMetadataV14{Name: "Reasons", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x17}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Simple preimage lookup from the reason's hash to the original data. Again, has an", " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x107}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x55}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MaximumReasonLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x40, 0x0, 0x0}, Docs: []types.Text{" Maximum acceptable reason length.", "", " Benchmarks depend on this value, be sure to update weights file when changing this value"}}, types.ConstantMetadataV14{Name: "DataDepositPerByte", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xc1, 0x6f, 0xf2, 0x86, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount held on deposit per byte within the tip report reason or bounty description."}}, types.ConstantMetadataV14{Name: "TipCountdown", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0xe0, 0x10, 0x0, 0x0}, Docs: []types.Text{" The period for which a tip remains open after is has achieved threshold tippers."}}, types.ConstantMetadataV14{Name: "TipFindersFee", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe7}}}, Value: types.Bytes{0x14}, Docs: []types.Text{" The percent of the final tip which goes to the original reporter of the tip."}}, types.ConstantMetadataV14{Name: "TipReportDepositBase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x64, 0xa7, 0xb3, 0xb6, 0xe0, 0xd, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The non-zero amount held on deposit for placing a tip report."}}, types.ConstantMetadataV14{Name: "MaxTipAmount", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x50, 0xef, 0xe2, 0xd6, 0xe4, 0x1a, 0x1b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum amount for a single tip."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1c9}}}}, Index: 0x1a}, types.PalletMetadataV14{Name: "Mmr", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Mmr", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "RootHash", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Latest MMR Root hash."}}, types.StorageEntryMetadataV14{Name: "NumberOfLeaves", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Current size of the MMR (number of leaves)."}}, types.StorageEntryMetadataV14{Name: "Nodes", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Hashes of the nodes in the MMR.", "", " Note this collection only contains MMR peaks, the inner nodes (and leaves)", " are pruned and only stored in the Offchain DB."}}}}, HasCalls: false, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, HasEvents: false, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x1b}, types.PalletMetadataV14{Name: "DataAvailability", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "DataAvailability", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "NextAppId", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xe}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Last application ID"}}, types.StorageEntryMetadataV14{Name: "AppKeys", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x57}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ca}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Store all application keys."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x108}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x56}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MaxAppKeyLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x40, 0x0, 0x0, 0x0}, Docs: []types.Text{" The max length of application key."}}, types.ConstantMetadataV14{Name: "MaxAppDataLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x0, 0x8, 0x0}, Docs: []types.Text{" The max length of app data."}}, types.ConstantMetadataV14{Name: "MinBlockRows", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x58}}}, Value: types.Bytes{0x80}, Docs: []types.Text{" Minimum number of rows in a block."}}, types.ConstantMetadataV14{Name: "MaxBlockRows", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x58}}}, Value: types.Bytes{0x1, 0x10}, Docs: []types.Text{" Maximum number of rows in a block."}}, types.ConstantMetadataV14{Name: "MinBlockCols", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x59}}}, Value: types.Bytes{0x80}, Docs: []types.Text{" Minimum number of cols in a block."}}, types.ConstantMetadataV14{Name: "MaxBlockCols", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x59}}}, Value: types.Bytes{0x1, 0x4}, Docs: []types.Text{" Maximum number of cols in a block."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cb}}}}, Index: 0x1d}, types.PalletMetadataV14{Name: "Preimage", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Preimage", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "StatusFor", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1cc}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The request status of a given hash."}}, types.StorageEntryMetadataV14{Name: "RequestStatusFor", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ce}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The request status of a given hash."}}, types.StorageEntryMetadataV14{Name: "PreimageFor", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1bc}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d2}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text(nil)}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10a}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5a}}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d3}}}}, Index: 0x21}, types.PalletMetadataV14{Name: "Multisig", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Multisig", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Multisigs", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}, types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d5}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The set of open multisig operations."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10b}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5b}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "DepositBase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xc8, 0x4e, 0x67, 0x6d, 0xc1, 0x1b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The base amount of currency needed to reserve for creating a multisig execution or to", " store a dispatch call for later.", "", " This is held for an additional storage item whose value size is", " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is", " `32 + sizeof(AccountId)` bytes."}}, types.ConstantMetadataV14{Name: "DepositFactor", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xc5, 0x2e, 0xbc, 0xa2, 0xb1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount of currency needed per unit threshold when creating a multisig execution.", "", " This is held for adding 32 bytes more into a pre-existing storage value."}}, types.ConstantMetadataV14{Name: "MaxSignatories", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x64, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum amount of signatories allowed in the multisig."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d6}}}}, Index: 0x22}, types.PalletMetadataV14{Name: "VoterList", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "VoterList", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "ListNodes", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d7}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A single node, within some bag.", "", " Nodes store links forward and back within their respective bags."}}, types.StorageEntryMetadataV14{Name: "CounterForListNodes", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "ListBags", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d8}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A bag stored in storage.", "", " Stores a `Bag` struct, which stores head and tail pointers to itself."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10d}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5d}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "BagThresholds", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1d9}}}, Value: types.Bytes{0x21, 0x3, 0x0, 0x40, 0x7a, 0x10, 0xf3, 0x5a, 0x0, 0x0, 0x6a, 0x70, 0xcc, 0xd4, 0xa9, 0x60, 0x0, 0x0, 0x9e, 0xf3, 0x39, 0x7f, 0xbc, 0x66, 0x0, 0x0, 0xa9, 0x7, 0xcc, 0xd5, 0x30, 0x6d, 0x0, 0x0, 0x3d, 0x9a, 0x67, 0xfb, 0xc, 0x74, 0x0, 0x0, 0xa9, 0xbf, 0xa2, 0x75, 0x57, 0x7b, 0x0, 0x0, 0xa6, 0xfd, 0xf7, 0x32, 0x17, 0x83, 0x0, 0x0, 0x3, 0x4f, 0x5d, 0x91, 0x53, 0x8b, 0x0, 0x0, 0x13, 0x24, 0x45, 0x65, 0x14, 0x94, 0x0, 0x0, 0x78, 0x8, 0x10, 0x1, 0x62, 0x9d, 0x0, 0x0, 0x3, 0x2, 0xf6, 0x3c, 0x45, 0xa7, 0x0, 0x0, 0x39, 0x2e, 0x6f, 0x7f, 0xc7, 0xb1, 0x0, 0x0, 0xf5, 0x9c, 0x23, 0xc6, 0xf2, 0xbc, 0x0, 0x0, 0x4a, 0xe7, 0x6a, 0xaf, 0xd1, 0xc8, 0x0, 0x0, 0x59, 0x8a, 0x64, 0x84, 0x6f, 0xd5, 0x0, 0x0, 0x12, 0x9f, 0xb2, 0x43, 0xd8, 0xe2, 0x0, 0x0, 0x3f, 0x22, 0xe1, 0xac, 0x18, 0xf1, 0x0, 0x0, 0x33, 0xa4, 0x84, 0x4c, 0x3e, 0x0, 0x1, 0x0, 0xe2, 0xe5, 0x1b, 0x89, 0x57, 0x10, 0x1, 0x0, 0x76, 0xa2, 0xc0, 0xb0, 0x73, 0x21, 0x1, 0x0, 0x67, 0x89, 0xb4, 0x7, 0xa3, 0x33, 0x1, 0x0, 0x79, 0x3e, 0xd8, 0xd7, 0xf6, 0x46, 0x1, 0x0, 0x78, 0x13, 0x1b, 0x81, 0x81, 0x5b, 0x1, 0x0, 0xc, 0x1c, 0xf3, 0x8a, 0x56, 0x71, 0x1, 0x0, 0x44, 0x37, 0xee, 0xb6, 0x8a, 0x88, 0x1, 0x0, 0x9e, 0xb5, 0x6d, 0x14, 0x34, 0xa1, 0x1, 0x0, 0x33, 0x5e, 0x9f, 0x15, 0x6a, 0xbb, 0x1, 0x0, 0x67, 0xc3, 0xc7, 0xa5, 0x45, 0xd7, 0x1, 0x0, 0x32, 0x18, 0xf3, 0x40, 0xe1, 0xf4, 0x1, 0x0, 0xde, 0xb, 0x23, 0xd, 0x59, 0x14, 0x2, 0x0, 0x69, 0x9c, 0x11, 0xf5, 0xca, 0x35, 0x2, 0x0, 0xad, 0x50, 0xa2, 0xc4, 0x56, 0x59, 0x2, 0x0, 0x9a, 0xe4, 0x1c, 0x47, 0x1e, 0x7f, 0x2, 0x0, 0xd0, 0x24, 0x4e, 0x67, 0x45, 0xa7, 0x2, 0x0, 0xf9, 0x84, 0xad, 0x51, 0xf2, 0xd1, 0x2, 0x0, 0xac, 0xe7, 0xa7, 0x98, 0x4d, 0xff, 0x2, 0x0, 0xa1, 0x18, 0x32, 0x5b, 0x82, 0x2f, 0x3, 0x0, 0xff, 0xa4, 0xc7, 0x6d, 0xbe, 0x62, 0x3, 0x0, 0x58, 0xb, 0xfd, 0x85, 0x32, 0x99, 0x3, 0x0, 0xa9, 0xaf, 0xce, 0x68, 0x12, 0xd3, 0x3, 0x0, 0x10, 0x9a, 0xd8, 0x1b, 0x95, 0x10, 0x4, 0x0, 0xd9, 0xca, 0xa5, 0x19, 0xf5, 0x51, 0x4, 0x0, 0x38, 0xdf, 0x48, 0x89, 0x70, 0x97, 0x4, 0x0, 0xbe, 0xe1, 0x72, 0x79, 0x49, 0xe1, 0x4, 0x0, 0xcc, 0x73, 0x40, 0x1f, 0xc6, 0x2f, 0x5, 0x0, 0xb3, 0x4, 0xf9, 0x18, 0x31, 0x83, 0x5, 0x0, 0x82, 0x8b, 0xff, 0xb4, 0xd9, 0xdb, 0x5, 0x0, 0x12, 0x35, 0x38, 0x3d, 0x14, 0x3a, 0x6, 0x0, 0xa5, 0xb4, 0x2a, 0x47, 0x3a, 0x9e, 0x6, 0x0, 0x36, 0x66, 0x2d, 0x9, 0xab, 0x8, 0x7, 0x0, 0xf7, 0x3a, 0xea, 0xb4, 0xcb, 0x79, 0x7, 0x0, 0xb8, 0x7e, 0x93, 0xd7, 0x7, 0xf2, 0x7, 0x0, 0xff, 0xec, 0x23, 0xc0, 0xd1, 0x71, 0x8, 0x0, 0xb8, 0x4b, 0xb, 0xec, 0xa2, 0xf9, 0x8, 0x0, 0xc9, 0xdc, 0xae, 0x7a, 0xfc, 0x89, 0x9, 0x0, 0x91, 0x75, 0x2b, 0xa8, 0x67, 0x23, 0xa, 0x0, 0x64, 0xf1, 0xcd, 0x4f, 0x76, 0xc6, 0xa, 0x0, 0x36, 0x9, 0xbe, 0x76, 0xc3, 0x73, 0xb, 0x0, 0x78, 0x65, 0x5f, 0xdf, 0xf3, 0x2b, 0xc, 0x0, 0xa4, 0x7, 0xf5, 0xa5, 0xb6, 0xef, 0xc, 0x0, 0x52, 0xf6, 0x1b, 0xe7, 0xc5, 0xbf, 0xd, 0x0, 0xda, 0x71, 0xbb, 0x70, 0xe7, 0x9c, 0xe, 0x0, 0xd, 0xe9, 0x12, 0x7e, 0xed, 0x87, 0xf, 0x0, 0x14, 0x77, 0x98, 0x7f, 0xb7, 0x81, 0x10, 0x0, 0xeb, 0xee, 0x65, 0xef, 0x32, 0x8b, 0x11, 0x0, 0x12, 0x69, 0xfe, 0x32, 0x5c, 0xa5, 0x12, 0x0, 0x33, 0xf8, 0x42, 0x8b, 0x3f, 0xd1, 0x13, 0x0, 0x8b, 0xa5, 0x7a, 0x13, 0xfa, 0xf, 0x15, 0x0, 0x1b, 0x2b, 0x60, 0xd0, 0xba, 0x62, 0x16, 0x0, 0xd, 0x1d, 0x37, 0xd0, 0xc3, 0xca, 0x17, 0x0, 0x6c, 0x64, 0xfa, 0x5c, 0x6b, 0x49, 0x19, 0x0, 0x26, 0x22, 0xc7, 0x41, 0x1d, 0xe0, 0x1a, 0x0, 0x4, 0x5b, 0xb9, 0x24, 0x5c, 0x90, 0x1c, 0x0, 0x23, 0x3d, 0x83, 0xf6, 0xc2, 0x5b, 0x1e, 0x0, 0xc8, 0x77, 0x1c, 0x79, 0x6, 0x44, 0x20, 0x0, 0x30, 0x13, 0xfd, 0xde, 0xf6, 0x4a, 0x22, 0x0, 0xaa, 0x8b, 0x6e, 0x84, 0x81, 0x72, 0x24, 0x0, 0x82, 0xc0, 0x96, 0xc4, 0xb2, 0xbc, 0x26, 0x0, 0x16, 0xa3, 0xfa, 0xeb, 0xb7, 0x2b, 0x29, 0x0, 0x82, 0x96, 0x52, 0x4a, 0xe1, 0xc1, 0x2b, 0x0, 0xa6, 0x36, 0xa8, 0x65, 0xa4, 0x81, 0x2e, 0x0, 0xd0, 0xe2, 0xd4, 0x50, 0x9e, 0x6d, 0x31, 0x0, 0x9c, 0xa, 0x9a, 0x27, 0x96, 0x88, 0x34, 0x0, 0xe4, 0xfa, 0xaf, 0xb2, 0x7f, 0xd5, 0x37, 0x0, 0xe6, 0xe6, 0x4d, 0x36, 0x7e, 0x57, 0x3b, 0x0, 0xe, 0x4b, 0xd6, 0x6d, 0xe7, 0x11, 0x3f, 0x0, 0x88, 0xb1, 0x7d, 0xb7, 0x46, 0x8, 0x43, 0x0, 0xb0, 0x7d, 0xef, 0x72, 0x60, 0x3e, 0x47, 0x0, 0x34, 0xde, 0x24, 0x96, 0x35, 0xb8, 0x4b, 0x0, 0xd4, 0x8b, 0xd5, 0x7b, 0x7, 0x7a, 0x50, 0x0, 0xd0, 0xbd, 0x20, 0xef, 0x5b, 0x88, 0x55, 0x0, 0xb8, 0xf0, 0x46, 0x78, 0x1, 0xe8, 0x5a, 0x0, 0x10, 0xf8, 0x8a, 0xee, 0x13, 0x9e, 0x60, 0x0, 0x38, 0x92, 0x92, 0x53, 0x1, 0xb0, 0x66, 0x0, 0x9c, 0x95, 0xe4, 0xfc, 0x8e, 0x23, 0x6d, 0x0, 0xb4, 0x12, 0x6d, 0x10, 0xdf, 0xfe, 0x73, 0x0, 0x28, 0xb4, 0x3e, 0x59, 0x76, 0x48, 0x7b, 0x0, 0xa0, 0x8a, 0x1c, 0x7a, 0x42, 0x7, 0x83, 0x0, 0xb0, 0x9a, 0xb0, 0x83, 0xa0, 0x42, 0x8b, 0x0, 0x28, 0x46, 0xb2, 0xf4, 0x63, 0x2, 0x94, 0x0, 0xc8, 0x61, 0xa4, 0x2a, 0xde, 0x4e, 0x9d, 0x0, 0x50, 0xd2, 0x3d, 0x4a, 0xe6, 0x30, 0xa7, 0x0, 0x80, 0x51, 0x1, 0xa7, 0xe1, 0xb1, 0xb1, 0x0, 0x38, 0xe5, 0x1, 0xb2, 0xcc, 0xdb, 0xbc, 0x0, 0x20, 0x16, 0x52, 0x78, 0x44, 0xb9, 0xc8, 0x0, 0x38, 0x89, 0x24, 0xba, 0x90, 0x55, 0xd5, 0x0, 0x70, 0xca, 0x35, 0xa4, 0xae, 0xbc, 0xe2, 0x0, 0x80, 0x5f, 0xb1, 0x35, 0x5c, 0xfb, 0xf0, 0x0, 0x80, 0x35, 0x68, 0x5d, 0x24, 0x1f, 0x0, 0x1, 0xa0, 0xc3, 0xdc, 0xd9, 0x6b, 0x36, 0x10, 0x1, 0xd0, 0x78, 0x62, 0xe8, 0x7e, 0x50, 0x21, 0x1, 0x60, 0xe8, 0x52, 0xd0, 0x9f, 0x7d, 0x33, 0x1, 0x90, 0x66, 0x2c, 0x58, 0x16, 0xcf, 0x46, 0x1, 0x10, 0x27, 0x4c, 0x33, 0x40, 0x57, 0x5b, 0x1, 0x80, 0x4b, 0xe2, 0x77, 0xa2, 0x29, 0x71, 0x1, 0x30, 0x82, 0xb9, 0x2d, 0xfc, 0x5a, 0x88, 0x1, 0x80, 0xd2, 0x76, 0x7, 0x5a, 0x1, 0xa1, 0x1, 0xb0, 0xf5, 0x11, 0x59, 0x2b, 0x34, 0xbb, 0x1, 0x40, 0x31, 0x74, 0x5f, 0x58, 0xc, 0xd7, 0x1, 0x80, 0x2f, 0x6c, 0xee, 0x59, 0xa4, 0xf4, 0x1, 0x40, 0xff, 0x79, 0x9b, 0x52, 0x18, 0x14, 0x2, 0x60, 0x75, 0x60, 0x7d, 0x29, 0x86, 0x35, 0x2, 0x60, 0xfd, 0xe9, 0x99, 0xa6, 0xd, 0x59, 0x2, 0x0, 0xe5, 0xe7, 0x1c, 0x91, 0xd0, 0x7e, 0x2, 0xc0, 0xdf, 0x25, 0x75, 0xcf, 0xf2, 0xa6, 0x2, 0xa0, 0x7f, 0xd9, 0x75, 0x89, 0x9a, 0xd1, 0x2, 0xa0, 0x67, 0x0, 0x9d, 0x4c, 0xf0, 0xfe, 0x2, 0x20, 0xdc, 0x29, 0xa1, 0x32, 0x1f, 0x2f, 0x3, 0x20, 0xff, 0x52, 0x6b, 0xa, 0x55, 0x62, 0x3, 0x80, 0x88, 0xca, 0xa3, 0x83, 0xc2, 0x98, 0x3, 0xe0, 0x56, 0x83, 0xfb, 0x5c, 0x9b, 0xd2, 0x3, 0x40, 0x1d, 0xd7, 0x5d, 0x95, 0x16, 0x10, 0x4, 0x0, 0x31, 0x7e, 0x39, 0xa0, 0x6e, 0x51, 0x4, 0xc0, 0xb0, 0x71, 0x12, 0x9d, 0xe1, 0x96, 0x4, 0x80, 0xb4, 0x8c, 0x91, 0x92, 0xb1, 0xe0, 0x4, 0x80, 0xe8, 0x12, 0x4a, 0xad, 0x24, 0x2f, 0x5, 0xc0, 0x7, 0xca, 0x70, 0x82, 0x85, 0x82, 0x5, 0x0, 0x7c, 0x13, 0xc4, 0x56, 0x23, 0xdb, 0x5, 0x40, 0x83, 0x6f, 0xe8, 0x69, 0x52, 0x39, 0x6, 0xc0, 0x70, 0xf, 0x81, 0x46, 0x6c, 0x9d, 0x6, 0x40, 0xf0, 0x9c, 0x50, 0x17, 0xd0, 0x7, 0x7, 0xc0, 0xe6, 0x24, 0xb3, 0x1, 0xe3, 0x78, 0x7, 0xc0, 0x33, 0x2a, 0xc7, 0x85, 0x10, 0xf1, 0x7, 0x80, 0x7, 0x4c, 0xa1, 0xe4, 0xca, 0x70, 0x8, 0x0, 0xd5, 0xa9, 0xeb, 0x8c, 0x8b, 0xf8, 0x8, 0x0, 0xa8, 0x49, 0x58, 0x8e, 0xd3, 0x88, 0x9, 0x0, 0x80, 0x42, 0x54, 0x14, 0x2c, 0x22, 0xa, 0x80, 0xa2, 0x51, 0x70, 0xe8, 0x26, 0xc5, 0xa, 0x0, 0xe8, 0xd5, 0xfa, 0xfc, 0x5e, 0x72, 0xb, 0x80, 0x1d, 0xf6, 0x4e, 0x0, 0x79, 0x2a, 0xc, 0x80, 0xd4, 0xfe, 0x64, 0xf9, 0x23, 0xee, 0xc, 0x0, 0x6d, 0xd0, 0x38, 0xee, 0x19, 0xbe, 0xd, 0x0, 0x1e, 0x90, 0xa4, 0x94, 0x20, 0x9b, 0xe, 0x0, 0x10, 0xbf, 0x57, 0xe, 0xa, 0x86, 0xf, 0x0, 0xda, 0x6a, 0x9d, 0xb0, 0xb5, 0x7f, 0x10, 0x0, 0xbf, 0x64, 0xaf, 0xd8, 0x10, 0x89, 0x11, 0x0, 0xbb, 0x5b, 0x60, 0xcd, 0x17, 0xa3, 0x12, 0x0, 0xf9, 0x63, 0xf3, 0xae, 0xd6, 0xce, 0x13, 0x0, 0xd5, 0xf0, 0x4, 0x76, 0x6a, 0xd, 0x15, 0x0, 0xe0, 0x99, 0x77, 0x2, 0x2, 0x60, 0x16, 0x0, 0x10, 0x3d, 0x66, 0x3b, 0xdf, 0xc7, 0x17, 0x0, 0xde, 0x3e, 0x2d, 0x41, 0x58, 0x46, 0x19, 0x0, 0xec, 0xdb, 0xad, 0xb2, 0xd8, 0xdc, 0x1a, 0x0, 0x45, 0xc7, 0x0, 0x7, 0xe3, 0x8c, 0x1c, 0x0, 0xb8, 0xbd, 0xe0, 0xfc, 0x11, 0x58, 0x1e, 0x0, 0xba, 0x5c, 0x2a, 0x21, 0x1a, 0x40, 0x20, 0x0, 0x40, 0x7d, 0xe4, 0x6d, 0xcb, 0x46, 0x22, 0x0, 0xde, 0xa5, 0x5b, 0x3, 0x13, 0x6e, 0x24, 0x0, 0xaa, 0xf1, 0xf3, 0xfc, 0xfc, 0xb7, 0x26, 0x0, 0x14, 0x22, 0x6f, 0x63, 0xb6, 0x26, 0x29, 0x0, 0x64, 0x92, 0x80, 0x3e, 0x8f, 0xbc, 0x2b, 0x0, 0x84, 0x86, 0xa6, 0xc7, 0xfc, 0x7b, 0x2e, 0x0, 0x2c, 0xf0, 0x5f, 0xc0, 0x9b, 0x67, 0x31, 0x0, 0xda, 0x63, 0xf7, 0xed, 0x32, 0x82, 0x34, 0x0, 0xf0, 0xb1, 0x3f, 0xbd, 0xb5, 0xce, 0x37, 0x0, 0xf2, 0x91, 0xc4, 0x10, 0x47, 0x50, 0x3b, 0x0, 0x42, 0x2a, 0x1a, 0x3c, 0x3c, 0xa, 0x3f, 0x0, 0x2c, 0x24, 0x21, 0x2f, 0x20, 0x0, 0x43, 0x0, 0xac, 0x93, 0x42, 0xd4, 0xb6, 0x35, 0x47, 0x0, 0xcc, 0x6e, 0xd7, 0xa4, 0x0, 0xaf, 0x4b, 0x0, 0xc4, 0xd0, 0x22, 0x77, 0x3e, 0x70, 0x50, 0x0, 0x20, 0x1, 0x7d, 0x89, 0xf5, 0x7d, 0x55, 0x0, 0xf8, 0x63, 0x87, 0xce, 0xf3, 0xdc, 0x5a, 0x0, 0x8c, 0x4c, 0x7f, 0x7e, 0x54, 0x92, 0x60, 0x0, 0x20, 0x62, 0x7, 0xf2, 0x84, 0xa3, 0x66, 0x0, 0xcc, 0x1e, 0x5, 0xcb, 0x49, 0x16, 0x6d, 0x0, 0xb4, 0x2a, 0x7a, 0x70, 0xc4, 0xf0, 0x73, 0x0, 0xd4, 0x3a, 0x90, 0xe2, 0x78, 0x39, 0x7b, 0x0, 0x38, 0xf4, 0x61, 0xec, 0x53, 0xf7, 0x82, 0x0, 0xa0, 0x72, 0x64, 0xb9, 0xb1, 0x31, 0x8b, 0x0, 0x48, 0xc9, 0xb3, 0xd4, 0x64, 0xf0, 0x93, 0x0, 0x0, 0x7f, 0xe9, 0x98, 0xbd, 0x3b, 0x9d, 0x0, 0x10, 0x5, 0x8f, 0x17, 0x92, 0x1c, 0xa7, 0x0, 0x0, 0xdf, 0xaf, 0x7f, 0x46, 0x9c, 0xb1, 0x0, 0xe8, 0xc, 0x88, 0xb, 0xd6, 0xc4, 0xbc, 0x0, 0x58, 0xbd, 0xcb, 0x7d, 0xdc, 0xa0, 0xc8, 0x0, 0x38, 0xd1, 0x8d, 0x37, 0xa0, 0x3b, 0xd5, 0x0, 0x30, 0xd5, 0x5b, 0xf0, 0x1c, 0xa1, 0xe2, 0x0, 0x70, 0x4a, 0xc0, 0x1a, 0xf, 0xde, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff}, Docs: []types.Text{" The list of thresholds separating the various bags.", "", " Ids are separated into unsorted bags according to their score. This specifies the", " thresholds separating the bags. An id's bag is the largest bag for which the id's score", " is less than or equal to its upper threshold.", "", " When ids are iterated, higher bags are iterated completely before lower bags. This means", " that iteration is _semi-sorted_: ids of higher score tend to come before ids of lower", " score, but peer ids within a particular bag are sorted in insertion order.", "", " # Expressing the constant", "", " This constant must be sorted in strictly increasing order. Duplicate items are not", " permitted.", "", " There is an implied upper limit of `Score::MAX`; that value does not need to be", " specified within the bag. For any two threshold lists, if one ends with", " `Score::MAX`, the other one does not, and they are otherwise equal, the two", " lists will behave identically.", "", " # Calculation", "", " It is recommended to generate the set of thresholds in a geometric series, such that", " there exists some constant ratio such that `threshold[k + 1] == (threshold[k] *", " constant_ratio).max(threshold[k] + 1)` for all `k`.", "", " The helpers in the `/utils/frame/generate-bags` module can simplify this calculation.", "", " # Examples", "", " - If `BagThresholds::get().is_empty()`, then all ids are put into the same bag, and", "   iteration is strictly in insertion order.", " - If `BagThresholds::get().len() == 64`, and the thresholds are determined according to", "   the procedure given above, then the constant ratio is equal to 2.", " - If `BagThresholds::get().len() == 200`, and the thresholds are determined according to", "   the procedure given above, then the constant ratio is approximately equal to 1.248.", " - If the threshold list begins `[1, 2, 3, ...]`, then an id with score 0 or 1 will fall", "   into bag 0, an id with score 2 will fall into bag 1, etc.", "", " # Migration", "", " In the event that this list ever changes, a copy of the old bags list must be retained.", " With that `List::migrate` can be called, which will perform the appropriate migration."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1da}}}}, Index: 0x23}, types.PalletMetadataV14{Name: "NominationPools", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "NominationPools", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "TotalValueLocked", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The sum of funds across all pools.", "", " This might be lower but never higher than the sum of `total_balance` of all [`PoolMembers`]", " because calling `pool_withdraw_unbonded` might decrease the total stake of the pool's", " `bonded_account` without adjusting the pallet-internal `UnbondingPool`'s."}}, types.StorageEntryMetadataV14{Name: "MinJoinBond", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Minimum amount to bond to join a pool."}}, types.StorageEntryMetadataV14{Name: "MinCreateBond", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Minimum bond required to create a pool.", "", " This is the amount that the depositor must put as their initial stake in the pool, as an", " indication of \"skin in the game\".", "", " This is the value that will always exist in the staking ledger of the pool bonded account", " while all other accounts leave."}}, types.StorageEntryMetadataV14{Name: "MaxPools", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Maximum number of nomination pools that can exist. If `None`, then an unbounded number of", " pools can exist."}}, types.StorageEntryMetadataV14{Name: "MaxPoolMembers", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Maximum number of members that can exist in the system. If `None`, then the count", " members are not bound on a system wide basis."}}, types.StorageEntryMetadataV14{Name: "MaxPoolMembersPerPool", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Maximum number of members that may belong to pool. If `None`, then the count of", " members is not bound on a per pool basis."}}, types.StorageEntryMetadataV14{Name: "GlobalMaxCommission", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x38}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The maximum commission that can be charged by a pool. Used on commission payouts to bound", " pool commissions that are > `GlobalMaxCommission`, necessary if a future", " `GlobalMaxCommission` is lower than some current pool commissions."}}, types.StorageEntryMetadataV14{Name: "PoolMembers", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1dc}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Active members.", "", " TWOX-NOTE: SAFE since `AccountId` is a secure hash."}}, types.StorageEntryMetadataV14{Name: "CounterForPoolMembers", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "BondedPools", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e1}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Storage for bonded pools."}}, types.StorageEntryMetadataV14{Name: "CounterForBondedPools", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "RewardPools", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e6}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Reward pools. This is where there rewards for each pool accumulate. When a members payout is", " claimed, the balance comes out fo the reward pool. Keyed by the bonded pools account."}}, types.StorageEntryMetadataV14{Name: "CounterForRewardPools", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "SubPoolsStorage", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1e7}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Groups of unbonding pools. Each group of unbonding pools belongs to a", " bonded pool, hence the name sub-pools. Keyed by the bonded pools account."}}, types.StorageEntryMetadataV14{Name: "CounterForSubPoolsStorage", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "Metadata", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x75}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Metadata for the pool."}}, types.StorageEntryMetadataV14{Name: "CounterForMetadata", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "LastPoolId", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Ever increasing number of all pools created so far."}}, types.StorageEntryMetadataV14{Name: "ReversePoolIdLookup", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A reverse lookup from the pool's account id to its id.", "", " This is only used for slashing. In all other instances, the pool id is used, and the", " accounts are deterministically derived from it."}}, types.StorageEntryMetadataV14{Name: "CounterForReversePoolIdLookup", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{"Counter for the related counted storage map"}}, types.StorageEntryMetadataV14{Name: "ClaimPermissions", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x114}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Map from a pool member account to their opted claim permission."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x10e}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x5e}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "PalletId", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b2}}}, Value: types.Bytes{0x70, 0x79, 0x2f, 0x6e, 0x6f, 0x70, 0x6c, 0x73}, Docs: []types.Text{" The nomination pool's pallet id."}}, types.ConstantMetadataV14{Name: "MaxPointsToBalance", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2}}}, Value: types.Bytes{0xa}, Docs: []types.Text{" The maximum pool points-to-balance ratio that an `open` pool can have.", "", " This is important in the event slashing takes place and the pool's points-to-balance", " ratio becomes disproportional.", "", " Moreover, this relates to the `RewardCounter` type as well, as the arithmetic operations", " are a function of number of points, and by setting this value to e.g. 10, you ensure", " that the total number of points in the system are at most 10 times the total_issuance of", " the chain, in the absolute worse case.", "", " For a value of 10, the threshold would be a pool points-to-balance ratio of 10:1.", " Such a scenario would also be the equivalent of the pool being 90% slashed."}}, types.ConstantMetadataV14{Name: "MaxUnbonding", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x8, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of simultaneous unbonding chunks that can exist per member."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ed}}}}, Index: 0x24}, types.PalletMetadataV14{Name: "Identity", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Identity", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "IdentityOf", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ef}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Information that is pertinent to identify the entity behind an account. First item is the", " registration, second is the account's primary username.", "", " TWOX-NOTE: OK ― `AccountId` is a secure hash."}}, types.StorageEntryMetadataV14{Name: "SuperOf", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x139}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The super-identity of an alternative \"sub\" identity together with its name, within that", " context. If the account is not some other account's sub-identity, then just `None`."}}, types.StorageEntryMetadataV14{Name: "SubsOf", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f5}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Alternative \"sub\" identities of this account.", "", " The first item is the deposit, the second is a vector of the accounts.", "", " TWOX-NOTE: OK ― `AccountId` is a secure hash."}}, types.StorageEntryMetadataV14{Name: "Registrars", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1f7}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The set of registrars. Not expected to get very big as can only be added through a", " special origin (likely a council motion).", "", " The index into this can be cast to `RegistrarIndex` to get a valid value."}}, types.StorageEntryMetadataV14{Name: "UsernameAuthorities", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fb}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" A map of the accounts who are authorized to grant usernames."}}, types.StorageEntryMetadataV14{Name: "AccountOfUsername", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Reverse lookup from `username` to the `AccountId` that has registered it. The value should", " be a key in the `IdentityOf` map, but it may not if the user has cleared their identity.", "", " Multiple usernames may map to the same `AccountId`, but `IdentityOf` will only map to one", " primary username."}}, types.StorageEntryMetadataV14{Name: "PendingUsernames", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x66}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x196}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Usernames that an authority has granted, but that the account controller has not confirmed", " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature", " because they are a pure proxy, multisig, etc. In order to confirm it, they should call", " [`Call::accept_username`].", "", " First tuple item is the account and second is the acceptance deadline."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x115}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x65}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "BasicDeposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xe8, 0x89, 0x4, 0x23, 0xc7, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount held on deposit for a registered identity."}}, types.ConstantMetadataV14{Name: "ByteDeposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x60, 0xde, 0xfb, 0x74, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount held on deposit per encoded byte for a registered identity."}}, types.ConstantMetadataV14{Name: "SubAccountDeposit", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xc8, 0x4e, 0x67, 0x6d, 0xc1, 0x1b, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount held on deposit for a registered subaccount. This should account for the fact", " that one storage item's value will increase by the size of an account ID, and there will", " be another trie item whose value is the size of an account ID plus 32 bytes."}}, types.ConstantMetadataV14{Name: "MaxSubAccounts", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x64, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum number of sub-accounts allowed per identified account."}}, types.ConstantMetadataV14{Name: "MaxRegistrars", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x14, 0x0, 0x0, 0x0}, Docs: []types.Text{" Maxmimum number of registrars allowed in the system. Needed to bound the complexity", " of, e.g., updating judgements."}}, types.ConstantMetadataV14{Name: "PendingUsernameExpiration", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x20, 0x76, 0x0, 0x0}, Docs: []types.Text{" The number of blocks within which a username grant must be accepted."}}, types.ConstantMetadataV14{Name: "MaxSuffixLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x7, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum length of a suffix."}}, types.ConstantMetadataV14{Name: "MaxUsernameLength", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x20, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum length of a username, including its suffix and any system-added delimiters."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fd}}}}, Index: 0x25}, types.PalletMetadataV14{Name: "Mandate", HasStorage: false, Storage: types.StorageMetadataV14{Prefix: "", Items: []types.StorageEntryMetadataV14(nil)}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x13f}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x67}}}}, Constants: []types.ConstantMetadataV14(nil), HasErrors: false, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}, Index: 0x26}, types.PalletMetadataV14{Name: "Vector", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Vector", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Head", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Storage for a head updates."}}, types.StorageEntryMetadataV14{Name: "Headers", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Maps from a slot to a block header root."}}, types.StorageEntryMetadataV14{Name: "Timestamps", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Maps slot to the timestamp of when the headers mapping was updated with slot as a key"}}, types.StorageEntryMetadataV14{Name: "ExecutionStateRoots", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Maps from a slot to the current finalized ethereum execution state root."}}, types.StorageEntryMetadataV14{Name: "SyncCommitteePoseidons", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x69}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Maps from a period to the poseidon commitment for the sync committee."}}, types.StorageEntryMetadataV14{Name: "ConfigurationStorage", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14d}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Storage for a config of finality threshold and slots per period."}}, types.StorageEntryMetadataV14{Name: "MessageStatus", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1fe}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Maps status of the message to the message root."}}, types.StorageEntryMetadataV14{Name: "Broadcasters", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Mapping between source chainId and the address of the broadcaster on that chain."}}, types.StorageEntryMetadataV14{Name: "SourceChainFrozen", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: true}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x28}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Flags source chain to be frozen."}}, types.StorageEntryMetadataV14{Name: "WhitelistedDomains", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14c}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" List of permitted domains."}}, types.StorageEntryMetadataV14{Name: "FunctionIds", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6d}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The storage for the step function identifier and the rotate function identifier.", " Step function id is used to distinguish step-related functionality within the fulfill_call function.", " Rotate function id is used to handle rotate-related functionality within the fulfill_call function.", " When the provided function_id matches the step/rotate function identifier, specific logic related to step/rotate functions is executed.", " The order of storage is (step_function_id, rotate_function_id)"}}, types.StorageEntryMetadataV14{Name: "StepVerificationKey", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6f}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Step verification key storage"}}, types.StorageEntryMetadataV14{Name: "RotateVerificationKey", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6f}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" Rotate verification key storage"}}, types.StorageEntryMetadataV14{Name: "GenesisValidatorRoot", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Genesis validator root, used to check initialization"}}, types.StorageEntryMetadataV14{Name: "GenesisTimestamp", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Genesis timestamp, used to check initialization"}}, types.StorageEntryMetadataV14{Name: "SecondsPerSlot", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Seconds per slot, used to check initialization"}}, types.StorageEntryMetadataV14{Name: "SourceChainId", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: true, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, IsMap: false, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10(nil), Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" Source chain id, used to check initialization"}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x140}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x68}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MessageMappingStorageIndex", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0xb}}}, Value: types.Bytes{0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The index of the `messages` mapping in contract.", " This is mandatory when calling execute messages via storage proofs."}}, types.ConstantMetadataV14{Name: "PalletId", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1b2}}}, Value: types.Bytes{0x61, 0x76, 0x6c, 0x2f, 0x62, 0x72, 0x64, 0x67}, Docs: []types.Text{" Bridge's pallet id, used for deriving its sovereign account ID."}}, types.ConstantMetadataV14{Name: "AvailDomain", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x1, 0x0, 0x0, 0x0}, Docs: []types.Text{" Unique value associated with Avail Network. Used to distinguish messages between Avail and non-Avail networks."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x1ff}}}}, Index: 0x27}, types.PalletMetadataV14{Name: "Proxy", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "Proxy", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "Proxies", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x200}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The set of account proxies. Maps the account which has delegated to the accounts", " which are being delegated to, together with the amount held on deposit."}}, types.StorageEntryMetadataV14{Name: "Announcements", Modifier: types.StorageFunctionModifierV0{IsOptional: false, IsDefault: true, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: false, IsTwox128: false, IsTwox256: false, IsTwox64Concat: true, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x204}}}}}, Fallback: types.Bytes{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Documentation: []types.Text{" The announcements made by the proxy (key)."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x14e}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x71}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "ProxyDepositBase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xe8, 0x89, 0x4, 0x23, 0xc7, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The base amount of currency needed to reserve for creating a proxy.", "", " This is held for an additional storage item whose value size is", " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."}}, types.ConstantMetadataV14{Name: "ProxyDepositFactor", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0x2c, 0xf6, 0x1a, 0x24, 0xa2, 0x29, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount of currency needed per proxy added.", "", " This is held for adding 32 bytes plus an instance of `ProxyType` more into a", " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take", " into account `32 + proxy_type.encode().len()` bytes of data."}}, types.ConstantMetadataV14{Name: "MaxProxies", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x20, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum amount of proxies allowed for a single account."}}, types.ConstantMetadataV14{Name: "MaxPending", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x20, 0x0, 0x0, 0x0}, Docs: []types.Text{" The maximum amount of time-delayed announcements that are allowed to be pending."}}, types.ConstantMetadataV14{Name: "AnnouncementDepositBase", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xe8, 0x89, 0x4, 0x23, 0xc7, 0x8a, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The base amount of currency needed to reserve for creating an announcement.", "", " This is held when a new storage item holding a `Balance` is created (typically 16", " bytes)."}}, types.ConstantMetadataV14{Name: "AnnouncementDepositFactor", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x6}}}, Value: types.Bytes{0x0, 0x0, 0xf4, 0x44, 0x82, 0x91, 0x63, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, Docs: []types.Text{" The amount of currency needed per announcement made.", "", " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)", " into a pre-existing storage value."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x208}}}}, Index: 0x28}, types.PalletMetadataV14{Name: "TxPause", HasStorage: true, Storage: types.StorageMetadataV14{Prefix: "TxPause", Items: []types.StorageEntryMetadataV14{types.StorageEntryMetadataV14{Name: "PausedCalls", Modifier: types.StorageFunctionModifierV0{IsOptional: true, IsDefault: false, IsRequired: false}, Type: types.StorageEntryTypeV14{IsPlainType: false, AsPlainType: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat(nil)}}, IsMap: true, AsMap: types.MapTypeV14{Hashers: []types.StorageHasherV10{types.StorageHasherV10{IsBlake2_128: false, IsBlake2_256: false, IsBlake2_128Concat: true, IsTwox128: false, IsTwox256: false, IsTwox64Concat: false, IsIdentity: false}}, Key: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x74}}}, Value: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}}, Fallback: types.Bytes{0x0}, Documentation: []types.Text{" The set of calls that are explicitly paused."}}}}, HasCalls: true, Calls: types.FunctionMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x150}}}}, HasEvents: true, Events: types.EventMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x73}}}}, Constants: []types.ConstantMetadataV14{types.ConstantMetadataV14{Name: "MaxNameLen", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}, Value: types.Bytes{0x0, 0x1, 0x0, 0x0}, Docs: []types.Text{" Maximum length for pallet name and call name SCALE encoded string names.", "", " TOO LONG NAMES WILL BE TREATED AS PAUSED."}}}, HasErrors: true, Errors: types.ErrorMetadataV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x209}}}}, Index: 0x29}}, Extrinsic: types.ExtrinsicV14{Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20a}}}, Version: 0x4, SignedExtensions: []types.SignedExtensionMetadataV14{types.SignedExtensionMetadataV14{Identifier: "CheckNonZeroSender", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20c}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}, types.SignedExtensionMetadataV14{Identifier: "CheckSpecVersion", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20d}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.SignedExtensionMetadataV14{Identifier: "CheckTxVersion", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20e}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x4}}}}, types.SignedExtensionMetadataV14{Identifier: "CheckGenesis", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x20f}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.SignedExtensionMetadataV14{Identifier: "CheckMortality", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x210}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x16}}}}, types.SignedExtensionMetadataV14{Identifier: "CheckNonce", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x212}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}, types.SignedExtensionMetadataV14{Identifier: "CheckWeight", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x213}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}, types.SignedExtensionMetadataV14{Identifier: "ChargeTransactionPayment", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x214}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}, types.SignedExtensionMetadataV14{Identifier: "CheckAppId", Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x215}}}, AdditionalSigned: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x2b}}}}}}, Type: types.Si1LookupTypeID{UCompact: types.UCompact{neg: false, abs: big.nat{0x216}}}, EfficientLookup: map[int64]*types.Si1Type{0: (*types.Si1Type)(0x1400037b360), 1: (*types.Si1Type)(0x1400037b520), 2: (*types.Si1Type)(0x1400037b6e0), 3: (*types.Si1Type)(0x1400037b8a0), 4: (*types.Si1Type)(0x1400037ba60), 5: (*types.Si1Type)(0x1400037bc20), 6: (*types.Si1Type)(0x1400037bde0), 7: (*types.Si1Type)(0x140003ae020), 8: (*types.Si1Type)(0x140003ae1e0), 9: (*types.Si1Type)(0x140003ae3a0), 10: (*types.Si1Type)(0x140003ae560), 11: (*types.Si1Type)(0x140003ae720), 12: (*types.Si1Type)(0x140003ae8e0), 13: (*types.Si1Type)(0x140003aeaa0), 14: (*types.Si1Type)(0x140003aec60), 15: (*types.Si1Type)(0x140003aee20), 16: (*types.Si1Type)(0x140003aefe0), 17: (*types.Si1Type)(0x140003af1a0), 18: (*types.Si1Type)(0x140003af360), 19: (*types.Si1Type)(0x140003af520), 20: (*types.Si1Type)(0x140003af6e0), 21: (*types.Si1Type)(0x140003af8a0), 22: (*types.Si1Type)(0x140003afa60), 23: (*types.Si1Type)(0x140003afc20), 24: (*types.Si1Type)(0x140003afde0), 25: (*types.Si1Type)(0x140003b0020), 26: (*types.Si1Type)(0x140003b01e0), 27: (*types.Si1Type)(0x140003b03a0), 28: (*types.Si1Type)(0x140003b0560), 29: (*types.Si1Type)(0x140003b0720), 30: (*types.Si1Type)(0x140003b08e0), 31: (*types.Si1Type)(0x140003b0aa0), 32: (*types.Si1Type)(0x140003b0c60), 33: (*types.Si1Type)(0x140003b0e20), 34: (*types.Si1Type)(0x140003b0fe0), 35: (*types.Si1Type)(0x140003b11a0), 36: (*types.Si1Type)(0x140003b1360), 37: (*types.Si1Type)(0x140003b1520), 38: (*types.Si1Type)(0x140003b16e0), 39: (*types.Si1Type)(0x140003b18a0), 40: (*types.Si1Type)(0x140003b1a60), 41: (*types.Si1Type)(0x140003b1c20), 42: (*types.Si1Type)(0x140003b1de0), 43: (*types.Si1Type)(0x140003b2020), 44: (*types.Si1Type)(0x140003b21e0), 45: (*types.Si1Type)(0x140003b23a0), 46: (*types.Si1Type)(0x140003b2560), 47: (*types.Si1Type)(0x140003b2720), 48: (*types.Si1Type)(0x140003b28e0), 49: (*types.Si1Type)(0x140003b2aa0), 50: (*types.Si1Type)(0x140003b2c60), 51: (*types.Si1Type)(0x140003b2e20), 52: (*types.Si1Type)(0x140003b2fe0), 53: (*types.Si1Type)(0x140003b31a0), 54: (*types.Si1Type)(0x140003b3360), 55: (*types.Si1Type)(0x140003b3520), 56: (*types.Si1Type)(0x140003b36e0), 57: (*types.Si1Type)(0x140003b38a0), 58: (*types.Si1Type)(0x140003b3a60), 59: (*types.Si1Type)(0x140003b3c20), 60: (*types.Si1Type)(0x140003b3de0), 61: (*types.Si1Type)(0x140003b6020), 62: (*types.Si1Type)(0x140003b61e0), 63: (*types.Si1Type)(0x140003b63a0), 64: (*types.Si1Type)(0x140003b6560), 65: (*types.Si1Type)(0x140003b6720), 66: (*types.Si1Type)(0x140003b68e0), 67: (*types.Si1Type)(0x140003b6aa0), 68: (*types.Si1Type)(0x140003b6c60), 69: (*types.Si1Type)(0x140003b6e20), 70: (*types.Si1Type)(0x140003b6fe0), 71: (*types.Si1Type)(0x140003b71a0), 72: (*types.Si1Type)(0x140003b7360), 73: (*types.Si1Type)(0x140003b7520), 74: (*types.Si1Type)(0x140003b76e0), 75: (*types.Si1Type)(0x140003b78a0), 76: (*types.Si1Type)(0x140003b7a60), 77: (*types.Si1Type)(0x140003b7c20), 78: (*types.Si1Type)(0x140003b7de0), 79: (*types.Si1Type)(0x140003b8020), 80: (*types.Si1Type)(0x140003b81e0), 81: (*types.Si1Type)(0x140003b83a0), 82: (*types.Si1Type)(0x140003b8560), 83: (*types.Si1Type)(0x140003b8720), 84: (*types.Si1Type)(0x140003b88e0), 85: (*types.Si1Type)(0x140003b8aa0), 86: (*types.Si1Type)(0x140003b8c60), 87: (*types.Si1Type)(0x140003b8e20), 88: (*types.Si1Type)(0x140003b8fe0), 89: (*types.Si1Type)(0x140003b91a0), 90: (*types.Si1Type)(0x140003b9360), 91: (*types.Si1Type)(0x140003b9520), 92: (*types.Si1Type)(0x140003b96e0), 93: (*types.Si1Type)(0x140003b98a0), 94: (*types.Si1Type)(0x140003b9a60), 95: (*types.Si1Type)(0x140003b9c20), 96: (*types.Si1Type)(0x140003b9de0), 97: (*types.Si1Type)(0x140003be020), 98: (*types.Si1Type)(0x140003be1e0), 99: (*types.Si1Type)(0x140003be3a0), 100: (*types.Si1Type)(0x140003be560), 101: (*types.Si1Type)(0x140003be720), 102: (*types.Si1Type)(0x140003be8e0), 103: (*types.Si1Type)(0x140003beaa0), 104: (*types.Si1Type)(0x140003bec60), 105: (*types.Si1Type)(0x140003bee20), 106: (*types.Si1Type)(0x140003befe0), 107: (*types.Si1Type)(0x140003bf1a0), 108: (*types.Si1Type)(0x140003bf360), 109: (*types.Si1Type)(0x140003bf520), 110: (*types.Si1Type)(0x140003bf6e0), 111: (*types.Si1Type)(0x140003bf8a0), 112: (*types.Si1Type)(0x140003bfa60), 113: (*types.Si1Type)(0x140003bfc20), 114: (*types.Si1Type)(0x140003bfde0), 115: (*types.Si1Type)(0x140003c0020), 116: (*types.Si1Type)(0x140003c01e0), 117: (*types.Si1Type)(0x140003c03a0), 118: (*types.Si1Type)(0x140003c0560), 119: (*types.Si1Type)(0x140003c0720), 120: (*types.Si1Type)(0x140003c08e0), 121: (*types.Si1Type)(0x140003c0aa0), 122: (*types.Si1Type)(0x140003c0c60), 123: (*types.Si1Type)(0x140003c0e20), 124: (*types.Si1Type)(0x140003c0fe0), 125: (*types.Si1Type)(0x140003c11a0), 126: (*types.Si1Type)(0x140003c1360), 127: (*types.Si1Type)(0x140003c1520), 128: (*types.Si1Type)(0x140003c16e0), 129: (*types.Si1Type)(0x140003c18a0), 130: (*types.Si1Type)(0x140003c1a60), 131: (*types.Si1Type)(0x140003c1c20), 132: (*types.Si1Type)(0x140003c1de0), 133: (*types.Si1Type)(0x140003c2020), 134: (*types.Si1Type)(0x140003c21e0), 135: (*types.Si1Type)(0x140003c23a0), 136: (*types.Si1Type)(0x140003c2560), 137: (*types.Si1Type)(0x140003c2720), 138: (*types.Si1Type)(0x140003c28e0), 139: (*types.Si1Type)(0x140003c2aa0), 140: (*types.Si1Type)(0x140003c2c60), 141: (*types.Si1Type)(0x140003c2e20), 142: (*types.Si1Type)(0x140003c2fe0), 143: (*types.Si1Type)(0x140003c31a0), 144: (*types.Si1Type)(0x140003c3360), 145: (*types.Si1Type)(0x140003c3520), 146: (*types.Si1Type)(0x140003c36e0), 147: (*types.Si1Type)(0x140003c38a0), 148: (*types.Si1Type)(0x140003c3a60), 149: (*types.Si1Type)(0x140003c3c20), 150: (*types.Si1Type)(0x140003c3de0), 151: (*types.Si1Type)(0x140003c4020), 152: (*types.Si1Type)(0x140003c41e0), 153: (*types.Si1Type)(0x140003c43a0), 154: (*types.Si1Type)(0x140003c4560), 155: (*types.Si1Type)(0x140003c4720), 156: (*types.Si1Type)(0x140003c48e0), 157: (*types.Si1Type)(0x140003c4aa0), 158: (*types.Si1Type)(0x140003c4c60), 159: (*types.Si1Type)(0x140003c4e20), 160: (*types.Si1Type)(0x140003c4fe0), 161: (*types.Si1Type)(0x140003c51a0), 162: (*types.Si1Type)(0x140003c5360), 163: (*types.Si1Type)(0x140003c5520), 164: (*types.Si1Type)(0x140003c56e0), 165: (*types.Si1Type)(0x140003c58a0), 166: (*types.Si1Type)(0x140003c5a60), 167: (*types.Si1Type)(0x140003c5c20), 168: (*types.Si1Type)(0x140003c5de0), 169: (*types.Si1Type)(0x140003c6020), 170: (*types.Si1Type)(0x140003c61e0), 171: (*types.Si1Type)(0x140003c63a0), 172: (*types.Si1Type)(0x140003c6560), 173: (*types.Si1Type)(0x140003c6720), 174: (*types.Si1Type)(0x140003c68e0), 175: (*types.Si1Type)(0x140003c6aa0), 176: (*types.Si1Type)(0x140003c6c60), 177: (*types.Si1Type)(0x140003c6e20), 178: (*types.Si1Type)(0x140003c6fe0), 179: (*types.Si1Type)(0x140003c71a0), 180: (*types.Si1Type)(0x140003c7360), 181: (*types.Si1Type)(0x140003c7520), 182: (*types.Si1Type)(0x140003c76e0), 183: (*types.Si1Type)(0x140003c78a0), 184: (*types.Si1Type)(0x140003c7a60), 185: (*types.Si1Type)(0x140003c7c20), 186: (*types.Si1Type)(0x140003c7de0), 187: (*types.Si1Type)(0x140003c8020), 188: (*types.Si1Type)(0x140003c81e0), 189: (*types.Si1Type)(0x140003c83a0), 190: (*types.Si1Type)(0x140003c8560), 191: (*types.Si1Type)(0x140003c8720), 192: (*types.Si1Type)(0x140003c88e0), 193: (*types.Si1Type)(0x140003c8aa0), 194: (*types.Si1Type)(0x140003c8c60), 195: (*types.Si1Type)(0x140003c8e20), 196: (*types.Si1Type)(0x140003c8fe0), 197: (*types.Si1Type)(0x140003c91a0), 198: (*types.Si1Type)(0x140003c9360), 199: (*types.Si1Type)(0x140003c9520), 200: (*types.Si1Type)(0x140003c96e0), 201: (*types.Si1Type)(0x140003c98a0), 202: (*types.Si1Type)(0x140003c9a60), 203: (*types.Si1Type)(0x140003c9c20), 204: (*types.Si1Type)(0x140003c9de0), 205: (*types.Si1Type)(0x140003ca020), 206: (*types.Si1Type)(0x140003ca1e0), 207: (*types.Si1Type)(0x140003ca3a0), 208: (*types.Si1Type)(0x140003ca560), 209: (*types.Si1Type)(0x140003ca720), 210: (*types.Si1Type)(0x140003ca8e0), 211: (*types.Si1Type)(0x140003caaa0), 212: (*types.Si1Type)(0x140003cac60), 213: (*types.Si1Type)(0x140003cae20), 214: (*types.Si1Type)(0x140003cafe0), 215: (*types.Si1Type)(0x140003cb1a0), 216: (*types.Si1Type)(0x140003cb360), 217: (*types.Si1Type)(0x140003cb520), 218: (*types.Si1Type)(0x140003cb6e0), 219: (*types.Si1Type)(0x140003cb8a0), 220: (*types.Si1Type)(0x140003cba60), 221: (*types.Si1Type)(0x140003cbc20), 222: (*types.Si1Type)(0x140003cbde0), 223: (*types.Si1Type)(0x140003da020), 224: (*types.Si1Type)(0x140003da1e0), 225: (*types.Si1Type)(0x140003da3a0), 226: (*types.Si1Type)(0x140003da560), 227: (*types.Si1Type)(0x140003da720), 228: (*types.Si1Type)(0x140003da8e0), 229: (*types.Si1Type)(0x140003daaa0), 230: (*types.Si1Type)(0x140003dac60), 231: (*types.Si1Type)(0x140003dae20), 232: (*types.Si1Type)(0x140003dafe0), 233: (*types.Si1Type)(0x140003db1a0), 234: (*types.Si1Type)(0x140003db360), 235: (*types.Si1Type)(0x140003db520), 236: (*types.Si1Type)(0x140003db6e0), 237: (*types.Si1Type)(0x140003db8a0), 238: (*types.Si1Type)(0x140003dba60), 239: (*types.Si1Type)(0x140003dbc20), 240: (*types.Si1Type)(0x140003dbde0), 241: (*types.Si1Type)(0x140003dc020), 242: (*types.Si1Type)(0x140003dc1e0), 243: (*types.Si1Type)(0x140003dc3a0), 244: (*types.Si1Type)(0x140003dc560), 245: (*types.Si1Type)(0x140003dc720), 246: (*types.Si1Type)(0x140003dc8e0), 247: (*types.Si1Type)(0x140003dcaa0), 248: (*types.Si1Type)(0x140003dcc60), 249: (*types.Si1Type)(0x140003dce20), 250: (*types.Si1Type)(0x140003dcfe0), 251: (*types.Si1Type)(0x140003dd1a0), 252: (*types.Si1Type)(0x140003dd360), 253: (*types.Si1Type)(0x140003dd520), 254: (*types.Si1Type)(0x140003dd6e0), 255: (*types.Si1Type)(0x140003dd8a0), 256: (*types.Si1Type)(0x140003dda60), 257: (*types.Si1Type)(0x140003ddc20), 258: (*types.Si1Type)(0x140003ddde0), 259: (*types.Si1Type)(0x140003de020), 260: (*types.Si1Type)(0x140003de1e0), 261: (*types.Si1Type)(0x140003de3a0), 262: (*types.Si1Type)(0x140003de560), 263: (*types.Si1Type)(0x140003de720), 264: (*types.Si1Type)(0x140003de8e0), 265: (*types.Si1Type)(0x140003deaa0), 266: (*types.Si1Type)(0x140003dec60), 267: (*types.Si1Type)(0x140003dee20), 268: (*types.Si1Type)(0x140003defe0), 269: (*types.Si1Type)(0x140003df1a0), 270: (*types.Si1Type)(0x140003df360), 271: (*types.Si1Type)(0x140003df520), 272: (*types.Si1Type)(0x140003df6e0), 273: (*types.Si1Type)(0x140003df8a0), 274: (*types.Si1Type)(0x140003dfa60), 275: (*types.Si1Type)(0x140003dfc20), 276: (*types.Si1Type)(0x140003dfde0), 277: (*types.Si1Type)(0x140000dc020), 278: (*types.Si1Type)(0x140000dc1e0), 279: (*types.Si1Type)(0x140000dc3a0), 280: (*types.Si1Type)(0x140000dc560), 281: (*types.Si1Type)(0x140000dc720), 282: (*types.Si1Type)(0x140000dc8e0), 283: (*types.Si1Type)(0x140000dcaa0), 284: (*types.Si1Type)(0x140000dcc60), 285: (*types.Si1Type)(0x140000dce20), 286: (*types.Si1Type)(0x140000dcfe0), 287: (*types.Si1Type)(0x140000dd1a0), 288: (*types.Si1Type)(0x140000dd360), 289: (*types.Si1Type)(0x140000dd520), 290: (*types.Si1Type)(0x140000dd6e0), 291: (*types.Si1Type)(0x140000dd8a0), 292: (*types.Si1Type)(0x140000dda60), 293: (*types.Si1Type)(0x140000ddc20), 294: (*types.Si1Type)(0x140000ddde0), 295: (*types.Si1Type)(0x140000e2020), 296: (*types.Si1Type)(0x140000e21e0), 297: (*types.Si1Type)(0x140000e23a0), 298: (*types.Si1Type)(0x140000e2560), 299: (*types.Si1Type)(0x140000e2720), 300: (*types.Si1Type)(0x140000e28e0), 301: (*types.Si1Type)(0x140000e2aa0), 302: (*types.Si1Type)(0x140000e2c60), 303: (*types.Si1Type)(0x140000e2e20), 304: (*types.Si1Type)(0x140000e2fe0), 305: (*types.Si1Type)(0x140000e31a0), 306: (*types.Si1Type)(0x140000e3360), 307: (*types.Si1Type)(0x140000e3520), 308: (*types.Si1Type)(0x140000e36e0), 309: (*types.Si1Type)(0x140000e38a0), 310: (*types.Si1Type)(0x140000e3a60), 311: (*types.Si1Type)(0x140000e3c20), 312: (*types.Si1Type)(0x140000e3de0), 313: (*types.Si1Type)(0x140000f0020), 314: (*types.Si1Type)(0x140000f01e0), 315: (*types.Si1Type)(0x140000f03a0), 316: (*types.Si1Type)(0x140000f0560), 317: (*types.Si1Type)(0x140000f0720), 318: (*types.Si1Type)(0x140000f08e0), 319: (*types.Si1Type)(0x140000f0aa0), 320: (*types.Si1Type)(0x140000f0c60), 321: (*types.Si1Type)(0x140000f0e20), 322: (*types.Si1Type)(0x140000f0fe0), 323: (*types.Si1Type)(0x140000f11a0), 324: (*types.Si1Type)(0x140000f1360), 325: (*types.Si1Type)(0x140000f1520), 326: (*types.Si1Type)(0x140000f16e0), 327: (*types.Si1Type)(0x140000f18a0), 328: (*types.Si1Type)(0x140000f1a60), 329: (*types.Si1Type)(0x140000f1c20), 330: (*types.Si1Type)(0x140000f1de0), 331: (*types.Si1Type)(0x140000f8020), 332: (*types.Si1Type)(0x140000f81e0), 333: (*types.Si1Type)(0x140000f83a0), 334: (*types.Si1Type)(0x140000f8560), 335: (*types.Si1Type)(0x140000f8720), 336: (*types.Si1Type)(0x140000f88e0), 337: (*types.Si1Type)(0x140000f8aa0), 338: (*types.Si1Type)(0x140000f8c60), 339: (*types.Si1Type)(0x140000f8e20), 340: (*types.Si1Type)(0x140000f8fe0), 341: (*types.Si1Type)(0x140000f91a0), 342: (*types.Si1Type)(0x140000f9360), 343: (*types.Si1Type)(0x140000f9520), 344: (*types.Si1Type)(0x140000f96e0), 345: (*types.Si1Type)(0x140000f98a0), 346: (*types.Si1Type)(0x140000f9a60), 347: (*types.Si1Type)(0x140000f9c20), 348: (*types.Si1Type)(0x140000f9de0), 349: (*types.Si1Type)(0x1400010e020), 350: (*types.Si1Type)(0x1400010e1e0), 351: (*types.Si1Type)(0x1400010e3a0), 352: (*types.Si1Type)(0x1400010e560), 353: (*types.Si1Type)(0x1400010e720), 354: (*types.Si1Type)(0x1400010e8e0), 355: (*types.Si1Type)(0x1400010eaa0), 356: (*types.Si1Type)(0x1400010ec60), 357: (*types.Si1Type)(0x1400010ee20), 358: (*types.Si1Type)(0x1400010efe0), 359: (*types.Si1Type)(0x1400010f1a0), 360: (*types.Si1Type)(0x1400010f360), 361: (*types.Si1Type)(0x1400010f520), 362: (*types.Si1Type)(0x1400010f6e0), 363: (*types.Si1Type)(0x1400010f8a0), 364: (*types.Si1Type)(0x1400010fa60), 365: (*types.Si1Type)(0x1400010fc20), 366: (*types.Si1Type)(0x1400010fde0), 367: (*types.Si1Type)(0x14000114020), 368: (*types.Si1Type)(0x140001141e0), 369: (*types.Si1Type)(0x140001143a0), 370: (*types.Si1Type)(0x14000114560), 371: (*types.Si1Type)(0x14000114720), 372: (*types.Si1Type)(0x140001148e0), 373: (*types.Si1Type)(0x14000114aa0), 374: (*types.Si1Type)(0x14000114c60), 375: (*types.Si1Type)(0x14000114e20), 376: (*types.Si1Type)(0x14000114fe0), 377: (*types.Si1Type)(0x140001151a0), 378: (*types.Si1Type)(0x14000115360), 379: (*types.Si1Type)(0x14000115520), 380: (*types.Si1Type)(0x140001156e0), 381: (*types.Si1Type)(0x140001158a0), 382: (*types.Si1Type)(0x14000115a60), 383: (*types.Si1Type)(0x14000115c20), 384: (*types.Si1Type)(0x14000115de0), 385: (*types.Si1Type)(0x14000132020), 386: (*types.Si1Type)(0x140001321e0), 387: (*types.Si1Type)(0x140001323a0), 388: (*types.Si1Type)(0x14000132560), 389: (*types.Si1Type)(0x14000132720), 390: (*types.Si1Type)(0x140001328e0), 391: (*types.Si1Type)(0x14000132aa0), 392: (*types.Si1Type)(0x14000132c60), 393: (*types.Si1Type)(0x14000132e20), 394: (*types.Si1Type)(0x14000132fe0), 395: (*types.Si1Type)(0x140001331a0), 396: (*types.Si1Type)(0x14000133360), 397: (*types.Si1Type)(0x14000133520), 398: (*types.Si1Type)(0x140001336e0), 399: (*types.Si1Type)(0x140001338a0), 400: (*types.Si1Type)(0x14000133a60), 401: (*types.Si1Type)(0x14000133c20), 402: (*types.Si1Type)(0x14000133de0), 403: (*types.Si1Type)(0x1400013a020), 404: (*types.Si1Type)(0x1400013a1e0), 405: (*types.Si1Type)(0x1400013a3a0), 406: (*types.Si1Type)(0x1400013a560), 407: (*types.Si1Type)(0x1400013a720), 408: (*types.Si1Type)(0x1400013a8e0), 409: (*types.Si1Type)(0x1400013aaa0), 410: (*types.Si1Type)(0x1400013ac60), 411: (*types.Si1Type)(0x1400013ae20), 412: (*types.Si1Type)(0x1400013afe0), 413: (*types.Si1Type)(0x1400013b1a0), 414: (*types.Si1Type)(0x1400013b360), 415: (*types.Si1Type)(0x1400013b520), 416: (*types.Si1Type)(0x1400013b6e0), 417: (*types.Si1Type)(0x1400013b8a0), 418: (*types.Si1Type)(0x1400013ba60), 419: (*types.Si1Type)(0x1400013bc20), 420: (*types.Si1Type)(0x1400013bde0), 421: (*types.Si1Type)(0x14000164020), 422: (*types.Si1Type)(0x140001641e0), 423: (*types.Si1Type)(0x140001643a0), 424: (*types.Si1Type)(0x14000164560), 425: (*types.Si1Type)(0x14000164720), 426: (*types.Si1Type)(0x140001648e0), 427: (*types.Si1Type)(0x14000164aa0), 428: (*types.Si1Type)(0x14000164c60), 429: (*types.Si1Type)(0x14000164e20), 430: (*types.Si1Type)(0x14000164fe0), 431: (*types.Si1Type)(0x140001651a0), 432: (*types.Si1Type)(0x14000165360), 433: (*types.Si1Type)(0x14000165520), 434: (*types.Si1Type)(0x140001656e0), 435: (*types.Si1Type)(0x140001658a0), 436: (*types.Si1Type)(0x14000165a60), 437: (*types.Si1Type)(0x14000165c20), 438: (*types.Si1Type)(0x14000165de0), 439: (*types.Si1Type)(0x14000182020), 440: (*types.Si1Type)(0x140001821e0), 441: (*types.Si1Type)(0x140001823a0), 442: (*types.Si1Type)(0x14000182560), 443: (*types.Si1Type)(0x14000182720), 444: (*types.Si1Type)(0x140001828e0), 445: (*types.Si1Type)(0x14000182aa0), 446: (*types.Si1Type)(0x14000182c60), 447: (*types.Si1Type)(0x14000182e20), 448: (*types.Si1Type)(0x14000182fe0), 449: (*types.Si1Type)(0x140001831a0), 450: (*types.Si1Type)(0x14000183360), 451: (*types.Si1Type)(0x14000183520), 452: (*types.Si1Type)(0x140001836e0), 453: (*types.Si1Type)(0x140001838a0), 454: (*types.Si1Type)(0x14000183a60), 455: (*types.Si1Type)(0x14000183c20), 456: (*types.Si1Type)(0x14000183de0), 457: (*types.Si1Type)(0x1400019a020), 458: (*types.Si1Type)(0x1400019a1e0), 459: (*types.Si1Type)(0x1400019a3a0), 460: (*types.Si1Type)(0x1400019a560), 461: (*types.Si1Type)(0x1400019a720), 462: (*types.Si1Type)(0x1400019a8e0), 463: (*types.Si1Type)(0x1400019aaa0), 464: (*types.Si1Type)(0x1400019ac60), 465: (*types.Si1Type)(0x1400019ae20), 466: (*types.Si1Type)(0x1400019afe0), 467: (*types.Si1Type)(0x1400019b1a0), 468: (*types.Si1Type)(0x1400019b360), 469: (*types.Si1Type)(0x1400019b520), 470: (*types.Si1Type)(0x1400019b6e0), 471: (*types.Si1Type)(0x1400019b8a0), 472: (*types.Si1Type)(0x1400019ba60), 473: (*types.Si1Type)(0x1400019bc20), 474: (*types.Si1Type)(0x1400019bde0), 475: (*types.Si1Type)(0x140001a4020), 476: (*types.Si1Type)(0x140001a41e0), 477: (*types.Si1Type)(0x140001a43a0), 478: (*types.Si1Type)(0x140001a4560), 479: (*types.Si1Type)(0x140001a4720), 480: (*types.Si1Type)(0x140001a48e0), 481: (*types.Si1Type)(0x140001a4aa0), 482: (*types.Si1Type)(0x140001a4c60), 483: (*types.Si1Type)(0x140001a4e20), 484: (*types.Si1Type)(0x140001a4fe0), 485: (*types.Si1Type)(0x140001a51a0), 486: (*types.Si1Type)(0x140001a5360), 487: (*types.Si1Type)(0x140001a5520), 488: (*types.Si1Type)(0x140001a56e0), 489: (*types.Si1Type)(0x140001a58a0), 490: (*types.Si1Type)(0x140001a5a60), 491: (*types.Si1Type)(0x140001a5c20), 492: (*types.Si1Type)(0x140001a5de0), 493: (*types.Si1Type)(0x140001b4020), 494: (*types.Si1Type)(0x140001b41e0), 495: (*types.Si1Type)(0x140001b43a0), 496: (*types.Si1Type)(0x140001b4560), 497: (*types.Si1Type)(0x140001b4720), 498: (*types.Si1Type)(0x140001b48e0), 499: (*types.Si1Type)(0x140001b4aa0), 500: (*types.Si1Type)(0x140001b4c60), 501: (*types.Si1Type)(0x140001b4e20), 502: (*types.Si1Type)(0x140001b4fe0), 503: (*types.Si1Type)(0x140001b51a0), 504: (*types.Si1Type)(0x140001b5360), 505: (*types.Si1Type)(0x140001b5520), 506: (*types.Si1Type)(0x140001b56e0), 507: (*types.Si1Type)(0x140001b58a0), 508: (*types.Si1Type)(0x140001b5a60), 509: (*types.Si1Type)(0x140001b5c20), 510: (*types.Si1Type)(0x140001b5de0), 511: (*types.Si1Type)(0x140001be020), 512: (*types.Si1Type)(0x140001be1e0), 513: (*types.Si1Type)(0x140001be3a0), 514: (*types.Si1Type)(0x140001be560), 515: (*types.Si1Type)(0x140001be720), 516: (*types.Si1Type)(0x140001be8e0), 517: (*types.Si1Type)(0x140001beaa0), 518: (*types.Si1Type)(0x140001bec60), 519: (*types.Si1Type)(0x140001bee20), 520: (*types.Si1Type)(0x140001befe0), 521: (*types.Si1Type)(0x140001bf1a0), 522: (*types.Si1Type)(0x140001bf360), 523: (*types.Si1Type)(0x140001bf520), 524: (*types.Si1Type)(0x140001bf6e0), 525: (*types.Si1Type)(0x140001bf8a0), 526: (*types.Si1Type)(0x140001bfa60), 527: (*types.Si1Type)(0x140001bfc20), 528: (*types.Si1Type)(0x140001bfde0), 529: (*types.Si1Type)(0x140001ce020), 530: (*types.Si1Type)(0x140001ce1e0), 531: (*types.Si1Type)(0x140001ce3a0), 532: (*types.Si1Type)(0x140001ce560), 533: (*types.Si1Type)(0x140001ce720), 534: (*types.Si1Type)(0x140001ce8e0)}}}
