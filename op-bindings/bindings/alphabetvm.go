// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AlphabetVMMetaData contains all meta data concerning the AlphabetVM contract.
var AlphabetVMMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_absolutePrestate\",\"type\":\"bytes32\",\"internalType\":\"Claim\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"oracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPreimageOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"step\",\"inputs\":[{\"name\":\"_stateData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_localContext\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"postState_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"}]",
	Bin: "0x60a060405234801561001057600080fd5b506040516132b13803806132b183398101604081905261002f91610090565b608081905260405161004090610083565b604051809103906000f08015801561005c573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055506100a9565b612cea806105c783390190565b6000602082840312156100a257600080fd5b5051919050565b6080516105046100c3600039600060af01526105046000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dc0d1d01461003b578063e14ced3214610085575b600080fd5b60005461005b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610098610093366004610395565b6100a6565b60405190815260200161007c565b600080600060087f0000000000000000000000000000000000000000000000000000000000000000901b600889896040516100e2929190610409565b6040518091039020901b036101d9576000805473ffffffffffffffffffffffffffffffffffffffff1663e03110e161011b60048861029f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152600060248201526044016040805180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610419565b50640ffffffff0607c82901c169350905063ffffffff608082901c1660006101c38a8c018c61043d565b90506101cf8582610485565b9350505050610206565b6101e58789018961049d565b9092509050816101f4816104bf565b9250508080610202906104bf565b9150505b6040805160208101849052908101829052606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001798975050505050505050565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831617610345818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b60008083601f84011261035e57600080fd5b50813567ffffffffffffffff81111561037657600080fd5b60208301915083602082850101111561038e57600080fd5b9250929050565b6000806000806000606086880312156103ad57600080fd5b853567ffffffffffffffff808211156103c557600080fd5b6103d189838a0161034c565b909750955060208801359150808211156103ea57600080fd5b506103f78882890161034c565b96999598509660400135949350505050565b8183823760009101908152919050565b6000806040838503121561042c57600080fd5b505080516020909101519092909150565b60006020828403121561044f57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561049857610498610456565b500190565b600080604083850312156104b057600080fd5b50508035926020909101359150565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104f0576104f0610456565b506001019056fea164736f6c634300080f000a60806040523480156200001157600080fd5b5060005b620000236001600f620000db565b811015620000be57600381600f8110620000415762000041620000f5565b0154600382600f8110620000595762000059620000f5565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012060038260016200009491906200010b565b600f8110620000a757620000a7620000f5565b015580620000b58162000126565b91505062000015565b5062000142565b634e487b7160e01b600052601160045260246000fd5b600082821015620000f057620000f0620000c5565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115620001215762000121620000c5565b500190565b6000600182016200013b576200013b620000c5565b5060010190565b612b9880620001526000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80639f99ef82116100cd578063e03110e111610081578063ec5efcbc11610066578063ec5efcbc14610332578063faf37bc714610345578063fef2b4ed146103cd57600080fd5b8063e03110e1146102f7578063e15926111461031f57600080fd5b8063b4801e61116100b2578063b4801e61146102c7578063b665b164146102da578063c3a079ed146102ed57600080fd5b80639f99ef8214610289578063b2e67ba81461029c57600080fd5b806361238bde116101245780637ac54767116101095780637ac54767146102255780638542cf50146102385780639f6cf2601461027657600080fd5b806361238bde146101cf5780636551927b146101fa57600080fd5b80633909af5c116101555780633909af5c1461019f5780634d52b4c9146101b457806352f0f3ad146101bc57600080fd5b80630359a563146101715780632055b36b14610197575b600080fd5b61018461017f3660046121a2565b6103ed565b6040519081526020015b60405180910390f35b610184600f81565b6101b26101ad36600461239d565b61052b565b005b61018461078a565b6101846101ca366004612489565b6107a5565b6101846101dd3660046124c4565b600160209081526000928352604080842090915290825290205481565b6101846102083660046121a2565b601360209081526000928352604080842090915290825290205481565b6101846102333660046124e6565b61087a565b6102666102463660046124c4565b600260209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161018e565b6102666102843660046124ff565b610891565b6101b261029736600461259b565b6108f2565b6101846102aa3660046121a2565b601460209081526000928352604080842090915290825290205481565b6101846102d536600461262c565b610d89565b6101b26102e836600461239d565b610dbb565b6101846201518081565b61030a6103053660046124c4565b61111b565b6040805192835260208301919091520161018e565b6101b261032d36600461265f565b61120c565b6101b26103403660046126ab565b611315565b6101b2610353366004612744565b3360009081526013602090815260408083209583529490529290922080547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1660a09290921b7fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff169190911760809290921b919091179055565b6101846103db3660046124e6565b60006020819052908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260136020908152604080832084845290915281205481906104309060601c63ffffffff1690565b63ffffffff16905060005b600f81101561052357816001166001036104c35773ffffffffffffffffffffffffffffffffffffffff85166000908152601260209081526040808320878452909152902081600f811061049057610490612780565b01546040805160208101929092528101849052606001604051602081830303815290604052805190602001209250610504565b82600382600f81106104d7576104d7612780565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012092505b61050f6002836127de565b91508061051b81612819565b91505061043b565b505092915050565b600061053e61053988612851565b61149d565b9050600061054e61053986612851565b9050600061055c8c8c6103ed565b905061056f8888838c6020013587610891565b80156105875750610587858583896020013586610891565b6105bd576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88604001358a6040516020016105d39190612920565b6040516020818303038152906040528051906020012014610620576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b856020013589602001356001610636919061295e565b1461066d576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106b58a61067b8880612976565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114dd92505050565b6106be8a611638565b85604001358a6040516020016106d49190612920565b6040516020818303038152906040528051906020012003610721576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9790971660009081526013602090815260408083209883529790529590952080547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001179055505050505050565b6001610798600f6002612afd565b6107a29190612b09565b81565b60006107b18686611ed4565b90506107be83600861295e565b8211806107cb5750602083115b15610802576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602081815260c085901b82526008959095528251828252600286526040808320858452875280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558484528752808320948352938652838220558181529384905292205592915050565b600381600f811061088a57600080fd5b0154905081565b60008160005b600f8110156108e5578060051b880135600186831c16600181146108ca57600084815260208390526040902093506108db565b600082815260208590526040902093505b5050600101610897565b5090931495945050505050565b6060811561090b576109048686611f81565b9050610945565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293505050505b3360009081526012602090815260408083208a845290915280822081516101e081019283905291600f9082845b8154815260200190600101908083116109725750503360009081526013602090815260408083208f84529091529020549394506109b4925083915061200a9050565b67ffffffffffffffff16156109f5576040517f475a253500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a078260a01c63ffffffff1690565b67ffffffffffffffff1690506000610a258360401c63ffffffff1690565b63ffffffff169050600882108015610a3b575080155b15610ac2576000610a528460801c63ffffffff1690565b905060008160c01b6000528b356008528351905080601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f8152602001908152602001600020819055505050610b77565b60088210158015610ae0575080610ada600884612b09565b92508210155b8015610af45750610af1898261295e565b82105b15610b77576000610b058284612b09565b905089610b1382602061295e565b10158015610b1f575086155b15610b56576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526014602090815260408083208f84529091529020908b013590555b6000610b898460601c63ffffffff1690565b63ffffffff169050855160208701608882048a1415608883061715610bb6576307b1daf16000526004601cfd5b60405160c8810160405260005b83811015610c66578083018051835260208101516020840152604081015160408401526060810151606084015260808101516080840152508460888301526088810460051b8d013560a883015260c882206001860195508560005b6101e0811015610c5b576001821615610c3b5782818d0152610c5b565b8b81015160009081526020938452604090209260019290921c9101610c1e565b505050608801610bc3565b505050506001600f6002610c7a9190612afd565b610c849190612b09565b811115610cbd576040517f6229572300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526012602090815260408083208f84529091529020610ce39086600f6120ef565b5060408a901b7fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff606083901b167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff8616171793508615610d605777ffffffffffffffffffffffffffffffffffffffffffffffff84164260c01b1793505b50503360009081526013602090815260408083209c83529b905299909920555050505050505050565b601260205282600052604060002060205281600052604060002081600f8110610db157600080fd5b0154925083915050565b73ffffffffffffffffffffffffffffffffffffffff891660009081526013602090815260408083208b8452909152902054610df68160c01c90565b67ffffffffffffffff1615801590610e2e575062015180610e178260c01c90565b610e2b9067ffffffffffffffff1642612b09565b11155b15610e65576040517f55d4cbf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff811615610ea7576040517fc334f06900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610eb561053989612851565b90506000610ec561053987612851565b90506000610ed38d8d6103ed565b9050610ee68989838d6020013587610891565b8015610efe5750610efe8686838a6020013586610891565b610f34576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86602001358a602001356001610f4a919061295e565b141580610f7c57506001610f648560601c63ffffffff1690565b610f6e9190612b20565b63ffffffff16876020013514155b15610fb3576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fc38460801c63ffffffff1690565b63ffffffff16610fd98560401c63ffffffff1690565b63ffffffff1614611016576040517f7b1dafd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110248b61067b8980612976565b61102d8b611638565b60006110388c612010565b90508d8d600061104e8860a01c63ffffffff1690565b600085815260026020908152604080832067ffffffffffffffff9490941680845293825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915573ffffffffffffffffffffffffffffffffffffffff88168452601483528184208785528352818420548985529083528184208585529092529091205590506110ef8860401c63ffffffff1690565b60009485526020859052604090942063ffffffff90941690935550505050505050505050505050505050565b6000828152600260209081526040808320848452909152812054819060ff166111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7072652d696d616765206d757374206578697374000000000000000000000000604482015260640160405180910390fd5b50600083815260208181526040909120546111c081600861295e565b6111cb85602061295e565b106111e957836111dc82600861295e565b6111e69190612b09565b91505b506000938452600160209081526040808620948652939052919092205492909150565b6044356000806008830186111561122b5763fe2549876000526004601cfd5b60c083901b6080526088838682378087017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80151908490207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f02000000000000000000000000000000000000000000000000000000000000001760008181526002602090815260408083208b8452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584845282528083209a83529981528982209390935590815290819052959095209190915550505050565b600061132361053985612851565b9050600061133187876103ed565b9050611344848483886020013586610891565b61137a576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020850135156113b6576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113be61212d565b6113cc8161067b8880612976565b6113d581611638565b8560400135816040516020016113eb9190612920565b6040516020818303038152906040528051906020012003611438576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9390931660009081526013602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011790555050565b60008160000151826020015183604001516040516020016114c093929190612b45565b604051602081830303815290604052805190602001209050919050565b60888151146114eb57600080fd5b602081016020830161156c565b8260031b8201518060001a8160011a60081b178160021a60101b8260031a60181b17178160041a60201b8260051a60281b178260061a60301b8360071a60381b171717905061156681611551868560059190911b015190565b1867ffffffffffffffff16600586901b840152565b50505050565b611578600083836114f8565b611584600183836114f8565b611590600283836114f8565b61159c600383836114f8565b6115a8600483836114f8565b6115b4600583836114f8565b6115c0600683836114f8565b6115cc600783836114f8565b6115d8600883836114f8565b6115e4600983836114f8565b6115f0600a83836114f8565b6115fc600b83836114f8565b611608600c83836114f8565b611614600d83836114f8565b611620600e83836114f8565b61162c600f83836114f8565b611566601083836114f8565b6040805178010000000000008082800000000000808a8000000080008000602082015279808b00000000800000018000000080008081800000000000800991810191909152788a00000000000000880000000080008009000000008000000a60608201527b8000808b800000000000008b8000000000008089800000000000800360808201527f80000000000080028000000000000080000000000000800a800000008000000a60a08201527f800000008000808180000000000080800000000080000001800000008000800860c082015260009060e00160405160208183030381529060405290506020820160208201611db4565b6102808101516101e082015161014083015160a0840151845118189118186102a082015161020083015161016084015160c0850151602086015118189118186102c083015161022084015161018085015160e0860151604087015118189118186102e08401516102408501516101a0860151610100870151606088015118189118186103008501516102608601516101c0870151610120880151608089015118189118188084603f1c6117eb8660011b67ffffffffffffffff1690565b18188584603f1c6118068660011b67ffffffffffffffff1690565b18188584603f1c6118218660011b67ffffffffffffffff1690565b181895508483603f1c61183e8560011b67ffffffffffffffff1690565b181894508387603f1c61185b8960011b67ffffffffffffffff1690565b60208b01518b51861867ffffffffffffffff168c5291189190911897508118600181901b603f9190911c18935060c08801518118601481901c602c9190911b1867ffffffffffffffff1660208901526101208801518718602c81901c60149190911b1867ffffffffffffffff1660c08901526102c08801518618600381901c603d9190911b1867ffffffffffffffff166101208901526101c08801518718601981901c60279190911b1867ffffffffffffffff166102c08901526102808801518218602e81901c60129190911b1867ffffffffffffffff166101c089015260408801518618600281901c603e9190911b1867ffffffffffffffff166102808901526101808801518618601581901c602b9190911b1867ffffffffffffffff1660408901526101a08801518518602781901c60199190911b1867ffffffffffffffff166101808901526102608801518718603881901c60089190911b1867ffffffffffffffff166101a08901526102e08801518518600881901c60389190911b1867ffffffffffffffff166102608901526101e08801518218601781901c60299190911b1867ffffffffffffffff166102e089015260808801518718602581901c601b9190911b1867ffffffffffffffff166101e08901526103008801518718603281901c600e9190911b1867ffffffffffffffff1660808901526102a08801518118603e81901c60029190911b1867ffffffffffffffff166103008901526101008801518518600981901c60379190911b1867ffffffffffffffff166102a08901526102008801518118601381901c602d9190911b1867ffffffffffffffff1661010089015260a08801518218601c81901c60249190911b1867ffffffffffffffff1661020089015260608801518518602481901c601c9190911b1867ffffffffffffffff1660a08901526102408801518518602b81901c60159190911b1867ffffffffffffffff1660608901526102208801518618603181901c600f9190911b1867ffffffffffffffff166102408901526101608801518118603681901c600a9190911b1867ffffffffffffffff166102208901525060e08701518518603a81901c60069190911b1867ffffffffffffffff166101608801526101408701518118603d81901c60039190911b1867ffffffffffffffff1660e0880152505067ffffffffffffffff81166101408601525050505050565b611bdb8161172e565b805160208201805160408401805160608601805160808801805167ffffffffffffffff871986168a188116808c528619851689188216909952831982169095188516909552841988169091188316909152941990921618811690925260a08301805160c0808601805160e0880180516101008a0180516101208c018051861985168a188d16909a528319821686188c16909652801989169092188a169092528619861618881690529219909216909218841690526101408401805161016086018051610180880180516101a08a0180516101c08c0180518619851689188d169099528319821686188c16909652801988169092188a169092528519851618881690529119909116909118841690526101e08401805161020086018051610220880180516102408a0180516102608c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052610280840180516102a0860180516102c0880180516102e08a0180516103008c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052600386901b850151901c9081189091168252611566565b611dc060008284611bd2565b611dcc60018284611bd2565b611dd860028284611bd2565b611de460038284611bd2565b611df060048284611bd2565b611dfc60058284611bd2565b611e0860068284611bd2565b611e1460078284611bd2565b611e2060088284611bd2565b611e2c60098284611bd2565b611e38600a8284611bd2565b611e44600b8284611bd2565b611e50600c8284611bd2565b611e5c600d8284611bd2565b611e68600e8284611bd2565b611e74600f8284611bd2565b611e8060108284611bd2565b611e8c60118284611bd2565b611e9860128284611bd2565b611ea460138284611bd2565b611eb060148284611bd2565b611ebc60158284611bd2565b611ec860168284611bd2565b61156660178284611bd2565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831617611f7a818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b6060604051905081602082018181018286833760888306808015611fdf576088829003850160808582017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01536001845160001a1784538652611ff1565b60018353608060878401536088850186525b5050505050601f19603f82510116810160405292915050565b60c01c90565b6000612093565b66ff00ff00ff00ff8160081c1667ff00ff00ff00ff006120418360081b67ffffffffffffffff1690565b1617905065ffff0000ffff8160101c1667ffff0000ffff000061206e8360101b67ffffffffffffffff1690565b1617905060008160201c61208c8360201b67ffffffffffffffff1690565b1792915050565b608082015160208301906120ab90612017565b612017565b60408201516120b990612017565b60401b176120d16120a660018460059190911b015190565b825160809190911b906120e390612017565b60c01b17179392505050565b82600f810192821561211d579160200282015b8281111561211d578251825591602001919060010190612102565b50612129929150612145565b5090565b604051806020016040528061214061215a565b905290565b5b808211156121295760008155600101612146565b6040518061032001604052806019906020820280368337509192915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461219d57600080fd5b919050565b600080604083850312156121b557600080fd5b6121be83612179565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610320810167ffffffffffffffff8111828210171561221f5761221f6121cc565b60405290565b6040516060810167ffffffffffffffff8111828210171561221f5761221f6121cc565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561228f5761228f6121cc565b604052919050565b60006103208083850312156122ab57600080fd5b604051602080820167ffffffffffffffff83821081831117156122d0576122d06121cc565b8160405283955087601f8801126122e657600080fd5b6122ee6121fb565b948701949150818886111561230257600080fd5b875b8681101561232a578035838116811461231d5760008081fd5b8452928401928401612304565b50909352509295945050505050565b60006060828403121561234b57600080fd5b50919050565b60008083601f84011261236357600080fd5b50813567ffffffffffffffff81111561237b57600080fd5b6020830191508360208260051b850101111561239657600080fd5b9250929050565b60008060008060008060008060006103e08a8c0312156123bc57600080fd5b6123c58a612179565b985060208a013597506123db8b60408c01612297565b96506103608a013567ffffffffffffffff808211156123f957600080fd5b6124058d838e01612339565b97506103808c013591508082111561241c57600080fd5b6124288d838e01612351565b90975095506103a08c013591508082111561244257600080fd5b61244e8d838e01612339565b94506103c08c013591508082111561246557600080fd5b506124728c828d01612351565b915080935050809150509295985092959850929598565b600080600080600060a086880312156124a157600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b600080604083850312156124d757600080fd5b50508035926020909101359150565b6000602082840312156124f857600080fd5b5035919050565b60008060008060006080868803121561251757600080fd5b853567ffffffffffffffff81111561252e57600080fd5b61253a88828901612351565b9099909850602088013597604081013597506060013595509350505050565b60008083601f84011261256b57600080fd5b50813567ffffffffffffffff81111561258357600080fd5b60208301915083602082850101111561239657600080fd5b600080600080600080608087890312156125b457600080fd5b86359550602087013567ffffffffffffffff808211156125d357600080fd5b6125df8a838b01612559565b909750955060408901359150808211156125f857600080fd5b5061260589828a01612351565b9094509250506060870135801515811461261e57600080fd5b809150509295509295509295565b60008060006060848603121561264157600080fd5b61264a84612179565b95602085013595506040909401359392505050565b60008060006040848603121561267457600080fd5b83359250602084013567ffffffffffffffff81111561269257600080fd5b61269e86828701612559565b9497909650939450505050565b6000806000806000608086880312156126c357600080fd5b6126cc86612179565b945060208601359350604086013567ffffffffffffffff808211156126f057600080fd5b6126fc89838a01612339565b9450606088013591508082111561271257600080fd5b5061271f88828901612351565b969995985093965092949392505050565b803563ffffffff8116811461219d57600080fd5b60008060006060848603121561275957600080fd5b8335925061276960208501612730565b915061277760408501612730565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612814577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361284a5761284a6127af565b5060010190565b60006060823603121561286357600080fd5b61286b612225565b823567ffffffffffffffff8082111561288357600080fd5b9084019036601f83011261289657600080fd5b81356020828211156128aa576128aa6121cc565b6128da817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601612248565b925081835236818386010111156128f057600080fd5b81818501828501376000918301810191909152908352848101359083015250604092830135928101929092525090565b81516103208201908260005b601981101561295557825167ffffffffffffffff1682526020928301929091019060010161292c565b50505092915050565b60008219821115612971576129716127af565b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126129ab57600080fd5b83018035915067ffffffffffffffff8211156129c657600080fd5b60200191503681900382131561239657600080fd5b600181815b80851115612a3457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612a1a57612a1a6127af565b80851615612a2757918102915b93841c93908002906129e0565b509250929050565b600082612a4b57506001612af7565b81612a5857506000612af7565b8160018114612a6e5760028114612a7857612a94565b6001915050612af7565b60ff841115612a8957612a896127af565b50506001821b612af7565b5060208310610133831016604e8410600b8410161715612ab7575081810a612af7565b612ac183836129db565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612af357612af36127af565b0290505b92915050565b6000611f7a8383612a3c565b600082821015612b1b57612b1b6127af565b500390565b600063ffffffff83811690831681811015612b3d57612b3d6127af565b039392505050565b6000845160005b81811015612b665760208188018101518583015201612b4c565b81811115612b75576000828501525b509190910192835250602082015260400191905056fea164736f6c634300080f000a",
}

// AlphabetVMABI is the input ABI used to generate the binding from.
// Deprecated: Use AlphabetVMMetaData.ABI instead.
var AlphabetVMABI = AlphabetVMMetaData.ABI

// AlphabetVMBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AlphabetVMMetaData.Bin instead.
var AlphabetVMBin = AlphabetVMMetaData.Bin

// DeployAlphabetVM deploys a new Ethereum contract, binding an instance of AlphabetVM to it.
func DeployAlphabetVM(auth *bind.TransactOpts, backend bind.ContractBackend, _absolutePrestate [32]byte) (common.Address, *types.Transaction, *AlphabetVM, error) {
	parsed, err := AlphabetVMMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AlphabetVMBin), backend, _absolutePrestate)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AlphabetVM{AlphabetVMCaller: AlphabetVMCaller{contract: contract}, AlphabetVMTransactor: AlphabetVMTransactor{contract: contract}, AlphabetVMFilterer: AlphabetVMFilterer{contract: contract}}, nil
}

// AlphabetVM is an auto generated Go binding around an Ethereum contract.
type AlphabetVM struct {
	AlphabetVMCaller     // Read-only binding to the contract
	AlphabetVMTransactor // Write-only binding to the contract
	AlphabetVMFilterer   // Log filterer for contract events
}

// AlphabetVMCaller is an auto generated read-only Go binding around an Ethereum contract.
type AlphabetVMCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AlphabetVMTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AlphabetVMFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AlphabetVMSession struct {
	Contract     *AlphabetVM       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AlphabetVMCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AlphabetVMCallerSession struct {
	Contract *AlphabetVMCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AlphabetVMTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AlphabetVMTransactorSession struct {
	Contract     *AlphabetVMTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AlphabetVMRaw is an auto generated low-level Go binding around an Ethereum contract.
type AlphabetVMRaw struct {
	Contract *AlphabetVM // Generic contract binding to access the raw methods on
}

// AlphabetVMCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AlphabetVMCallerRaw struct {
	Contract *AlphabetVMCaller // Generic read-only contract binding to access the raw methods on
}

// AlphabetVMTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AlphabetVMTransactorRaw struct {
	Contract *AlphabetVMTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAlphabetVM creates a new instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVM(address common.Address, backend bind.ContractBackend) (*AlphabetVM, error) {
	contract, err := bindAlphabetVM(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AlphabetVM{AlphabetVMCaller: AlphabetVMCaller{contract: contract}, AlphabetVMTransactor: AlphabetVMTransactor{contract: contract}, AlphabetVMFilterer: AlphabetVMFilterer{contract: contract}}, nil
}

// NewAlphabetVMCaller creates a new read-only instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMCaller(address common.Address, caller bind.ContractCaller) (*AlphabetVMCaller, error) {
	contract, err := bindAlphabetVM(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMCaller{contract: contract}, nil
}

// NewAlphabetVMTransactor creates a new write-only instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMTransactor(address common.Address, transactor bind.ContractTransactor) (*AlphabetVMTransactor, error) {
	contract, err := bindAlphabetVM(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMTransactor{contract: contract}, nil
}

// NewAlphabetVMFilterer creates a new log filterer instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMFilterer(address common.Address, filterer bind.ContractFilterer) (*AlphabetVMFilterer, error) {
	contract, err := bindAlphabetVM(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMFilterer{contract: contract}, nil
}

// bindAlphabetVM binds a generic wrapper to an already deployed contract.
func bindAlphabetVM(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AlphabetVMABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AlphabetVM *AlphabetVMRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AlphabetVM.Contract.AlphabetVMCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AlphabetVM *AlphabetVMRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AlphabetVM.Contract.AlphabetVMTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AlphabetVM *AlphabetVMRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AlphabetVM.Contract.AlphabetVMTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AlphabetVM *AlphabetVMCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AlphabetVM.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AlphabetVM *AlphabetVMTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AlphabetVM.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AlphabetVM *AlphabetVMTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AlphabetVM.Contract.contract.Transact(opts, method, params...)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AlphabetVM.contract.Call(opts, &out, "oracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMSession) Oracle() (common.Address, error) {
	return _AlphabetVM.Contract.Oracle(&_AlphabetVM.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMCallerSession) Oracle() (common.Address, error) {
	return _AlphabetVM.Contract.Oracle(&_AlphabetVM.CallOpts)
}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMCaller) Step(opts *bind.CallOpts, _stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _AlphabetVM.contract.Call(opts, &out, "step", _stateData, arg1, _localContext)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMSession) Step(_stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	return _AlphabetVM.Contract.Step(&_AlphabetVM.CallOpts, _stateData, arg1, _localContext)
}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMCallerSession) Step(_stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	return _AlphabetVM.Contract.Step(&_AlphabetVM.CallOpts, _stateData, arg1, _localContext)
}
