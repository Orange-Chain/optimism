// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AlphabetVMMetaData contains all meta data concerning the AlphabetVM contract.
var AlphabetVMMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_absolutePrestate\",\"type\":\"bytes32\",\"internalType\":\"Claim\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"oracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPreimageOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"step\",\"inputs\":[{\"name\":\"_stateData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_localContext\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"postState_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"}]",
	Bin: "0x60a060405234801561001057600080fd5b506040516132b73803806132b783398101604081905261002f91610090565b608081905260405161004090610083565b604051809103906000f08015801561005c573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055506100a9565b612cf0806105c783390190565b6000602082840312156100a257600080fd5b5051919050565b6080516105046100c3600039600060af01526105046000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dc0d1d01461003b578063e14ced3214610085575b600080fd5b60005461005b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610098610093366004610395565b6100a6565b60405190815260200161007c565b600080600060087f0000000000000000000000000000000000000000000000000000000000000000901b600889896040516100e2929190610409565b6040518091039020901b036101d9576000805473ffffffffffffffffffffffffffffffffffffffff1663e03110e161011b60048861029f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152600060248201526044016040805180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610419565b50640ffffffff0607c82901c169350905063ffffffff608082901c1660006101c38a8c018c61043d565b90506101cf8582610485565b9350505050610206565b6101e58789018961049d565b9092509050816101f4816104bf565b9250508080610202906104bf565b9150505b6040805160208101849052908101829052606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001798975050505050505050565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831617610345818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b60008083601f84011261035e57600080fd5b50813567ffffffffffffffff81111561037657600080fd5b60208301915083602082850101111561038e57600080fd5b9250929050565b6000806000806000606086880312156103ad57600080fd5b853567ffffffffffffffff808211156103c557600080fd5b6103d189838a0161034c565b909750955060208801359150808211156103ea57600080fd5b506103f78882890161034c565b96999598509660400135949350505050565b8183823760009101908152919050565b6000806040838503121561042c57600080fd5b505080516020909101519092909150565b60006020828403121561044f57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561049857610498610456565b500190565b600080604083850312156104b057600080fd5b50508035926020909101359150565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104f0576104f0610456565b506001019056fea164736f6c634300080f000a60806040523480156200001157600080fd5b5060005b6200002360016010620000db565b811015620000be5760038160108110620000415762000041620000f5565b015460038260108110620000595762000059620000f5565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012060038260016200009491906200010b565b60108110620000a757620000a7620000f5565b015580620000b58162000126565b91505062000015565b5062000142565b634e487b7160e01b600052601160045260246000fd5b600082821015620000f057620000f0620000c5565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115620001215762000121620000c5565b500190565b6000600182016200013b576200013b620000c5565b5060010190565b612b9e80620001526000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80639f99ef82116100cd578063e03110e111610081578063ec5efcbc11610066578063ec5efcbc14610304578063faf37bc714610317578063fef2b4ed1461039f57600080fd5b8063e03110e1146102c9578063e1592611146102f157600080fd5b8063b4801e61116100b2578063b4801e6114610299578063c3a079ed146102ac578063d18534b5146102b657600080fd5b80639f99ef821461025b578063b2e67ba81461026e57600080fd5b806352f0f3ad116101245780636551927b116101095780636551927b146101df5780637ac547671461020a5780638542cf501461021d57600080fd5b806352f0f3ad146101a157806361238bde146101b457600080fd5b80630359a563146101565780632055b36b1461017c5780633909af5c146101845780634d52b4c914610199575b600080fd5b61016961016436600461223d565b6103bf565b6040519081526020015b60405180910390f35b610169601081565b610197610192366004612438565b6104f7565b005b610169610745565b6101696101af366004612524565b610760565b6101696101c236600461255f565b600160209081526000928352604080842090915290825290205481565b6101696101ed36600461223d565b601460209081526000928352604080842090915290825290205481565b610169610218366004612581565b610835565b61024b61022b36600461255f565b600260209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610173565b6101976102693660046125dc565b61084c565b61016961027c36600461223d565b601560209081526000928352604080842090915290825290205481565b6101696102a736600461266d565b610d3a565b6101696201518081565b6101976102c4366004612438565b610d6c565b6102dc6102d736600461255f565b61115d565b60408051928352602083019190915201610173565b6101976102ff3660046126a0565b61124e565b6101976103123660046126ec565b611357565b610197610325366004612785565b3360009081526014602090815260408083209583529490529290922080547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1660a09290921b7fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff169190911760809290921b919091179055565b6101696103ad366004612581565b60006020819052908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260146020908152604080832084845290915281205481906104029060601c63ffffffff1690565b63ffffffff16905060005b60108110156104ef57816001166001036104955773ffffffffffffffffffffffffffffffffffffffff8516600090815260136020908152604080832087845290915290208160108110610462576104626127c1565b015460408051602081019290925281018490526060016040516020818303038152906040528051906020012092506104d6565b82600382601081106104a9576104a96127c1565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012092505b60019190911c90806104e78161281f565b91505061040d565b505092915050565b60006105038a8a6103bf565b905061052686868360208b013561052161051c8d612857565b6114d1565b611511565b80156105445750610544838383602088013561052161051c8a612857565b61057a576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660400135886040516020016105909190612926565b60405160208183030381529060405280519060200120146105dd576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360200135876020013560016105f39190612964565b1461062a576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61067288610638868061297c565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061157292505050565b61067b886116cd565b8360400135886040516020016106919190612926565b60405160208183030381529060405280519060200120036106de576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9590951660009081526014602090815260408083209683529590529390932080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550505050565b600161075360106002612b03565b61075d9190612b0f565b81565b600061076c8686611f69565b9050610779836008612964565b8211806107865750602083115b156107bd576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602081815260c085901b82526008959095528251828252600286526040808320858452875280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558484528752808320948352938652838220558181529384905292205592915050565b6003816010811061084557600080fd5b0154905081565b606081156108655761085e8686612016565b905061089f565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293505050505b3360009081526013602090815260408083208a845290915280822081516102008101928390529160109082845b8154815260200190600101908083116108cc5750503360009081526014602090815260408083208f845290915290205493945061090e925083915061209f9050565b63ffffffff1660000361094d576040517f87138d5c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109578160c01c90565b67ffffffffffffffff1615610998576040517f475a253500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109aa8260a01c63ffffffff1690565b67ffffffffffffffff16905060006109c88360401c63ffffffff1690565b63ffffffff1690506008821080156109de575080155b15610a655760006109f58460801c63ffffffff1690565b905060008160c01b6000528b356008528351905080601560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f8152602001908152602001600020819055505050610b1a565b60088210158015610a83575080610a7d600884612b0f565b92508210155b8015610a975750610a948982612964565b82105b15610b1a576000610aa88284612b0f565b905089610ab6826020612964565b10158015610ac2575086155b15610af9576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526015602090815260408083208f84529091529020908b013590555b6000610b2c8460601c63ffffffff1690565b63ffffffff169050855160208701608882048a1415608883061715610b59576307b1daf16000526004601cfd5b60405160c8810160405260005b83811015610c09578083018051835260208101516020840152604081015160408401526060810151606084015260808101516080840152508460888301526088810460051b8d013560a883015260c882206001860195508560005b610200811015610bfe576001821615610bde5782818d0152610bfe565b8b81015160009081526020938452604090209260019290921c9101610bc1565b505050608801610b66565b50505050600160106002610c1d9190612b03565b610c279190612b0f565b811115610c60576040517f6229572300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526013602090815260408083208f84529091529020610c869086601061218a565b50610ce6610c94838c612964565b60401b7fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff606084901b167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff8716171790565b93508615610d115777ffffffffffffffffffffffffffffffffffffffffffffffff84164260c01b1793505b50503360009081526014602090815260408083209c83529b905299909920555050505050505050565b60136020528260005260406000206020528160005260406000208160108110610d6257600080fd5b0154925083915050565b73ffffffffffffffffffffffffffffffffffffffff891660009081526014602090815260408083208b845290915290205467ffffffffffffffff811615610ddf576040517fc334f06900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62015180610ded8260c01c90565b610e019067ffffffffffffffff1642612b0f565b11610e38576040517f55d4cbf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e448b8b6103bf565b9050610e5d87878360208c013561052161051c8e612857565b8015610e7b5750610e7b848483602089013561052161051c8b612857565b610eb1576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b876040013589604051602001610ec79190612926565b6040516020818303038152906040528051906020012014610f14576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846020013588602001356001610f2a9190612964565b141580610f5c57506001610f448360601c63ffffffff1690565b610f4e9190612b26565b63ffffffff16856020013514155b15610f93576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610fa58360801c63ffffffff1690565b63ffffffff16905080610fbe8460401c63ffffffff1690565b63ffffffff1614610ffb576040517f7b1dafd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061100d8460a01c63ffffffff1690565b67ffffffffffffffff169050611024826008612964565b811061105c576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61106a8b610638898061297c565b6110738b6116cd565b600061107e8c6120ab565b9050600160026000838152602001908152602001600020600084815260200190815260200160002060006101000a81548160ff021916908315150217905550601560008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008e8152602001908152602001600020546001600083815260200190815260200160002060008481526020019081526020016000208190555082600080838152602001908152602001600020819055505050505050505050505050505050565b6000828152600260209081526040808320848452909152812054819060ff166111e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7072652d696d616765206d757374206578697374000000000000000000000000604482015260640160405180910390fd5b5060008381526020818152604090912054611202816008612964565b61120d856020612964565b1061122b578361121e826008612964565b6112289190612b0f565b91505b506000938452600160209081526040808620948652939052919092205492909150565b6044356000806008830186111561126d5763fe2549876000526004601cfd5b60c083901b6080526088838682378087017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80151908490207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f02000000000000000000000000000000000000000000000000000000000000001760008181526002602090815260408083208b8452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584845282528083209a83529981528982209390935590815290819052959095209190915550505050565b600061136386866103bf565b905061137c838383602088013561052161051c8a612857565b6113b2576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020840135156113ee576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113f66121c8565b61140481610638878061297c565b61140d816116cd565b8460400135816040516020016114239190612926565b6040516020818303038152906040528051906020012003611470576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9290921660009081526014602090815260408083209383529290522080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550565b60008160000151826020015183604001516040516020016114f493929190612b4b565b604051602081830303815290604052805190602001209050919050565b60008160005b6010811015611565578060051b880135600186831c166001811461154a576000848152602083905260409020935061155b565b600082815260208590526040902093505b5050600101611517565b5090931495945050505050565b608881511461158057600080fd5b6020810160208301611601565b8260031b8201518060001a8160011a60081b178160021a60101b8260031a60181b17178160041a60201b8260051a60281b178260061a60301b8360071a60381b17171790506115fb816115e6868560059190911b015190565b1867ffffffffffffffff16600586901b840152565b50505050565b61160d6000838361158d565b6116196001838361158d565b6116256002838361158d565b6116316003838361158d565b61163d6004838361158d565b6116496005838361158d565b6116556006838361158d565b6116616007838361158d565b61166d6008838361158d565b6116796009838361158d565b611685600a838361158d565b611691600b838361158d565b61169d600c838361158d565b6116a9600d838361158d565b6116b5600e838361158d565b6116c1600f838361158d565b6115fb6010838361158d565b6040805178010000000000008082800000000000808a8000000080008000602082015279808b00000000800000018000000080008081800000000000800991810191909152788a00000000000000880000000080008009000000008000000a60608201527b8000808b800000000000008b8000000000008089800000000000800360808201527f80000000000080028000000000000080000000000000800a800000008000000a60a08201527f800000008000808180000000000080800000000080000001800000008000800860c082015260009060e00160405160208183030381529060405290506020820160208201611e49565b6102808101516101e082015161014083015160a0840151845118189118186102a082015161020083015161016084015160c0850151602086015118189118186102c083015161022084015161018085015160e0860151604087015118189118186102e08401516102408501516101a0860151610100870151606088015118189118186103008501516102608601516101c0870151610120880151608089015118189118188084603f1c6118808660011b67ffffffffffffffff1690565b18188584603f1c61189b8660011b67ffffffffffffffff1690565b18188584603f1c6118b68660011b67ffffffffffffffff1690565b181895508483603f1c6118d38560011b67ffffffffffffffff1690565b181894508387603f1c6118f08960011b67ffffffffffffffff1690565b60208b01518b51861867ffffffffffffffff168c5291189190911897508118600181901b603f9190911c18935060c08801518118601481901c602c9190911b1867ffffffffffffffff1660208901526101208801518718602c81901c60149190911b1867ffffffffffffffff1660c08901526102c08801518618600381901c603d9190911b1867ffffffffffffffff166101208901526101c08801518718601981901c60279190911b1867ffffffffffffffff166102c08901526102808801518218602e81901c60129190911b1867ffffffffffffffff166101c089015260408801518618600281901c603e9190911b1867ffffffffffffffff166102808901526101808801518618601581901c602b9190911b1867ffffffffffffffff1660408901526101a08801518518602781901c60199190911b1867ffffffffffffffff166101808901526102608801518718603881901c60089190911b1867ffffffffffffffff166101a08901526102e08801518518600881901c60389190911b1867ffffffffffffffff166102608901526101e08801518218601781901c60299190911b1867ffffffffffffffff166102e089015260808801518718602581901c601b9190911b1867ffffffffffffffff166101e08901526103008801518718603281901c600e9190911b1867ffffffffffffffff1660808901526102a08801518118603e81901c60029190911b1867ffffffffffffffff166103008901526101008801518518600981901c60379190911b1867ffffffffffffffff166102a08901526102008801518118601381901c602d9190911b1867ffffffffffffffff1661010089015260a08801518218601c81901c60249190911b1867ffffffffffffffff1661020089015260608801518518602481901c601c9190911b1867ffffffffffffffff1660a08901526102408801518518602b81901c60159190911b1867ffffffffffffffff1660608901526102208801518618603181901c600f9190911b1867ffffffffffffffff166102408901526101608801518118603681901c600a9190911b1867ffffffffffffffff166102208901525060e08701518518603a81901c60069190911b1867ffffffffffffffff166101608801526101408701518118603d81901c60039190911b1867ffffffffffffffff1660e0880152505067ffffffffffffffff81166101408601525050505050565b611c70816117c3565b805160208201805160408401805160608601805160808801805167ffffffffffffffff871986168a188116808c528619851689188216909952831982169095188516909552841988169091188316909152941990921618811690925260a08301805160c0808601805160e0880180516101008a0180516101208c018051861985168a188d16909a528319821686188c16909652801989169092188a169092528619861618881690529219909216909218841690526101408401805161016086018051610180880180516101a08a0180516101c08c0180518619851689188d169099528319821686188c16909652801988169092188a169092528519851618881690529119909116909118841690526101e08401805161020086018051610220880180516102408a0180516102608c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052610280840180516102a0860180516102c0880180516102e08a0180516103008c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052600386901b850151901c90811890911682526115fb565b611e5560008284611c67565b611e6160018284611c67565b611e6d60028284611c67565b611e7960038284611c67565b611e8560048284611c67565b611e9160058284611c67565b611e9d60068284611c67565b611ea960078284611c67565b611eb560088284611c67565b611ec160098284611c67565b611ecd600a8284611c67565b611ed9600b8284611c67565b611ee5600c8284611c67565b611ef1600d8284611c67565b611efd600e8284611c67565b611f09600f8284611c67565b611f1560108284611c67565b611f2160118284611c67565b611f2d60128284611c67565b611f3960138284611c67565b611f4560148284611c67565b611f5160158284611c67565b611f5d60168284611c67565b6115fb60178284611c67565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83161761200f818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b6060604051905081602082018181018286833760888306808015612074576088829003850160808582017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01536001845160001a1784538652612086565b60018353608060878401536088850186525b5050505050601f19603f82510116810160405292915050565b60801c63ffffffff1690565b600061212e565b66ff00ff00ff00ff8160081c1667ff00ff00ff00ff006120dc8360081b67ffffffffffffffff1690565b1617905065ffff0000ffff8160101c1667ffff0000ffff00006121098360101b67ffffffffffffffff1690565b1617905060008160201c6121278360201b67ffffffffffffffff1690565b1792915050565b60808201516020830190612146906120b2565b6120b2565b6040820151612154906120b2565b60401b1761216c61214160018460059190911b015190565b825160809190911b9061217e906120b2565b60c01b17179392505050565b82601081019282156121b8579160200282015b828111156121b857825182559160200191906001019061219d565b506121c49291506121e0565b5090565b60405180602001604052806121db6121f5565b905290565b5b808211156121c457600081556001016121e1565b6040518061032001604052806019906020820280368337509192915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461223857600080fd5b919050565b6000806040838503121561225057600080fd5b61225983612214565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610320810167ffffffffffffffff811182821017156122ba576122ba612267565b60405290565b6040516060810167ffffffffffffffff811182821017156122ba576122ba612267565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561232a5761232a612267565b604052919050565b600061032080838503121561234657600080fd5b604051602080820167ffffffffffffffff838210818311171561236b5761236b612267565b8160405283955087601f88011261238157600080fd5b612389612296565b948701949150818886111561239d57600080fd5b875b868110156123c557803583811681146123b85760008081fd5b845292840192840161239f565b50909352509295945050505050565b6000606082840312156123e657600080fd5b50919050565b60008083601f8401126123fe57600080fd5b50813567ffffffffffffffff81111561241657600080fd5b6020830191508360208260051b850101111561243157600080fd5b9250929050565b60008060008060008060008060006103e08a8c03121561245757600080fd5b6124608a612214565b985060208a013597506124768b60408c01612332565b96506103608a013567ffffffffffffffff8082111561249457600080fd5b6124a08d838e016123d4565b97506103808c01359150808211156124b757600080fd5b6124c38d838e016123ec565b90975095506103a08c01359150808211156124dd57600080fd5b6124e98d838e016123d4565b94506103c08c013591508082111561250057600080fd5b5061250d8c828d016123ec565b915080935050809150509295985092959850929598565b600080600080600060a0868803121561253c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806040838503121561257257600080fd5b50508035926020909101359150565b60006020828403121561259357600080fd5b5035919050565b60008083601f8401126125ac57600080fd5b50813567ffffffffffffffff8111156125c457600080fd5b60208301915083602082850101111561243157600080fd5b600080600080600080608087890312156125f557600080fd5b86359550602087013567ffffffffffffffff8082111561261457600080fd5b6126208a838b0161259a565b9097509550604089013591508082111561263957600080fd5b5061264689828a016123ec565b9094509250506060870135801515811461265f57600080fd5b809150509295509295509295565b60008060006060848603121561268257600080fd5b61268b84612214565b95602085013595506040909401359392505050565b6000806000604084860312156126b557600080fd5b83359250602084013567ffffffffffffffff8111156126d357600080fd5b6126df8682870161259a565b9497909650939450505050565b60008060008060006080868803121561270457600080fd5b61270d86612214565b945060208601359350604086013567ffffffffffffffff8082111561273157600080fd5b61273d89838a016123d4565b9450606088013591508082111561275357600080fd5b50612760888289016123ec565b969995985093965092949392505050565b803563ffffffff8116811461223857600080fd5b60008060006060848603121561279a57600080fd5b833592506127aa60208501612771565b91506127b860408501612771565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612850576128506127f0565b5060010190565b60006060823603121561286957600080fd5b6128716122c0565b823567ffffffffffffffff8082111561288957600080fd5b9084019036601f83011261289c57600080fd5b81356020828211156128b0576128b0612267565b6128e0817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116016122e3565b925081835236818386010111156128f657600080fd5b81818501828501376000918301810191909152908352848101359083015250604092830135928101929092525090565b81516103208201908260005b601981101561295b57825167ffffffffffffffff16825260209283019290910190600101612932565b50505092915050565b60008219821115612977576129776127f0565b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126129b157600080fd5b83018035915067ffffffffffffffff8211156129cc57600080fd5b60200191503681900382131561243157600080fd5b600181815b80851115612a3a57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612a2057612a206127f0565b80851615612a2d57918102915b93841c93908002906129e6565b509250929050565b600082612a5157506001612afd565b81612a5e57506000612afd565b8160018114612a745760028114612a7e57612a9a565b6001915050612afd565b60ff841115612a8f57612a8f6127f0565b50506001821b612afd565b5060208310610133831016604e8410600b8410161715612abd575081810a612afd565b612ac783836129e1565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612af957612af96127f0565b0290505b92915050565b600061200f8383612a42565b600082821015612b2157612b216127f0565b500390565b600063ffffffff83811690831681811015612b4357612b436127f0565b039392505050565b6000845160005b81811015612b6c5760208188018101518583015201612b52565b81811115612b7b576000828501525b509190910192835250602082015260400191905056fea164736f6c634300080f000a",
}

// AlphabetVMABI is the input ABI used to generate the binding from.
// Deprecated: Use AlphabetVMMetaData.ABI instead.
var AlphabetVMABI = AlphabetVMMetaData.ABI

// AlphabetVMBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AlphabetVMMetaData.Bin instead.
var AlphabetVMBin = AlphabetVMMetaData.Bin

// DeployAlphabetVM deploys a new Ethereum contract, binding an instance of AlphabetVM to it.
func DeployAlphabetVM(auth *bind.TransactOpts, backend bind.ContractBackend, _absolutePrestate [32]byte) (common.Address, *types.Transaction, *AlphabetVM, error) {
	parsed, err := AlphabetVMMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AlphabetVMBin), backend, _absolutePrestate)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AlphabetVM{AlphabetVMCaller: AlphabetVMCaller{contract: contract}, AlphabetVMTransactor: AlphabetVMTransactor{contract: contract}, AlphabetVMFilterer: AlphabetVMFilterer{contract: contract}}, nil
}

// AlphabetVM is an auto generated Go binding around an Ethereum contract.
type AlphabetVM struct {
	AlphabetVMCaller     // Read-only binding to the contract
	AlphabetVMTransactor // Write-only binding to the contract
	AlphabetVMFilterer   // Log filterer for contract events
}

// AlphabetVMCaller is an auto generated read-only Go binding around an Ethereum contract.
type AlphabetVMCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AlphabetVMTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AlphabetVMFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AlphabetVMSession struct {
	Contract     *AlphabetVM       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AlphabetVMCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AlphabetVMCallerSession struct {
	Contract *AlphabetVMCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AlphabetVMTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AlphabetVMTransactorSession struct {
	Contract     *AlphabetVMTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AlphabetVMRaw is an auto generated low-level Go binding around an Ethereum contract.
type AlphabetVMRaw struct {
	Contract *AlphabetVM // Generic contract binding to access the raw methods on
}

// AlphabetVMCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AlphabetVMCallerRaw struct {
	Contract *AlphabetVMCaller // Generic read-only contract binding to access the raw methods on
}

// AlphabetVMTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AlphabetVMTransactorRaw struct {
	Contract *AlphabetVMTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAlphabetVM creates a new instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVM(address common.Address, backend bind.ContractBackend) (*AlphabetVM, error) {
	contract, err := bindAlphabetVM(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AlphabetVM{AlphabetVMCaller: AlphabetVMCaller{contract: contract}, AlphabetVMTransactor: AlphabetVMTransactor{contract: contract}, AlphabetVMFilterer: AlphabetVMFilterer{contract: contract}}, nil
}

// NewAlphabetVMCaller creates a new read-only instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMCaller(address common.Address, caller bind.ContractCaller) (*AlphabetVMCaller, error) {
	contract, err := bindAlphabetVM(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMCaller{contract: contract}, nil
}

// NewAlphabetVMTransactor creates a new write-only instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMTransactor(address common.Address, transactor bind.ContractTransactor) (*AlphabetVMTransactor, error) {
	contract, err := bindAlphabetVM(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMTransactor{contract: contract}, nil
}

// NewAlphabetVMFilterer creates a new log filterer instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMFilterer(address common.Address, filterer bind.ContractFilterer) (*AlphabetVMFilterer, error) {
	contract, err := bindAlphabetVM(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMFilterer{contract: contract}, nil
}

// bindAlphabetVM binds a generic wrapper to an already deployed contract.
func bindAlphabetVM(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AlphabetVMABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AlphabetVM *AlphabetVMRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AlphabetVM.Contract.AlphabetVMCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AlphabetVM *AlphabetVMRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AlphabetVM.Contract.AlphabetVMTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AlphabetVM *AlphabetVMRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AlphabetVM.Contract.AlphabetVMTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AlphabetVM *AlphabetVMCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AlphabetVM.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AlphabetVM *AlphabetVMTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AlphabetVM.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AlphabetVM *AlphabetVMTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AlphabetVM.Contract.contract.Transact(opts, method, params...)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AlphabetVM.contract.Call(opts, &out, "oracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMSession) Oracle() (common.Address, error) {
	return _AlphabetVM.Contract.Oracle(&_AlphabetVM.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMCallerSession) Oracle() (common.Address, error) {
	return _AlphabetVM.Contract.Oracle(&_AlphabetVM.CallOpts)
}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMCaller) Step(opts *bind.CallOpts, _stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _AlphabetVM.contract.Call(opts, &out, "step", _stateData, arg1, _localContext)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMSession) Step(_stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	return _AlphabetVM.Contract.Step(&_AlphabetVM.CallOpts, _stateData, arg1, _localContext)
}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMCallerSession) Step(_stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	return _AlphabetVM.Contract.Step(&_AlphabetVM.CallOpts, _stateData, arg1, _localContext)
}
