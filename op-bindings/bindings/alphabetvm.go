// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// AlphabetVMMetaData contains all meta data concerning the AlphabetVM contract.
var AlphabetVMMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_absolutePrestate\",\"type\":\"bytes32\",\"internalType\":\"Claim\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"oracle\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIPreimageOracle\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"step\",\"inputs\":[{\"name\":\"_stateData\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"_localContext\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"postState_\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"}]",
	Bin: "0x60a060405234801561001057600080fd5b506040516131e23803806131e283398101604081905261002f91610090565b608081905260405161004090610083565b604051809103906000f08015801561005c573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b0392909216919091179055506100a9565b612c1b806105c783390190565b6000602082840312156100a257600080fd5b5051919050565b6080516105046100c3600039600060af01526105046000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637dc0d1d01461003b578063e14ced3214610085575b600080fd5b60005461005b9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b610098610093366004610395565b6100a6565b60405190815260200161007c565b600080600060087f0000000000000000000000000000000000000000000000000000000000000000901b600889896040516100e2929190610409565b6040518091039020901b036101d9576000805473ffffffffffffffffffffffffffffffffffffffff1663e03110e161011b60048861029f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526004810191909152600060248201526044016040805180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101999190610419565b50640ffffffff0607c82901c169350905063ffffffff608082901c1660006101c38a8c018c61043d565b90506101cf8582610485565b9350505050610206565b6101e58789018961049d565b9092509050816101f4816104bf565b9250508080610202906104bf565b9150505b6040805160208101849052908101829052606001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001798975050505050505050565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831617610345818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b60008083601f84011261035e57600080fd5b50813567ffffffffffffffff81111561037657600080fd5b60208301915083602082850101111561038e57600080fd5b9250929050565b6000806000806000606086880312156103ad57600080fd5b853567ffffffffffffffff808211156103c557600080fd5b6103d189838a0161034c565b909750955060208801359150808211156103ea57600080fd5b506103f78882890161034c565b96999598509660400135949350505050565b8183823760009101908152919050565b6000806040838503121561042c57600080fd5b505080516020909101519092909150565b60006020828403121561044f57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561049857610498610456565b500190565b600080604083850312156104b057600080fd5b50508035926020909101359150565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104f0576104f0610456565b506001019056fea164736f6c634300080f000a60806040523480156200001157600080fd5b5060005b620000236001600f620000db565b811015620000be57600381600f8110620000415762000041620000f5565b0154600382600f8110620000595762000059620000f5565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012060038260016200009491906200010b565b600f8110620000a757620000a7620000f5565b015580620000b58162000126565b91505062000015565b5062000142565b634e487b7160e01b600052601160045260246000fd5b600082821015620000f057620000f0620000c5565b500390565b634e487b7160e01b600052603260045260246000fd5b60008219821115620001215762000121620000c5565b500190565b6000600182016200013b576200013b620000c5565b5060010190565b612ac980620001526000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80639f99ef82116100cd578063e03110e111610081578063ec5efcbc11610066578063ec5efcbc14610304578063faf37bc714610317578063fef2b4ed1461039f57600080fd5b8063e03110e1146102c9578063e1592611146102f157600080fd5b8063b4801e61116100b2578063b4801e6114610299578063c3a079ed146102ac578063d18534b5146102b657600080fd5b80639f99ef821461025b578063b2e67ba81461026e57600080fd5b806352f0f3ad116101245780636551927b116101095780636551927b146101df5780637ac547671461020a5780638542cf501461021d57600080fd5b806352f0f3ad146101a157806361238bde146101b457600080fd5b80630359a563146101565780632055b36b1461017c5780633909af5c146101845780634d52b4c914610199575b600080fd5b61016961016436600461212d565b6103bf565b6040519081526020015b60405180910390f35b610169600f81565b610197610192366004612328565b6104fd565b005b61016961074b565b6101696101af366004612414565b610766565b6101696101c236600461244f565b600160209081526000928352604080842090915290825290205481565b6101696101ed36600461212d565b601360209081526000928352604080842090915290825290205481565b610169610218366004612471565b61083b565b61024b61022b36600461244f565b600260209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610173565b6101976102693660046124cc565b610852565b61016961027c36600461212d565b601460209081526000928352604080842090915290825290205481565b6101696102a736600461255d565b610cf7565b6101696201518081565b6101976102c4366004612328565b610d29565b6102dc6102d736600461244f565b611053565b60408051928352602083019190915201610173565b6101976102ff366004612590565b611144565b6101976103123660046125dc565b61124d565b610197610325366004612675565b3360009081526013602090815260408083209583529490529290922080547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff1660a09290921b7fffffffffffffffffffffffff00000000ffffffffffffffffffffffffffffffff169190911760809290921b919091179055565b6101696103ad366004612471565b60006020819052908152604090205481565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260136020908152604080832084845290915281205481906104029060601c63ffffffff1690565b63ffffffff16905060005b600f8110156104f557816001166001036104955773ffffffffffffffffffffffffffffffffffffffff85166000908152601260209081526040808320878452909152902081600f8110610462576104626126b1565b015460408051602081019290925281018490526060016040516020818303038152906040528051906020012092506104d6565b82600382600f81106104a9576104a96126b1565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012092505b6104e160028361270f565b9150806104ed8161274a565b91505061040d565b505092915050565b60006105098a8a6103bf565b905061052c86868360208b01356105276105228d612782565b6113c7565b611407565b801561054a575061054a83838360208801356105276105228a612782565b610580576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8660400135886040516020016105969190612851565b60405160208183030381529060405280519060200120146105e3576040517f1968a90200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360200135876020013560016105f9919061288f565b14610630576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106788861063e86806128a7565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061146892505050565b610681886115c3565b8360400135886040516020016106979190612851565b60405160208183030381529060405280519060200120036106e4576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9590951660009081526013602090815260408083209683529590529390932080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550505050565b6001610759600f6002612a2e565b6107639190612a3a565b81565b60006107728686611e5f565b905061077f83600861288f565b82118061078c5750602083115b156107c3576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000602081815260c085901b82526008959095528251828252600286526040808320858452875280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091558484528752808320948352938652838220558181529384905292205592915050565b600381600f811061084b57600080fd5b0154905081565b6060811561086b576108648686611f0c565b90506108a5565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293505050505b3360009081526012602090815260408083208a845290915280822081516101e081019283905291600f9082845b8154815260200190600101908083116108d25750503360009081526013602090815260408083208f84529091529020549394506109149250839150611f959050565b67ffffffffffffffff1615610955576040517f475a253500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006109678260a01c63ffffffff1690565b67ffffffffffffffff16905060006109858360401c63ffffffff1690565b63ffffffff16905060088210801561099b575080155b15610a225760006109b28460801c63ffffffff1690565b905060008160c01b6000528b356008528351905080601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f8152602001908152602001600020819055505050610ad7565b60088210158015610a40575080610a3a600884612a3a565b92508210155b8015610a545750610a51898261288f565b82105b15610ad7576000610a658284612a3a565b905089610a7382602061288f565b10158015610a7f575086155b15610ab6576040517ffe25498700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526014602090815260408083208f84529091529020908b013590555b6000610ae98460601c63ffffffff1690565b63ffffffff169050855160208701608882048a1415608883061715610b16576307b1daf16000526004601cfd5b60405160c8810160405260005b83811015610bc6578083018051835260208101516020840152604081015160408401526060810151606084015260808101516080840152508460888301526088810460051b8d013560a883015260c882206001860195508560005b6101e0811015610bbb576001821615610b9b5782818d0152610bbb565b8b81015160009081526020938452604090209260019290921c9101610b7e565b505050608801610b23565b505050506001600f6002610bda9190612a2e565b610be49190612a3a565b811115610c1d576040517f6229572300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526012602090815260408083208f84529091529020610c439086600f61207a565b50610ca3610c51838c61288f565b60401b7fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff606084901b167fffffffffffffffffffffffffffffffff0000000000000000ffffffffffffffff8716171790565b93508615610cce5777ffffffffffffffffffffffffffffffffffffffffffffffff84164260c01b1793505b50503360009081526013602090815260408083209c83529b905299909920555050505050505050565b601260205282600052604060002060205281600052604060002081600f8110610d1f57600080fd5b0154925083915050565b73ffffffffffffffffffffffffffffffffffffffff891660009081526013602090815260408083208b845290915290205462015180610d688260c01c90565b610d7c9067ffffffffffffffff1642612a3a565b11610db3576040517f55d4cbf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff811615610df5576040517fc334f06900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e018b8b6103bf565b9050610e1a87878360208c01356105276105228e612782565b8015610e385750610e3884848360208901356105276105228b612782565b610e6e576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846020013588602001356001610e84919061288f565b141580610eb657506001610e9e8360601c63ffffffff1690565b610ea89190612a51565b63ffffffff16856020013514155b15610eed576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610efd8260801c63ffffffff1690565b63ffffffff16610f138360401c63ffffffff1690565b63ffffffff1614610f50576040517f7b1dafd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f5e8961063e87806128a7565b610f67896115c3565b6000610f728a611f9b565b90508b8b6000610f888660a01c63ffffffff1690565b600085815260026020908152604080832067ffffffffffffffff9490941680845293825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915573ffffffffffffffffffffffffffffffffffffffff88168452601483528184208785528352818420548985529083528184208585529092529091205590506110298660401c63ffffffff1690565b60009485526020859052604090942063ffffffff9094169093555050505050505050505050505050565b6000828152600260209081526040808320848452909152812054819060ff166110dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f7072652d696d616765206d757374206578697374000000000000000000000000604482015260640160405180910390fd5b50600083815260208181526040909120546110f881600861288f565b61110385602061288f565b10611121578361111482600861288f565b61111e9190612a3a565b91505b506000938452600160209081526040808620948652939052919092205492909150565b604435600080600883018611156111635763fe2549876000526004601cfd5b60c083901b6080526088838682378087017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80151908490207effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f02000000000000000000000000000000000000000000000000000000000000001760008181526002602090815260408083208b8452825280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915584845282528083209a83529981528982209390935590815290819052959095209190915550505050565b600061125986866103bf565b905061127283838360208801356105276105228a612782565b6112a8576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020840135156112e4576040517f9a3b119900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112ec6120b8565b6112fa8161063e87806128a7565b611303816115c3565b8460400135816040516020016113199190612851565b6040516020818303038152906040528051906020012003611366576040517f9843145b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505073ffffffffffffffffffffffffffffffffffffffff9290921660009081526013602090815260408083209383529290522080547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117905550565b60008160000151826020015183604001516040516020016113ea93929190612a76565b604051602081830303815290604052805190602001209050919050565b60008160005b600f81101561145b578060051b880135600186831c16600181146114405760008481526020839052604090209350611451565b600082815260208590526040902093505b505060010161140d565b5090931495945050505050565b608881511461147657600080fd5b60208101602083016114f7565b8260031b8201518060001a8160011a60081b178160021a60101b8260031a60181b17178160041a60201b8260051a60281b178260061a60301b8360071a60381b17171790506114f1816114dc868560059190911b015190565b1867ffffffffffffffff16600586901b840152565b50505050565b61150360008383611483565b61150f60018383611483565b61151b60028383611483565b61152760038383611483565b61153360048383611483565b61153f60058383611483565b61154b60068383611483565b61155760078383611483565b61156360088383611483565b61156f60098383611483565b61157b600a8383611483565b611587600b8383611483565b611593600c8383611483565b61159f600d8383611483565b6115ab600e8383611483565b6115b7600f8383611483565b6114f160108383611483565b6040805178010000000000008082800000000000808a8000000080008000602082015279808b00000000800000018000000080008081800000000000800991810191909152788a00000000000000880000000080008009000000008000000a60608201527b8000808b800000000000008b8000000000008089800000000000800360808201527f80000000000080028000000000000080000000000000800a800000008000000a60a08201527f800000008000808180000000000080800000000080000001800000008000800860c082015260009060e00160405160208183030381529060405290506020820160208201611d3f565b6102808101516101e082015161014083015160a0840151845118189118186102a082015161020083015161016084015160c0850151602086015118189118186102c083015161022084015161018085015160e0860151604087015118189118186102e08401516102408501516101a0860151610100870151606088015118189118186103008501516102608601516101c0870151610120880151608089015118189118188084603f1c6117768660011b67ffffffffffffffff1690565b18188584603f1c6117918660011b67ffffffffffffffff1690565b18188584603f1c6117ac8660011b67ffffffffffffffff1690565b181895508483603f1c6117c98560011b67ffffffffffffffff1690565b181894508387603f1c6117e68960011b67ffffffffffffffff1690565b60208b01518b51861867ffffffffffffffff168c5291189190911897508118600181901b603f9190911c18935060c08801518118601481901c602c9190911b1867ffffffffffffffff1660208901526101208801518718602c81901c60149190911b1867ffffffffffffffff1660c08901526102c08801518618600381901c603d9190911b1867ffffffffffffffff166101208901526101c08801518718601981901c60279190911b1867ffffffffffffffff166102c08901526102808801518218602e81901c60129190911b1867ffffffffffffffff166101c089015260408801518618600281901c603e9190911b1867ffffffffffffffff166102808901526101808801518618601581901c602b9190911b1867ffffffffffffffff1660408901526101a08801518518602781901c60199190911b1867ffffffffffffffff166101808901526102608801518718603881901c60089190911b1867ffffffffffffffff166101a08901526102e08801518518600881901c60389190911b1867ffffffffffffffff166102608901526101e08801518218601781901c60299190911b1867ffffffffffffffff166102e089015260808801518718602581901c601b9190911b1867ffffffffffffffff166101e08901526103008801518718603281901c600e9190911b1867ffffffffffffffff1660808901526102a08801518118603e81901c60029190911b1867ffffffffffffffff166103008901526101008801518518600981901c60379190911b1867ffffffffffffffff166102a08901526102008801518118601381901c602d9190911b1867ffffffffffffffff1661010089015260a08801518218601c81901c60249190911b1867ffffffffffffffff1661020089015260608801518518602481901c601c9190911b1867ffffffffffffffff1660a08901526102408801518518602b81901c60159190911b1867ffffffffffffffff1660608901526102208801518618603181901c600f9190911b1867ffffffffffffffff166102408901526101608801518118603681901c600a9190911b1867ffffffffffffffff166102208901525060e08701518518603a81901c60069190911b1867ffffffffffffffff166101608801526101408701518118603d81901c60039190911b1867ffffffffffffffff1660e0880152505067ffffffffffffffff81166101408601525050505050565b611b66816116b9565b805160208201805160408401805160608601805160808801805167ffffffffffffffff871986168a188116808c528619851689188216909952831982169095188516909552841988169091188316909152941990921618811690925260a08301805160c0808601805160e0880180516101008a0180516101208c018051861985168a188d16909a528319821686188c16909652801989169092188a169092528619861618881690529219909216909218841690526101408401805161016086018051610180880180516101a08a0180516101c08c0180518619851689188d169099528319821686188c16909652801988169092188a169092528519851618881690529119909116909118841690526101e08401805161020086018051610220880180516102408a0180516102608c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052610280840180516102a0860180516102c0880180516102e08a0180516103008c0180518619851689188d169099528319821686188c16909652801988169092188a16909252851985161888169052911990911690911884169052600386901b850151901c90811890911682526114f1565b611d4b60008284611b5d565b611d5760018284611b5d565b611d6360028284611b5d565b611d6f60038284611b5d565b611d7b60048284611b5d565b611d8760058284611b5d565b611d9360068284611b5d565b611d9f60078284611b5d565b611dab60088284611b5d565b611db760098284611b5d565b611dc3600a8284611b5d565b611dcf600b8284611b5d565b611ddb600c8284611b5d565b611de7600d8284611b5d565b611df3600e8284611b5d565b611dff600f8284611b5d565b611e0b60108284611b5d565b611e1760118284611b5d565b611e2360128284611b5d565b611e2f60138284611b5d565b611e3b60148284611b5d565b611e4760158284611b5d565b611e5360168284611b5d565b6114f160178284611b5d565b7f01000000000000000000000000000000000000000000000000000000000000007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831617611f05818360408051600093845233602052918152606090922091527effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01000000000000000000000000000000000000000000000000000000000000001790565b9392505050565b6060604051905081602082018181018286833760888306808015611f6a576088829003850160808582017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01536001845160001a1784538652611f7c565b60018353608060878401536088850186525b5050505050601f19603f82510116810160405292915050565b60c01c90565b600061201e565b66ff00ff00ff00ff8160081c1667ff00ff00ff00ff00611fcc8360081b67ffffffffffffffff1690565b1617905065ffff0000ffff8160101c1667ffff0000ffff0000611ff98360101b67ffffffffffffffff1690565b1617905060008160201c6120178360201b67ffffffffffffffff1690565b1792915050565b6080820151602083019061203690611fa2565b611fa2565b604082015161204490611fa2565b60401b1761205c61203160018460059190911b015190565b825160809190911b9061206e90611fa2565b60c01b17179392505050565b82600f81019282156120a8579160200282015b828111156120a857825182559160200191906001019061208d565b506120b49291506120d0565b5090565b60405180602001604052806120cb6120e5565b905290565b5b808211156120b457600081556001016120d1565b6040518061032001604052806019906020820280368337509192915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461212857600080fd5b919050565b6000806040838503121561214057600080fd5b61214983612104565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610320810167ffffffffffffffff811182821017156121aa576121aa612157565b60405290565b6040516060810167ffffffffffffffff811182821017156121aa576121aa612157565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561221a5761221a612157565b604052919050565b600061032080838503121561223657600080fd5b604051602080820167ffffffffffffffff838210818311171561225b5761225b612157565b8160405283955087601f88011261227157600080fd5b612279612186565b948701949150818886111561228d57600080fd5b875b868110156122b557803583811681146122a85760008081fd5b845292840192840161228f565b50909352509295945050505050565b6000606082840312156122d657600080fd5b50919050565b60008083601f8401126122ee57600080fd5b50813567ffffffffffffffff81111561230657600080fd5b6020830191508360208260051b850101111561232157600080fd5b9250929050565b60008060008060008060008060006103e08a8c03121561234757600080fd5b6123508a612104565b985060208a013597506123668b60408c01612222565b96506103608a013567ffffffffffffffff8082111561238457600080fd5b6123908d838e016122c4565b97506103808c01359150808211156123a757600080fd5b6123b38d838e016122dc565b90975095506103a08c01359150808211156123cd57600080fd5b6123d98d838e016122c4565b94506103c08c01359150808211156123f057600080fd5b506123fd8c828d016122dc565b915080935050809150509295985092959850929598565b600080600080600060a0868803121561242c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000806040838503121561246257600080fd5b50508035926020909101359150565b60006020828403121561248357600080fd5b5035919050565b60008083601f84011261249c57600080fd5b50813567ffffffffffffffff8111156124b457600080fd5b60208301915083602082850101111561232157600080fd5b600080600080600080608087890312156124e557600080fd5b86359550602087013567ffffffffffffffff8082111561250457600080fd5b6125108a838b0161248a565b9097509550604089013591508082111561252957600080fd5b5061253689828a016122dc565b9094509250506060870135801515811461254f57600080fd5b809150509295509295509295565b60008060006060848603121561257257600080fd5b61257b84612104565b95602085013595506040909401359392505050565b6000806000604084860312156125a557600080fd5b83359250602084013567ffffffffffffffff8111156125c357600080fd5b6125cf8682870161248a565b9497909650939450505050565b6000806000806000608086880312156125f457600080fd5b6125fd86612104565b945060208601359350604086013567ffffffffffffffff8082111561262157600080fd5b61262d89838a016122c4565b9450606088013591508082111561264357600080fd5b50612650888289016122dc565b969995985093965092949392505050565b803563ffffffff8116811461212857600080fd5b60008060006060848603121561268a57600080fd5b8335925061269a60208501612661565b91506126a860408501612661565b90509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612745577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361277b5761277b6126e0565b5060010190565b60006060823603121561279457600080fd5b61279c6121b0565b823567ffffffffffffffff808211156127b457600080fd5b9084019036601f8301126127c757600080fd5b81356020828211156127db576127db612157565b61280b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116016121d3565b9250818352368183860101111561282157600080fd5b81818501828501376000918301810191909152908352848101359083015250604092830135928101929092525090565b81516103208201908260005b601981101561288657825167ffffffffffffffff1682526020928301929091019060010161285d565b50505092915050565b600082198211156128a2576128a26126e0565b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126128dc57600080fd5b83018035915067ffffffffffffffff8211156128f757600080fd5b60200191503681900382131561232157600080fd5b600181815b8085111561296557817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561294b5761294b6126e0565b8085161561295857918102915b93841c9390800290612911565b509250929050565b60008261297c57506001612a28565b8161298957506000612a28565b816001811461299f57600281146129a9576129c5565b6001915050612a28565b60ff8411156129ba576129ba6126e0565b50506001821b612a28565b5060208310610133831016604e8410600b84101617156129e8575081810a612a28565b6129f2838361290c565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115612a2457612a246126e0565b0290505b92915050565b6000611f05838361296d565b600082821015612a4c57612a4c6126e0565b500390565b600063ffffffff83811690831681811015612a6e57612a6e6126e0565b039392505050565b6000845160005b81811015612a975760208188018101518583015201612a7d565b81811115612aa6576000828501525b509190910192835250602082015260400191905056fea164736f6c634300080f000a",
}

// AlphabetVMABI is the input ABI used to generate the binding from.
// Deprecated: Use AlphabetVMMetaData.ABI instead.
var AlphabetVMABI = AlphabetVMMetaData.ABI

// AlphabetVMBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AlphabetVMMetaData.Bin instead.
var AlphabetVMBin = AlphabetVMMetaData.Bin

// DeployAlphabetVM deploys a new Ethereum contract, binding an instance of AlphabetVM to it.
func DeployAlphabetVM(auth *bind.TransactOpts, backend bind.ContractBackend, _absolutePrestate [32]byte) (common.Address, *types.Transaction, *AlphabetVM, error) {
	parsed, err := AlphabetVMMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AlphabetVMBin), backend, _absolutePrestate)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AlphabetVM{AlphabetVMCaller: AlphabetVMCaller{contract: contract}, AlphabetVMTransactor: AlphabetVMTransactor{contract: contract}, AlphabetVMFilterer: AlphabetVMFilterer{contract: contract}}, nil
}

// AlphabetVM is an auto generated Go binding around an Ethereum contract.
type AlphabetVM struct {
	AlphabetVMCaller     // Read-only binding to the contract
	AlphabetVMTransactor // Write-only binding to the contract
	AlphabetVMFilterer   // Log filterer for contract events
}

// AlphabetVMCaller is an auto generated read-only Go binding around an Ethereum contract.
type AlphabetVMCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AlphabetVMTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AlphabetVMFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AlphabetVMSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AlphabetVMSession struct {
	Contract     *AlphabetVM       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AlphabetVMCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AlphabetVMCallerSession struct {
	Contract *AlphabetVMCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// AlphabetVMTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AlphabetVMTransactorSession struct {
	Contract     *AlphabetVMTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// AlphabetVMRaw is an auto generated low-level Go binding around an Ethereum contract.
type AlphabetVMRaw struct {
	Contract *AlphabetVM // Generic contract binding to access the raw methods on
}

// AlphabetVMCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AlphabetVMCallerRaw struct {
	Contract *AlphabetVMCaller // Generic read-only contract binding to access the raw methods on
}

// AlphabetVMTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AlphabetVMTransactorRaw struct {
	Contract *AlphabetVMTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAlphabetVM creates a new instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVM(address common.Address, backend bind.ContractBackend) (*AlphabetVM, error) {
	contract, err := bindAlphabetVM(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AlphabetVM{AlphabetVMCaller: AlphabetVMCaller{contract: contract}, AlphabetVMTransactor: AlphabetVMTransactor{contract: contract}, AlphabetVMFilterer: AlphabetVMFilterer{contract: contract}}, nil
}

// NewAlphabetVMCaller creates a new read-only instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMCaller(address common.Address, caller bind.ContractCaller) (*AlphabetVMCaller, error) {
	contract, err := bindAlphabetVM(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMCaller{contract: contract}, nil
}

// NewAlphabetVMTransactor creates a new write-only instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMTransactor(address common.Address, transactor bind.ContractTransactor) (*AlphabetVMTransactor, error) {
	contract, err := bindAlphabetVM(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMTransactor{contract: contract}, nil
}

// NewAlphabetVMFilterer creates a new log filterer instance of AlphabetVM, bound to a specific deployed contract.
func NewAlphabetVMFilterer(address common.Address, filterer bind.ContractFilterer) (*AlphabetVMFilterer, error) {
	contract, err := bindAlphabetVM(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AlphabetVMFilterer{contract: contract}, nil
}

// bindAlphabetVM binds a generic wrapper to an already deployed contract.
func bindAlphabetVM(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AlphabetVMABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AlphabetVM *AlphabetVMRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AlphabetVM.Contract.AlphabetVMCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AlphabetVM *AlphabetVMRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AlphabetVM.Contract.AlphabetVMTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AlphabetVM *AlphabetVMRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AlphabetVM.Contract.AlphabetVMTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AlphabetVM *AlphabetVMCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AlphabetVM.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AlphabetVM *AlphabetVMTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AlphabetVM.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AlphabetVM *AlphabetVMTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AlphabetVM.Contract.contract.Transact(opts, method, params...)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMCaller) Oracle(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AlphabetVM.contract.Call(opts, &out, "oracle")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMSession) Oracle() (common.Address, error) {
	return _AlphabetVM.Contract.Oracle(&_AlphabetVM.CallOpts)
}

// Oracle is a free data retrieval call binding the contract method 0x7dc0d1d0.
//
// Solidity: function oracle() view returns(address)
func (_AlphabetVM *AlphabetVMCallerSession) Oracle() (common.Address, error) {
	return _AlphabetVM.Contract.Oracle(&_AlphabetVM.CallOpts)
}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMCaller) Step(opts *bind.CallOpts, _stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _AlphabetVM.contract.Call(opts, &out, "step", _stateData, arg1, _localContext)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMSession) Step(_stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	return _AlphabetVM.Contract.Step(&_AlphabetVM.CallOpts, _stateData, arg1, _localContext)
}

// Step is a free data retrieval call binding the contract method 0xe14ced32.
//
// Solidity: function step(bytes _stateData, bytes , bytes32 _localContext) view returns(bytes32 postState_)
func (_AlphabetVM *AlphabetVMCallerSession) Step(_stateData []byte, arg1 []byte, _localContext [32]byte) ([32]byte, error) {
	return _AlphabetVM.Contract.Step(&_AlphabetVM.CallOpts, _stateData, arg1, _localContext)
}
