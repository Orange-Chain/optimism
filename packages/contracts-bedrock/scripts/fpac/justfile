set positional-arguments

# ENV
monorepo_root := "../../../.."
deploy_config_path := "../../deploy-config"
tmp := `mktemp`

# Help menu
help:
  just -l

# Generate the cannon prestate, and tar the `op-program` + `cannon` binaries + prestate data used to generate it.
cannon-prestate chain:
  cd {{monorepo_root}} && make cannon-prestate
  @mkdir -p prestate-artifacts
  @cp -r {{monorepo_root}}/cannon/bin/** prestate-artifacts/
  @cp -r {{monorepo_root}}/op-program/bin/** prestate-artifacts/
  tar -czvf prestate-artifacts.tar.gz prestate-artifacts
  @jq ".faultGameAbsolutePrestate = $(cat prestate-artifacts/prestate-proof.json | jq .pre)" "{{deploy_config_path}}/$1.json" > {{tmp}} && mv {{tmp}} "{{deploy_config_path}}/$1.json"
  @echo "-------------------------------------------------------------------------------------------------------------"
  @echo "-> Archive of prestate artifacts available at prestate-artifacts.tar.gz"
  @echo "-> Set the absolute prestate to $(cat prestate-artifacts/prestate-proof.json | jq .pre) in the $1 deploy config."
  @rm -rf prestate-artifacts

# Deploy a fresh version of the FPAC contracts. Pass `--broadcast` to send to the network.
deploy-fresh chain *args='':
  forge script FPACOPS.sol --sig "deployFPAC()" --chain $1 -vvv $@

# Upgrades a dispute game implementation in the deployed `DisputeGameFactory` contract for the configured chain. Pass `--broadcast` to send to the network.
upgrade-game-impl chain dgf vm *args='':
  forge script FPACOPS.sol --sig "upgradeGameImpl(address,address)" --chain $1 -vvv $2 $3 $@

# Upgrades a dispute game's init bond in the deployed `DisputeGameFactory` contract for the configured chain. Pass `--broadcast` to send to the network.
update-init-bond chain dgf game-type new-init-bond *args='':
  forge script FPACOPS.sol --sig "updateInitBond(address,uint8,uint256)" --chain $1 -vvv $2 $3 $4 $@
